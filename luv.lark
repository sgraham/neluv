// Luv grammar
// Originally adapted from: https://docs.python.org/3/reference/grammar.html

start: (_NEWLINE | stmt)*

funcdef: "def" [returntype] (name | single_dot_name) "(" [parameters] ")" ":" suite
single_dot_name: name "." name

// This is a big hack because I couldn't figure out how to slurp everything
// under a `macro blah:` to pass to python. If/when the parser is rewritten to
// be faster, these should be inline, not in separate files.
import_macros_stmt: "import_macros" string

parameters: paramvalue ("," paramvalue)* ","?
?paramvalue: typedparam ("=" test)?
?typedparam: typed_var


lambdef: "lambda" [lambda_params] ":" test
lambdef_nocond: "lambda" [lambda_params] ":" test_nocond
lambda_params: lambda_paramvalue ("," lambda_paramvalue)*
?lambda_paramvalue: name ("=" test)?

?stmt: compound_stmt | simple_stmt
?simple_stmt: small_stmt (";" small_stmt)* [";"] _NEWLINE
?small_stmt: (expr_stmt | assign_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | nonlocal_stmt | assert_stmt)
expr_stmt: testlist_expr
assign_stmt: augassign | assign

?var_decl_type : name_with_package
               | "[" "]" var_decl_type -> list_decl
               | "[" number "]" var_decl_type -> fixed_array_decl
               | "*" var_decl_type -> pointer_decl
               | "?" var_decl_type -> optional_decl
               | funcdecl

?name_with_package: name_with_package "::" name
                  | name -> ident

// Similar to funcdef, but return must be included, and parameters can't have names
funcdecl: "def" returntype "(" [parameter_types] ")"
parameter_types: test ("," test)*

typed_var: var_decl_type name

returntype: var_decl_type

assign: testlist_expr ("=" testlist_expr)+
      | typed_var ("=" testlist_expr)* -> var_decl_init

augassign: testlist_expr augassign_op testlist
!augassign_op: "+=" | "-=" | "*=" | "@=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | "**=" | "//="
?testlist_expr: test
                   | test ("," test)+ ","?  -> tuple
                   | test ","  -> tuple

del_stmt: "del" exprlist
pass_stmt: "pass"
?flow_stmt: break_stmt | continue_stmt | return_stmt
break_stmt: "break"
continue_stmt: "continue"
return_stmt: "return" [testlist]
import_stmt: import_name | import_from
import_name: "import" dotted_as_names
// note below: the ("." | "...") is necessary because "..." is tokenized as ELLIPSIS
import_from: "from" (dots? dotted_name | dots) "import" ("*" | "(" import_as_names ")" | import_as_names)
!dots: "."+
import_as_name: name ["as" name]
dotted_as_name: dotted_name ["as" name]
import_as_names: import_as_name ("," import_as_name)* [","]
dotted_as_names: dotted_as_name ("," dotted_as_name)*
dotted_name: name ("." name)*
global_stmt: "global" name ("," name)*
nonlocal_stmt: "nonlocal" name ("," name)*
assert_stmt: "assert" test ["," test]

?compound_stmt: if_stmt | while_stmt | for_stmt | with_stmt
                | funcdef | structdef | uniondef | macro_with_block_stmt
                | import_macros_stmt | on_block
if_stmt: "if" (test | optional_unwrap) ":" suite elifs ["else" ":" suite]
optional_unwrap: test "as" name
elifs: elif_*
elif_: "elif" (test | optional_unwrap) ":" suite
while_stmt: "while" test ":" suite ["else" ":" suite]
for_stmt: "for" [exprlist "in"] testlist ":" suite ["else" ":" suite]

on_block: "on" name ":" suite

with_stmt: "with" with_items ":" suite
with_items: with_item ("," with_item)*
with_item: test ["as" name]

macro_with_block_stmt: test ":" suite

suite: simple_stmt | _NEWLINE _INDENT stmt+ _DEDENT

?test: or_test ("if" or_test "else" test)?
     | lambdef

?test_nocond: or_test | lambdef_nocond

?or_test: and_test ("or" and_test)*
?and_test: not_test_ ("and" not_test_)*
?not_test_: "not" not_test_ -> not_test
         | comparison
?comparison: expr (comp_op expr)*

?expr: or_expr
?or_expr: xor_expr ("|" xor_expr)*
?xor_expr: and_expr ("^" and_expr)*
?and_expr: shift_expr ("&" shift_expr)*
?shift_expr: arith_expr (_shift_op arith_expr)*
?arith_expr: term (_add_op term)*
?term: factor (_mul_op factor)*
?factor: _unary_op factor | power

!_unary_op: "+"|"-"|"~"|"&"|"*"
!_add_op: "+"|"-"
!_shift_op: "<<"|">>"
!_mul_op: "*"|"@"|"/"|"%"|"//"
!comp_op: "<"|">"|"=="|">="|"<="|"!="|"in"|"not" "in"|"is"|"is" "not"

?power: atom_expr ("**" factor)?

?atom_expr: atom_expr "(" [arguments] ")"    -> funccall
          | atom_expr "[" subscriptlist "]"  -> getitem
          | atom_expr "." name               -> getattr
          | atom

?atom: "(" _tuple_inner? ")" -> tuple
     | "(" comprehension{test} ")" -> tuple_comprehension
     | "[" _exprlist? "]"  -> list
     | "[" comprehension{test} "]"  -> list_comprehension
     | "{" _dict_exprlist? "}" -> dict
     | "{" comprehension{key_value} "}" -> dict_comprehension
     | "{" _exprlist "}" -> set
     | "{" comprehension{test} "}" -> set_comprehension
     | name -> ident
     | number
     | string_concat
     | "(" test ")"
     | "..." -> ellipsis
     | "null"    -> const_null
     | "true"    -> const_true
     | "false"   -> const_false

?string_concat: (string | fstring)+

_tuple_inner: test (("," test)+ [","] | ",")

?subscriptlist: subscript
              | subscript (("," subscript)+ [","] | ",") -> subscript_tuple
?subscript: test | ([test] ":" [test] [sliceop]) -> slice
sliceop: ":" [test]
?exprlist: expr
         | expr (("," expr)+ [","]|",")
?testlist: test | testlist_tuple
testlist_tuple: test (("," test)+ [","] | ",")
_dict_exprlist: (key_value | "**" expr) ("," (key_value | "**" expr))* [","]

key_value: test ":" test

_exprlist: test (","  test)* [","]

structdef: "struct" name ":" struct_union_types
uniondef: "union" name ":" struct_union_types

struct_union_types: typed_var _NEWLINE
                  | _NEWLINE _INDENT (typed_var _NEWLINE)+ _DEDENT

arguments: argvalue ("," argvalue)*
         | comprehension{test}

?argvalue: test ("=" test)?


comprehension{comp_result}: comp_result comp_fors [comp_if]
comp_fors: comp_for+
comp_for: "for" exprlist "in" or_test
?comp_if: "if" test_nocond

number: DEC_NUMBER | HEX_NUMBER | BIN_NUMBER | OCT_NUMBER | FLOAT_NUMBER | IMAG_NUMBER
string: STRING | LONG_STRING
fstring: FSTRING | LONG_FSTRING

// Other terminals

_NEWLINE: ( /\r?\n[\t ]*/ )+

%ignore /[\t \f]+/  // WS
%ignore /\\[\t \f]*\r?\n/   // LINE_CONT
%ignore COMMENT
%declare _INDENT _DEDENT


// Python terminals

!name: NAME
NAME: /[^\W\d]\w*/
COMMENT: /\/\/[^\n]*/

FSTRING: /([f]?r?|r[f])("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
STRING: /([ub]?r?|r[ub])("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
LONG_FSTRING: /([f]?r?|r[f])(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/is
LONG_STRING: /([f]?r?|r[f])(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/is

_SPECIAL_DEC: "0".."9"        ("_"?  "0".."9"                       )*
DEC_NUMBER:   "1".."9"        ("_"?  "0".."9"                       )*
          |   "0"             ("_"?  "0"                            )* /(?![1-9])/
HEX_NUMBER.2: "0" ("x" | "X") ("_"? ("0".."9" | "a".."f" | "A".."F"))+
OCT_NUMBER.2: "0" ("o" | "O") ("_"?  "0".."7"                       )+
BIN_NUMBER.2: "0" ("b" | "B") ("_"?  "0".."1"                       )+

_EXP: ("e"|"E") ["+" | "-"] _SPECIAL_DEC
DECIMAL: "." _SPECIAL_DEC | _SPECIAL_DEC "." _SPECIAL_DEC?
FLOAT_NUMBER.2: _SPECIAL_DEC _EXP | DECIMAL _EXP?
IMAG_NUMBER.2: (_SPECIAL_DEC      | FLOAT_NUMBER) ("J" | "j")
