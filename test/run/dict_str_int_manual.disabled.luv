// TODO:
// - write rehash()
// - iterator types

LOW_WATERMARK = 50
HIGH_WATERMARK = 70
INITIAL_SIZE = 16
TOMBSTONE = reinterpret -1 as *i8

struct MyDictEntry_str_int:
  str key
  int val

struct MyDict_str_int:
  *MyDictEntry_str_int buckets
  int capacity
  int used

def match(*MyDictEntry_str_int entry, str key):
  return (entry.key.ptr and
          entry.key.ptr != TOMBSTONE and
          entry.key.len == key.len and
          C.memcmp(entry.key.ptr, key.ptr, key.len) == 0)

on MyDict_str_int def rehash(self):
  nkeys = 0
  for i in range(self.capacity):
    if self.buckets[i].key.ptr != null and self.buckets[i].key.ptr != TOMBSTONE:
      nkeys += 1

  cap = self.capacity
  while (nkeys * 100) / cap >= LOW_WATERMARK:
    cap *= 2
  assert cap > 0


  map2 = MyDict_str_int(C.malloc(sizeof(MyDictEntry_str_int) * cap), cap, 0)
  for i in range(self.capacity):
    entry = &self.buckets[i]
    if entry.key.ptr != null and entry.key.ptr != TOMBSTONE:
      map2[entry.key] = entry.val

  assert map2.used == nkeys
  C.free(self.buckets)
  *self = map2


on MyDict_str_int def _get_or_insert_entry(self, str key):
  if not self.buckets:
    self.buckets = C.malloc(sizeof(MyDictEntry_str_int) * INITIAL_SIZE)
    self.capacity = INITIAL_SIZE
  elif self.used * 100 / self.capacity >= HIGH_WATERMARK:
    self.rehash()

  h = hash(key)

  for i in range(self.capacity):
    i64 hash_loc = (reinterpret h as i64) + (reinterpret i as i64)  // XXX silly
    i64 modded = hash_loc % (reinterpret self.capacity as i64)
    entry = &self.buckets[modded]
    if match(entry, key):
      entry.key = key

    if not entry.key.ptr:
      entry.key = key
      self.used += 1
      return entry

  unreachable()

on MyDict_str_int def _get_entry(self, str key):
  NONE = zeroed(MyDictEntry_str_int)  // XXX inference problem on rval
  if not self.buckets:
    return false, NONE

  h = hash(key)

  for i in range(self.capacity):
    i64 hash_loc = (reinterpret h as i64) + (reinterpret i as i64)  // XXX silly
    i64 modded = hash_loc % (reinterpret self.capacity as i64)
    entry = &self.buckets[modded]
    if match(entry, key):
      return true, entry
    if entry.key.ptr == null:
      return false, NONE

  unreachable()

on MyDict_str_int def __getitem__(self, str key):
  valid, entry = self._get_entry(key)
  if valid:
    return entry.val
  return zeroed(int)

on MyDict_str_int def __setitem__(self, str key, int val):
  entry = self._get_or_insert_entry(key)
  entry.val = val

on MyDict_str_int def __delitem__(self, str key):
  valid, entry = self._get_entry(key)
  if valid:
    entry.key.ptr = TOMBSTONE

on MyDict_str_int def items(self):
  assert false

on MyDict_str_int def values(self):
  assert false

// TODO: default for ret not possible currently, maybe zeroed(V)==int for now
// or just get() and get_with_default() or something.
on MyDict_str_int def get(self, str key):
  assert false

on MyDict_str_int def __del__(self):
  C.free(self.data)
  self.buckets = null
  self.capacity = 0
  self.used = 0

def main():
  D = MyDict_str_int(null, 0)
  del D
