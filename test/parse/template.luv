// `C is the container (list)
// `T is the contained type (int)
// `I is the iterator type

// - quote QuotedList makes a global available to macros
// - a macro can QuotedList.unquote({expansions}) which just
//   substitutes Idents in for TIdents
// - the macro helpers can append/insert/return as necessary
//
// for list in particular, the compiler can assume that there's various things
// in the prelude and just do the same macro expansion (slightly handwavy)
//
// Various patterns for instantiating seem fine, but maybe eventually can have a
// magical syntax that allows the automatic instantiation based on declaring a
// type with the type parameters instantiated.
// - Would need some logic similar to macro to build the Idents and other
// derived types, so maybe it's just a matter of some symbol manipulation in
// that macro (i.e. to build the other idents based on args[0]).
// ... so maybe the magic syntax is just calling the macro?

// Messy stuff:
// - quote lives in luv, but macro in py (ok for prelude, gross for user code)
//   ... but mostly goes away once parser allows a suite of python code inline


//def List(macro):
//  list.unquote({
//    '`C': last.Ident("List$i32"),
//    '`T': last.Ident("i32"),
//    '`I': last.Ident("ListIter$i32"),
//  })
//
//def List(macro):
//  // TODO: t.name isn't right because of base type vs struct
//  t = macro.args[0]
//  c = last.Ident("List$" + t.name)
//  i = last.Ident("ListIter$" + t.name)
//  if not macro.have_global(c):
//    macro.insert_global(QuotedList.unquote({...}))
//  return macro.parse_expr(c)
//
quote Thingy:
  struct `C:
    *`T ptr

  on `C def __getitem__(self, int at):
    pass

  on `C def __iter__(self):
    return `I(self, 0)
---
TopLevel(body=Block(entries=[Quote(name='Thingy',
                                   body=Block(entries=[Struct(name=TIdent(name='`C'),
                                                              members=[TypedVar(type=PointerDecl(base=TIdent(name='`T')),
                                                                                name='ptr')]),
                                                       FuncDef(rtype=Type(base='auto'),
                                                               name=JoinIdents(idents=[TIdent(name='`C'),
                                                                                       Ident(name='$__getitem__')]),
                                                               params=[TypedVar(type=PointerDecl(base=TIdent(name='`C')),
                                                                                name='self'),
                                                                       TypedVar(type=Type(base='i32'),
                                                                                name='at')],
                                                               body=Block(entries=[Pass()]),
                                                               hidden=False),
                                                       FuncDef(rtype=Type(base='auto'),
                                                               name=JoinIdents(idents=[TIdent(name='`C'),
                                                                                       Ident(name='$__iter__')]),
                                                               params=[TypedVar(type=PointerDecl(base=TIdent(name='`C')),
                                                                                name='self')],
                                                               body=Block(entries=[Return(value=FuncCall(func=TIdent(name='`I'),
                                                                                                         args=[Ident(name='self'),
                                                                                                               Number(value=0)]))]),
                                                               hidden=False)]))]))
