# The file was automatically generated by Lark v1.1.8
__version__ = "1.1.8"

#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

from copy import deepcopy
from abc import ABC, abstractmethod
from types import ModuleType
from typing import (
    TypeVar, Generic, Type, Tuple, List, Dict, Iterator, Collection, Callable, Optional, FrozenSet, Any,
    Union, Iterable, IO, TYPE_CHECKING, overload, Sequence,
    Pattern as REPattern, ClassVar, Set, Mapping
)


class LarkError(Exception):
    pass


class ConfigurationError(LarkError, ValueError):
    pass


def assert_config(value, options: Collection, msg='Got %r, expected one of %s'):
    if value not in options:
        raise ConfigurationError(msg % (value, options))


class GrammarError(LarkError):
    pass


class ParseError(LarkError):
    pass


class LexError(LarkError):
    pass

T = TypeVar('T')

class UnexpectedInput(LarkError):
    #--
    line: int
    column: int
    pos_in_stream = None
    state: Any
    _terminals_by_name = None
    interactive_parser: 'InteractiveParser'

    def get_context(self, text: str, span: int=40) -> str:
        #--
        assert self.pos_in_stream is not None, self
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        if not isinstance(text, bytes):
            before = text[start:pos].rsplit('\n', 1)[-1]
            after = text[pos:end].split('\n', 1)[0]
            return before + after + '\n' + ' ' * len(before.expandtabs()) + '^\n'
        else:
            before = text[start:pos].rsplit(b'\n', 1)[-1]
            after = text[pos:end].split(b'\n', 1)[0]
            return (before + after + b'\n' + b' ' * len(before.expandtabs()) + b'^\n').decode("ascii", "backslashreplace")

    def match_examples(self, parse_fn: 'Callable[[str], Tree]',
                             examples: Union[Mapping[T, Iterable[str]], Iterable[Tuple[T, Iterable[str]]]],
                             token_type_match_fallback: bool=False,
                             use_accepts: bool=True
                         ) -> Optional[T]:
        #--
        assert self.state is not None, "Not supported for this exception"

        if isinstance(examples, Mapping):
            examples = examples.items()

        candidate = (None, False)
        for i, (label, example) in enumerate(examples):
            assert not isinstance(example, str), "Expecting a list"

            for j, malformed in enumerate(example):
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        if (
                            use_accepts
                            and isinstance(self, UnexpectedToken)
                            and isinstance(ut, UnexpectedToken)
                            and ut.accepts != self.accepts
                        ):
                            logger.debug("Different accepts with same state[%d]: %s != %s at example [%s][%s]" %
                                         (self.state, self.accepts, ut.accepts, i, j))
                            continue
                        if (
                            isinstance(self, (UnexpectedToken, UnexpectedEOF))
                            and isinstance(ut, (UnexpectedToken, UnexpectedEOF))
                        ):
                            if ut.token == self.token:  ##

                                logger.debug("Exact Match at example [%s][%s]" % (i, j))
                                return label

                            if token_type_match_fallback:
                                ##

                                if (ut.token.type == self.token.type) and not candidate[-1]:
                                    logger.debug("Token Type Fallback at example [%s][%s]" % (i, j))
                                    candidate = label, True

                        if candidate[0] is None:
                            logger.debug("Same State match at example [%s][%s]" % (i, j))
                            candidate = label, False

        return candidate[0]

    def _format_expected(self, expected):
        if self._terminals_by_name:
            d = self._terminals_by_name
            expected = [d[t_name].user_repr() if t_name in d else t_name for t_name in expected]
        return "Expected one of: \n\t* %s\n" % '\n\t* '.join(expected)


class UnexpectedEOF(ParseError, UnexpectedInput):
    #--
    expected: 'List[Token]'

    def __init__(self, expected, state=None, terminals_by_name=None):
        super(UnexpectedEOF, self).__init__()

        self.expected = expected
        self.state = state
        from .lexer import Token
        self.token = Token("<EOF>", "")  ##

        self.pos_in_stream = -1
        self.line = -1
        self.column = -1
        self._terminals_by_name = terminals_by_name


    def __str__(self):
        message = "Unexpected end-of-input. "
        message += self._format_expected(self.expected)
        return message


class UnexpectedCharacters(LexError, UnexpectedInput):
    #--

    allowed: Set[str]
    considered_tokens: Set[Any]

    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None,
                 terminals_by_name=None, considered_rules=None):
        super(UnexpectedCharacters, self).__init__()

        ##

        self.line = line
        self.column = column
        self.pos_in_stream = lex_pos
        self.state = state
        self._terminals_by_name = terminals_by_name

        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.considered_rules = considered_rules
        self.token_history = token_history

        if isinstance(seq, bytes):
            self.char = seq[lex_pos:lex_pos + 1].decode("ascii", "backslashreplace")
        else:
            self.char = seq[lex_pos]
        self._context = self.get_context(seq)


    def __str__(self):
        message = "No terminal matches '%s' in the current parser context, at line %d col %d" % (self.char, self.line, self.column)
        message += '\n\n' + self._context
        if self.allowed:
            message += self._format_expected(self.allowed)
        if self.token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in self.token_history)
        return message


class UnexpectedToken(ParseError, UnexpectedInput):
    #--

    expected: Set[str]
    considered_rules: Set[str]

    def __init__(self, token, expected, considered_rules=None, state=None, interactive_parser=None, terminals_by_name=None, token_history=None):
        super(UnexpectedToken, self).__init__()

        ##

        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.pos_in_stream = getattr(token, 'start_pos', None)
        self.state = state

        self.token = token
        self.expected = expected  ##

        self._accepts = NO_VALUE
        self.considered_rules = considered_rules
        self.interactive_parser = interactive_parser
        self._terminals_by_name = terminals_by_name
        self.token_history = token_history


    @property
    def accepts(self) -> Set[str]:
        if self._accepts is NO_VALUE:
            self._accepts = self.interactive_parser and self.interactive_parser.accepts()
        return self._accepts

    def __str__(self):
        message = ("Unexpected token %r at line %s, column %s.\n%s"
                   % (self.token, self.line, self.column, self._format_expected(self.accepts or self.expected)))
        if self.token_history:
            message += "Previous tokens: %r\n" % self.token_history

        return message



class VisitError(LarkError):
    #--

    obj: 'Union[Tree, Token]'
    orig_exc: Exception

    def __init__(self, rule, obj, orig_exc):
        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

        self.rule = rule
        self.obj = obj
        self.orig_exc = orig_exc


class MissingVariableError(LarkError):
    pass


import sys, re
import logging

logger: logging.Logger = logging.getLogger("lark")
logger.addHandler(logging.StreamHandler())
##

##

logger.setLevel(logging.CRITICAL)


NO_VALUE = object()

T = TypeVar("T")


def classify(seq: Iterable, key: Optional[Callable] = None, value: Optional[Callable] = None) -> Dict:
    d: Dict[Any, Any] = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        try:
            d[k].append(v)
        except KeyError:
            d[k] = [v]
    return d


def _deserialize(data: Any, namespace: Dict[str, Any], memo: Dict) -> Any:
    if isinstance(data, dict):
        if '__type__' in data:  ##

            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


_T = TypeVar("_T", bound="Serialize")

class Serialize:
    #--

    def memo_serialize(self, types_to_memoize: List) -> Any:
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo = None) -> Dict[str, Any]:
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        if hasattr(self, '_serialize'):
            self._serialize(res, memo)  ##

        return res

    @classmethod
    def deserialize(cls: Type[_T], data: Dict[str, Any], memo: Dict[int, Any]) -> _T:
        namespace = getattr(cls, '__serialize_namespace__', [])
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)

        if hasattr(inst, '_deserialize'):
            inst._deserialize()  ##


        return inst


class SerializeMemoizer(Serialize):
    #--

    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize: List) -> None:
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value: Serialize) -> bool:
        return isinstance(value, self.types_to_memoize)

    def serialize(self) -> Dict[int, Any]:  ##

        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data: Dict[int, Any], namespace: Dict[str, Any], memo: Dict[Any, Any]) -> Dict[int, Any]:  ##

        return _deserialize(data, namespace, memo)


try:
    import regex
    _has_regex = True
except ImportError:
    _has_regex = False

if sys.version_info >= (3, 11):
    import re._parser as sre_parse
    import re._constants as sre_constants
else:
    import sre_parse
    import sre_constants

categ_pattern = re.compile(r'\\p{[A-Za-z_]+}')

def get_regexp_width(expr: str) -> Union[Tuple[int, int], List[int]]:
    if _has_regex:
        ##

        ##

        ##

        regexp_final = re.sub(categ_pattern, 'A', expr)
    else:
        if re.search(categ_pattern, expr):
            raise ImportError('`regex` module must be installed in order to use Unicode categories.', expr)
        regexp_final = expr
    try:
        ##

        return [int(x) for x in sre_parse.parse(regexp_final).getwidth()]   ##

    except sre_constants.error:
        if not _has_regex:
            raise ValueError(expr)
        else:
            ##

            ##

            c = regex.compile(regexp_final)
            if c.match('') is None:
                ##

                return 1, int(sre_constants.MAXREPEAT)
            else:
                return 0, int(sre_constants.MAXREPEAT)


from collections import OrderedDict

class Meta:

    empty: bool
    line: int
    column: int
    start_pos: int
    end_line: int
    end_column: int
    end_pos: int
    orig_expansion: 'List[TerminalDef]'
    match_tree: bool

    def __init__(self):
        self.empty = True


_Leaf_T = TypeVar("_Leaf_T")
Branch = Union[_Leaf_T, 'Tree[_Leaf_T]']


class Tree(Generic[_Leaf_T]):
    #--

    data: str
    children: 'List[Branch[_Leaf_T]]'

    def __init__(self, data: str, children: 'List[Branch[_Leaf_T]]', meta: Optional[Meta]=None) -> None:
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self) -> Meta:
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%r, %r)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        yield f'{indent_str*level}{self._pretty_label()}'
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            yield f'\t{self.children[0]}\n'
        else:
            yield '\n'
            for n in self.children:
                if isinstance(n, Tree):
                    yield from n._pretty(level+1, indent_str)
                else:
                    yield f'{indent_str*(level+1)}{n}\n'

    def pretty(self, indent_str: str='  ') -> str:
        #--
        return ''.join(self._pretty(0, indent_str))

    def __rich__(self, parent:Optional['rich.tree.Tree']=None) -> 'rich.tree.Tree':
        #--
        return self._rich(parent)

    def _rich(self, parent):
        if parent:
            tree = parent.add(f'[bold]{self.data}[/bold]')
        else:
            import rich.tree
            tree = rich.tree.Tree(self.data)

        for c in self.children:
            if isinstance(c, Tree):
                c._rich(tree)
            else:
                tree.add(f'[green]{c}[/green]')

        return tree

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self) -> int:
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        queue = [self]
        subtrees = OrderedDict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            ##

            queue += [c for c in reversed(subtree.children)  ##

                      if isinstance(c, Tree) and id(c) not in subtrees]

        del queue
        return reversed(list(subtrees.values()))

    def iter_subtrees_topdown(self):
        #--
        stack = [self]
        stack_append = stack.append
        stack_pop = stack.pop
        while stack:
            node = stack_pop()
            if not isinstance(node, Tree):
                continue
            yield node
            for child in reversed(node.children):
                stack_append(child)

    def find_pred(self, pred: 'Callable[[Tree[_Leaf_T]], bool]') -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return filter(pred, self.iter_subtrees())

    def find_data(self, data: str) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return self.find_pred(lambda t: t.data == data)


from functools import wraps, update_wrapper
from inspect import getmembers, getmro

_Return_T = TypeVar('_Return_T')
_Return_V = TypeVar('_Return_V')
_Leaf_T = TypeVar('_Leaf_T')
_Leaf_U = TypeVar('_Leaf_U')
_R = TypeVar('_R')
_FUNC = Callable[..., _Return_T]
_DECORATED = Union[_FUNC, type]

class _DiscardType:
    #--

    def __repr__(self):
        return "lark.visitors.Discard"

Discard = _DiscardType()

##


class _Decoratable:
    #--

    @classmethod
    def _apply_v_args(cls, visit_wrapper):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            ##

            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(value):
                continue

            ##

            if isinstance(cls.__dict__[name], _VArgsWrapper):
                continue

            setattr(cls, name, _VArgsWrapper(cls.__dict__[name], visit_wrapper))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--
    __visit_tokens__ = True   ##


    def __init__(self,  visit_tokens: bool=True) -> None:
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)

    def _transform_children(self, children):
        for c in children:
            if isinstance(c, Tree):
                res = self._transform_tree(c)
            elif self.__visit_tokens__ and isinstance(c, Token):
                res = self._call_userfunc_token(c)
            else:
                res = c

            if res is not Discard:
                yield res

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        #--
        return self._transform_tree(tree)

    def __mul__(
            self: 'Transformer[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V,]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        #--
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        #--
        return Tree(data, children, meta)

    def __default_token__(self, token):
        #--
        return token


def merge_transformers(base_transformer=None, **transformers_to_merge):
    #--
    if base_transformer is None:
        base_transformer = Transformer()
    for prefix, transformer in transformers_to_merge.items():
        for method_name in dir(transformer):
            method = getattr(transformer, method_name)
            if not callable(method):
                continue
            if method_name.startswith("_") or method_name == "transform":
                continue
            prefixed_method = prefix + "__" + method_name
            if hasattr(base_transformer, prefixed_method):
                raise AttributeError("Cannot merge: method '%s' appears more than once" % prefixed_method)

            setattr(base_transformer, prefixed_method, method)

    return base_transformer


class InlineTransformer(Transformer):   ##

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(Generic[_Leaf_T, _Return_T]):

    transformers: 'Tuple[Union[Transformer, TransformerChain], ...]'

    def __init__(self, *transformers: 'Union[Transformer, TransformerChain]') -> None:
        self.transformers = transformers

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for t in self.transformers:
            tree = t.transform(tree)
        return cast(_Return_T, tree)

    def __mul__(
            self: 'TransformerChain[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer[_Leaf_T, _Return_T]):
    #--
    def _transform_tree(self, tree):           ##

        return self._call_userfunc(tree)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer[_Leaf_T, _Return_T]):
    #--

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        rev_postfix = []
        q: List[Branch[_Leaf_T]] = [tree]
        while q:
            t = q.pop()
            rev_postfix.append(t)
            if isinstance(t, Tree):
                q += t.children

        ##

        stack: List = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []

                res = self._call_userfunc(x, args)
                if res is not Discard:
                    stack.append(res)

            elif self.__visit_tokens__ and isinstance(x, Token):
                res = self._call_userfunc_token(x)
                if res is not Discard:
                    stack.append(res)
            else:
                stack.append(x)

        result, = stack  ##

        ##

        ##

        ##

        return cast(_Return_T, result)


class Transformer_InPlaceRecursive(Transformer):
    #--
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)


##


class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        #--
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase, ABC, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree


class Visitor_Recursive(VisitorBase, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree


class Interpreter(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        ##

        ##

        return self._visit_tree(tree)

    def _visit_tree(self, tree: Tree[_Leaf_T]):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree: Tree[_Leaf_T]) -> List:
        return [self._visit_tree(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)


_InterMethod = Callable[[Type[Interpreter], _Return_T], _R]

def visit_children_decor(func: _InterMethod) -> _InterMethod:
    #--
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner

##


def _apply_v_args(obj, visit_wrapper):
    try:
        _apply = obj._apply_v_args
    except AttributeError:
        return _VArgsWrapper(obj, visit_wrapper)
    else:
        return _apply(visit_wrapper)


class _VArgsWrapper:
    #--
    base_func: Callable

    def __init__(self, func: Callable, visit_wrapper: Callable[[Callable, str, list, Any], Any]):
        if isinstance(func, _VArgsWrapper):
            func = func.base_func
        ##

        self.base_func = func  ##

        self.visit_wrapper = visit_wrapper
        update_wrapper(self, func)

    def __call__(self, *args, **kwargs):
        return self.base_func(*args, **kwargs)

    def __get__(self, instance, owner=None):
        try:
            ##

            ##

            g = type(self.base_func).__get__
        except AttributeError:
            return self
        else:
            return _VArgsWrapper(g(self.base_func, instance, owner), self.visit_wrapper)

    def __set_name__(self, owner, name):
        try:
            f = type(self.base_func).__set_name__
        except AttributeError:
            return
        else:
            f(self.base_func, owner, name)


def _vargs_inline(f, _data, children, _meta):
    return f(*children)
def _vargs_meta_inline(f, _data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, _data, children, meta):
    return f(meta, children)
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))


def v_args(inline: bool = False, meta: bool = False, tree: bool = False, wrapper: Optional[Callable] = None) -> Callable[[_DECORATED], _DECORATED]:
    #--
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_v_args(obj, func)
    return _visitor_args_dec



TOKEN_DEFAULT_PRIORITY = 0


class Symbol(Serialize):
    __slots__ = ('name',)

    name: str
    is_term: ClassVar[bool] = NotImplemented

    def __init__(self, name: str) -> None:
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)

    def renamed(self, f):
        return type(self)(f(self.name))


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term: ClassVar[bool] = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)

    def renamed(self, f):
        return type(self)(f(self.name), self.filter_out)


class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term: ClassVar[bool] = False


class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'template_source', 'empty_indices'

    keep_all_tokens: bool
    expand1: bool
    priority: Optional[int]
    template_source: Optional[str]
    empty_indices: Tuple[bool, ...]

    def __init__(self, keep_all_tokens: bool=False, expand1: bool=False, priority: Optional[int]=None, template_source: Optional[str]=None, empty_indices: Tuple[bool, ...]=()) -> None:
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source
        )


class Rule(Serialize):
    #--
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    origin: NonTerminal
    expansion: Sequence[Symbol]
    order: int
    alias: Optional[str]
    options: RuleOptions
    _hash: int

    def __init__(self, origin: NonTerminal, expansion: Sequence[Symbol],
                 order: int=0, alias: Optional[str]=None, options: Optional[RuleOptions]=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion



from copy import copy

try:  ##

    has_interegular = bool(interegular)
except NameError:
    has_interegular = False

class Pattern(Serialize, ABC):
    #--

    value: str
    flags: Collection[str]
    raw: Optional[str]
    type: ClassVar[str]

    def __init__(self, value: str, flags: Collection[str] = (), raw: Optional[str] = None) -> None:
        self.value = value
        self.flags = frozenset(flags)
        self.raw = raw

    def __repr__(self):
        return repr(self.to_regexp())

    ##

    def __hash__(self):
        return hash((type(self), self.value, self.flags))

    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    @abstractmethod
    def to_regexp(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def min_width(self) -> int:
        raise NotImplementedError()

    @property
    @abstractmethod
    def max_width(self) -> int:
        raise NotImplementedError()

    def _get_flags(self, value):
        for f in self.flags:
            value = ('(?%s:%s)' % (f, value))
        return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags', 'raw'

    type: ClassVar[str] = "str"

    def to_regexp(self) -> str:
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self) -> int:
        return len(self.value)

    @property
    def max_width(self) -> int:
        return len(self.value)


class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', 'raw', '_width'

    type: ClassVar[str] = "re"

    def to_regexp(self) -> str:
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self) -> int:
        return self._get_width()[0]

    @property
    def max_width(self) -> int:
        return self._get_width()[1]


class TerminalDef(Serialize):
    #--
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    name: str
    pattern: Pattern
    priority: int

    def __init__(self, name: str, pattern: Pattern, priority: int = TOKEN_DEFAULT_PRIORITY) -> None:
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)

    def user_repr(self) -> str:
        if self.name.startswith('__'):  ##

            return self.pattern.raw or self.name
        else:
            return self.name

_T = TypeVar('_T', bound="Token")

class Token(str):
    #--
    __slots__ = ('type', 'start_pos', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    __match_args__ = ('type', 'value')

    type: str
    start_pos: Optional[int]
    value: Any
    line: Optional[int]
    column: Optional[int]
    end_line: Optional[int]
    end_column: Optional[int]
    end_pos: Optional[int]


    @overload
    def __new__(
            cls,
            type: str,
            value: Any,
            start_pos: Optional[int] = None,
            line: Optional[int] = None,
            column: Optional[int] = None,
            end_line: Optional[int] = None,
            end_column: Optional[int] = None,
            end_pos: Optional[int] = None
    ) -> 'Token':
        ...

    @overload
    def __new__(
            cls,
            type_: str,
            value: Any,
            start_pos: Optional[int] = None,
            line: Optional[int] = None,
            column: Optional[int] = None,
            end_line: Optional[int] = None,
            end_column: Optional[int] = None,
            end_pos: Optional[int] = None
    ) -> 'Token':        ...

    def __new__(cls, *args, **kwargs):
        if "type_" in kwargs:
            warnings.warn("`type_` is deprecated use `type` instead", DeprecationWarning)

            if "type" in kwargs:
                raise TypeError("Error: using both 'type' and the deprecated 'type_' as arguments.")
            kwargs["type"] = kwargs.pop("type_")

        return cls._future_new(*args, **kwargs)


    @classmethod
    def _future_new(cls, type, value, start_pos=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        inst = super(Token, cls).__new__(cls, value)

        inst.type = type
        inst.start_pos = start_pos
        inst.value = value
        inst.line = line
        inst.column = column
        inst.end_line = end_line
        inst.end_column = end_column
        inst.end_pos = end_pos
        return inst

    @overload
    def update(self, type: Optional[str] = None, value: Optional[Any] = None) -> 'Token':
        ...

    @overload
    def update(self, type_: Optional[str] = None, value: Optional[Any] = None) -> 'Token':
        ...

    def update(self, *args, **kwargs):
        if "type_" in kwargs:
            warnings.warn("`type_` is deprecated use `type` instead", DeprecationWarning)

            if "type" in kwargs:
                raise TypeError("Error: using both 'type' and the deprecated 'type_' as arguments.")
            kwargs["type"] = kwargs.pop("type_")

        return self._future_update(*args, **kwargs)

    def _future_update(self, type: Optional[str] = None, value: Optional[Any] = None) -> 'Token':
        return Token.new_borrow_pos(
            type if type is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls: Type[_T], type_: str, value: Any, borrow_t: 'Token') -> _T:
        return cls(type_, value, borrow_t.start_pos, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.start_pos, self.line, self.column))

    def __repr__(self):
        return 'Token(%r, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.start_pos, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return str.__eq__(self, other)

    __hash__ = str.__hash__


class LineCounter:
    #--

    __slots__ = 'char_pos', 'line', 'column', 'line_start_pos', 'newline_char'

    def __init__(self, newline_char):
        self.newline_char = newline_char
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def __eq__(self, other):
        if not isinstance(other, LineCounter):
            return NotImplemented

        return self.char_pos == other.char_pos and self.newline_char == other.newline_char

    def feed(self, token: Token, test_newline=True):
        #--
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1


class UnlessCallback:
    def __init__(self, scanner):
        self.scanner = scanner

    def __call__(self, t):
        res = self.scanner.match(t.value, 0)
        if res:
            _value, t.type = res
        return t


class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2


def _get_match(re_, regexp, s, flags):
    m = re_.match(regexp, s, flags)
    if m:
        return m.group(0)

def _create_unless(terminals, g_regex_flags, re_, use_bytes):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = []
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority != retok.priority:
                continue
            s = strtok.pattern.value
            if s == _get_match(re_, retok.pattern.to_regexp(), s, g_regex_flags):
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(Scanner(unless, g_regex_flags, re_, match_whole=True, use_bytes=use_bytes))

    new_terminals = [t for t in terminals if t not in embedded_strs]
    return new_terminals, callback


class Scanner:
    def __init__(self, terminals, g_regex_flags, re_, use_bytes, match_whole=False):
        self.terminals = terminals
        self.g_regex_flags = g_regex_flags
        self.re_ = re_
        self.use_bytes = use_bytes
        self.match_whole = match_whole

        self.allowed_types = {t.name for t in self.terminals}

        self._mres = self._build_mres(terminals, len(terminals))

    def _build_mres(self, terminals, max_size):
        ##

        ##

        ##

        postfix = '$' if self.match_whole else ''
        mres = []
        while terminals:
            pattern = u'|'.join(u'(?P<%s>%s)' % (t.name, t.pattern.to_regexp() + postfix) for t in terminals[:max_size])
            if self.use_bytes:
                pattern = pattern.encode('latin-1')
            try:
                mre = self.re_.compile(pattern, self.g_regex_flags)
            except AssertionError:  ##

                return self._build_mres(terminals, max_size // 2)

            mres.append(mre)
            terminals = terminals[max_size:]
        return mres

    def match(self, text, pos):
        for mre in self._mres:
            m = mre.match(text, pos)
            if m:
                return m.group(0), m.lastgroup


def _regexp_has_newline(r: str):
    #--
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)


class LexerState:
    #--

    __slots__ = 'text', 'line_ctr', 'last_token'

    text: str
    line_ctr: LineCounter
    last_token: Optional[Token]

    def __init__(self, text: str, line_ctr: Optional[LineCounter]=None, last_token: Optional[Token]=None):
        self.text = text
        self.line_ctr = line_ctr or LineCounter(b'\n' if isinstance(text, bytes) else '\n')
        self.last_token = last_token

    def __eq__(self, other):
        if not isinstance(other, LexerState):
            return NotImplemented

        return self.text is other.text and self.line_ctr == other.line_ctr and self.last_token == other.last_token

    def __copy__(self):
        return type(self)(self.text, copy(self.line_ctr), self.last_token)


class LexerThread:
    #--

    def __init__(self, lexer: 'Lexer', lexer_state: LexerState):
        self.lexer = lexer
        self.state = lexer_state

    @classmethod
    def from_text(cls, lexer: 'Lexer', text: str) -> 'LexerThread':
        return cls(lexer, LexerState(text))

    def lex(self, parser_state):
        return self.lexer.lex(self.state, parser_state)

    def __copy__(self):
        return type(self)(self.lexer, copy(self.state))

    _Token = Token


_Callback = Callable[[Token], Token]

class Lexer(ABC):
    #--
    @abstractmethod
    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        return NotImplemented

    def make_lexer_state(self, text):
        #--
        return LexerState(text)


def _check_regex_collisions(terminal_to_regexp: Dict[TerminalDef, str], comparator, strict_mode, max_collisions_to_show=8):
    if not comparator:
        comparator = interegular.Comparator.from_regexes(terminal_to_regexp)

    ##

    ##

    max_time = 2 if strict_mode else 0.2

    ##

    if comparator.count_marked_pairs() >= max_collisions_to_show:
        return
    for group in classify(terminal_to_regexp, lambda t: t.priority).values():
        for a, b in comparator.check(group, skip_marked=True):
            assert a.priority == b.priority
            ##

            comparator.mark(a, b)

            ##

            message = f"Collision between Terminals {a.name} and {b.name}. "
            try:
                example = comparator.get_example_overlap(a, b, max_time).format_multiline()
            except ValueError:
                ##

                example = "No example could be found fast enough. However, the collision does still exists"
            if strict_mode:
                raise LexError(f"{message}\n{example}")
            logger.warning("%s The lexer will choose between them arbitrarily.\n%s", message, example)
            if comparator.count_marked_pairs() >= max_collisions_to_show:
                logger.warning("Found 8 regex collisions, will not check for more.")
                return


class AbstractBasicLexer(Lexer):
    terminals_by_name: Dict[str, TerminalDef]

    @abstractmethod
    def __init__(self, conf: 'LexerConf', comparator=None) -> None:
        ...

    @abstractmethod
    def next_token(self, lex_state: LexerState, parser_state: Any = None) -> Token:
        ...

    def lex(self, state: LexerState, parser_state: Any) -> Iterator[Token]:
        with suppress(EOFError):
            while True:
                yield self.next_token(state, parser_state)


class BasicLexer(AbstractBasicLexer):
    terminals: Collection[TerminalDef]
    ignore_types: FrozenSet[str]
    newline_types: FrozenSet[str]
    user_callbacks: Dict[str, _Callback]
    callback: Dict[str, _Callback]
    re: ModuleType

    def __init__(self, conf: 'LexerConf', comparator=None) -> None:
        terminals = list(conf.terminals)
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        self.re = conf.re_module

        if not conf.skip_validation:
            ##

            terminal_to_regexp = {}
            for t in terminals:
                regexp = t.pattern.to_regexp()
                try:
                    self.re.compile(regexp, conf.g_regex_flags)
                except self.re.error:
                    raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

                if t.pattern.min_width == 0:
                    raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))
                if t.pattern.type == "re":
                    terminal_to_regexp[t] = regexp

            if not (set(conf.ignore) <= {t.name for t in terminals}):
                raise LexError("Ignore terminals are not defined: %s" % (set(conf.ignore) - {t.name for t in terminals}))

            if has_interegular:
                _check_regex_collisions(terminal_to_regexp, comparator, conf.strict)
            elif conf.strict:
                raise LexError("interegular must be installed for strict mode. Use `pip install 'lark[interegular]'`.")

        ##

        self.newline_types = frozenset(t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp()))
        self.ignore_types = frozenset(conf.ignore)

        terminals.sort(key=lambda x: (-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = conf.callbacks
        self.g_regex_flags = conf.g_regex_flags
        self.use_bytes = conf.use_bytes
        self.terminals_by_name = conf.terminals_by_name

        self._scanner = None

    def _build_scanner(self):
        terminals, self.callback = _create_unless(self.terminals, self.g_regex_flags, self.re, self.use_bytes)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                ##

                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self._scanner = Scanner(terminals, self.g_regex_flags, self.re, self.use_bytes)

    @property
    def scanner(self):
        if self._scanner is None:
            self._build_scanner()
        return self._scanner

    def match(self, text, pos):
        return self.scanner.match(text, pos)

    def next_token(self, lex_state: LexerState, parser_state: Any = None) -> Token:
        line_ctr = lex_state.line_ctr
        while line_ctr.char_pos < len(lex_state.text):
            res = self.match(lex_state.text, line_ctr.char_pos)
            if not res:
                allowed = self.scanner.allowed_types - self.ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(lex_state.text, line_ctr.char_pos, line_ctr.line, line_ctr.column,
                                           allowed=allowed, token_history=lex_state.last_token and [lex_state.last_token],
                                           state=parser_state, terminals_by_name=self.terminals_by_name)

            value, type_ = res

            ignored = type_ in self.ignore_types
            t = None
            if not ignored or type_ in self.callback:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
            line_ctr.feed(value, type_ in self.newline_types)
            if t is not None:
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in self.callback:
                    t = self.callback[t.type](t)
                if not ignored:
                    if not isinstance(t, Token):
                        raise LexError("Callbacks must return a token (returned %r)" % t)
                    lex_state.last_token = t
                    return t

        ##

        raise EOFError(self)


class ContextualLexer(Lexer):
    lexers: Dict[int, AbstractBasicLexer]
    root_lexer: AbstractBasicLexer

    BasicLexer: Type[AbstractBasicLexer] = BasicLexer

    def __init__(self, conf: 'LexerConf', states: Dict[int, Collection[str]], always_accept: Collection[str]=()) -> None:
        terminals = list(conf.terminals)
        terminals_by_name = conf.terminals_by_name

        trad_conf = copy(conf)
        trad_conf.terminals = terminals

        if has_interegular and not conf.skip_validation:
            comparator = interegular.Comparator.from_regexes({t: t.pattern.to_regexp() for t in terminals})
        else:
            comparator = None
        lexer_by_tokens: Dict[FrozenSet[str], AbstractBasicLexer] = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(conf.ignore) | set(always_accept)
                lexer_conf = copy(trad_conf)
                lexer_conf.terminals = [terminals_by_name[n] for n in accepts if n in terminals_by_name]
                lexer = self.BasicLexer(lexer_conf, comparator)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        assert trad_conf.terminals is terminals
        trad_conf.skip_validation = True  ##

        self.root_lexer = self.BasicLexer(trad_conf, comparator)

    def lex(self, lexer_state: LexerState, parser_state: 'ParserState') -> Iterator[Token]:
        try:
            while True:
                lexer = self.lexers[parser_state.position]
                yield lexer.next_token(lexer_state, parser_state)
        except EOFError:
            pass
        except UnexpectedCharacters as e:
            ##

            ##

            try:
                last_token = lexer_state.last_token  ##

                token = self.root_lexer.next_token(lexer_state, parser_state)
                raise UnexpectedToken(token, e.allowed, state=parser_state, token_history=[last_token], terminals_by_name=self.root_lexer.terminals_by_name)
            except UnexpectedCharacters:
                raise e  ##




_ParserArgType: 'TypeAlias' = 'Literal["earley", "lalr", "cyk", "auto"]'
_LexerArgType: 'TypeAlias' = 'Union[Literal["auto", "basic", "contextual", "dynamic", "dynamic_complete"], Type[Lexer]]'
_LexerCallback = Callable[[Token], Token]
ParserCallbacks = Dict[str, Callable]

class LexerConf(Serialize):
    __serialize_fields__ = 'terminals', 'ignore', 'g_regex_flags', 'use_bytes', 'lexer_type'
    __serialize_namespace__ = TerminalDef,

    terminals: Collection[TerminalDef]
    re_module: ModuleType
    ignore: Collection[str]
    postlex: 'Optional[PostLex]'
    callbacks: Dict[str, _LexerCallback]
    g_regex_flags: int
    skip_validation: bool
    use_bytes: bool
    lexer_type: Optional[_LexerArgType]
    strict: bool

    def __init__(self, terminals: Collection[TerminalDef], re_module: ModuleType, ignore: Collection[str]=(), postlex: 'Optional[PostLex]'=None,
                 callbacks: Optional[Dict[str, _LexerCallback]]=None, g_regex_flags: int=0, skip_validation: bool=False, use_bytes: bool=False, strict: bool=False):
        self.terminals = terminals
        self.terminals_by_name = {t.name: t for t in self.terminals}
        assert len(self.terminals) == len(self.terminals_by_name)
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags
        self.re_module = re_module
        self.skip_validation = skip_validation
        self.use_bytes = use_bytes
        self.strict = strict
        self.lexer_type = None

    def _deserialize(self):
        self.terminals_by_name = {t.name: t for t in self.terminals}

    def __deepcopy__(self, memo=None):
        return type(self)(
            deepcopy(self.terminals, memo),
            self.re_module,
            deepcopy(self.ignore, memo),
            deepcopy(self.postlex, memo),
            deepcopy(self.callbacks, memo),
            deepcopy(self.g_regex_flags, memo),
            deepcopy(self.skip_validation, memo),
            deepcopy(self.use_bytes, memo),
        )

class ParserConf(Serialize):
    __serialize_fields__ = 'rules', 'start', 'parser_type'

    rules: List['Rule']
    callbacks: ParserCallbacks
    start: List[str]
    parser_type: _ParserArgType

    def __init__(self, rules: List['Rule'], callbacks: ParserCallbacks, start: List[str]):
        assert isinstance(start, list)
        self.rules = rules
        self.callbacks = callbacks
        self.start = start


from functools import partial, wraps
from itertools import product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)



class PropagatePositions:
    def __init__(self, node_builder, node_filter=None):
        self.node_builder = node_builder
        self.node_filter = node_filter

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            ##

            ##

            ##

            ##


            res_meta = res.meta

            first_meta = self._pp_get_meta(children)
            if first_meta is not None:
                if not hasattr(res_meta, 'line'):
                    ##

                    res_meta.line = getattr(first_meta, 'container_line', first_meta.line)
                    res_meta.column = getattr(first_meta, 'container_column', first_meta.column)
                    res_meta.start_pos = getattr(first_meta, 'container_start_pos', first_meta.start_pos)
                    res_meta.empty = False

                res_meta.container_line = getattr(first_meta, 'container_line', first_meta.line)
                res_meta.container_column = getattr(first_meta, 'container_column', first_meta.column)
                res_meta.container_start_pos = getattr(first_meta, 'container_start_pos', first_meta.start_pos)

            last_meta = self._pp_get_meta(reversed(children))
            if last_meta is not None:
                if not hasattr(res_meta, 'end_line'):
                    res_meta.end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                    res_meta.end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)
                    res_meta.end_pos = getattr(last_meta, 'container_end_pos', last_meta.end_pos)
                    res_meta.empty = False

                res_meta.container_end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                res_meta.container_end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)
                res_meta.container_end_pos = getattr(last_meta, 'container_end_pos', last_meta.end_pos)

        return res

    def _pp_get_meta(self, children):
        for c in children:
            if self.node_filter is not None and not self.node_filter(c):
                continue
            if isinstance(c, Tree):
                if not c.meta.empty:
                    return c.meta
            elif isinstance(c, Token):
                return c
            elif hasattr(c, '__lark_meta__'):
                return c.__lark_meta__()

def make_propagate_positions(option):
    if callable(option):
        return partial(PropagatePositions, node_filter=option)
    elif option is True:
        return PropagatePositions
    elif option is False:
        return None

    raise ConfigurationError('Invalid option for propagate_positions: %r' % option)


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR(ChildFilter):
    #--

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR_NoPlaceholders(ChildFilter):
    #--
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)


def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')


def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices: List[bool]):
    ##

    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            ##

            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])


class AmbiguousExpander:
    #--
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(t):
            return hasattr(t, 'data') and t.data == '_ambig'

        ##

        ##

        ##

        ##

        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                child.expand_kids_by_data('_ambig')

        if not ambiguous:
            return self.node_builder(children)

        expand = [child.children if i in ambiguous else (child,) for i, child in enumerate(children)]
        return self.tree_class('_ambig', [self.node_builder(list(f)) for f in product(*expand)])


def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)


class AmbiguousIntermediateExpander:
    #--

    def __init__(self, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class

    def __call__(self, children):
        def _is_iambig_tree(child):
            return hasattr(child, 'data') and child.data == '_iambig'

        def _collapse_iambig(children):
            #--

            ##

            ##

            if children and _is_iambig_tree(children[0]):
                iambig_node = children[0]
                result = []
                for grandchild in iambig_node.children:
                    collapsed = _collapse_iambig(grandchild.children)
                    if collapsed:
                        for child in collapsed:
                            child.children += children[1:]
                        result += collapsed
                    else:
                        new_tree = self.tree_class('_inter', grandchild.children + children[1:])
                        result.append(new_tree)
                return result

        collapsed = _collapse_iambig(children)
        if collapsed:
            processed_nodes = [self.node_builder(c.children) for c in collapsed]
            return self.tree_class('_ambig', processed_nodes)

        return self.node_builder(children)



def inplace_transformer(func):
    @wraps(func)
    def f(children):
        ##

        tree = Tree(func.__name__, children)
        return func(tree)
    return f


def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")

    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        propagate_positions = make_propagate_positions(self.propagate_positions)

        for rule in rules:
            options = rule.options
            keep_all_tokens = options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                propagate_positions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
                self.ambiguous and partial(AmbiguousIntermediateExpander, self.tree_class)
            ]))

            yield rule, wrapper_chain

    def create_callback(self, transformer=None):
        callbacks = {}

        default_handler = getattr(transformer, '__default__', None)
        if default_handler:
            def default_callback(data, children):
                return default_handler(data, children, None)
        else:
            default_callback = self.tree_class

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.options.template_source or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                elif isinstance(transformer, Transformer_InPlace):
                    f = inplace_transformer(f)
            except AttributeError:
                f = partial(default_callback, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks



class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')

StateT = TypeVar("StateT")

class ParseTableBase(Generic[StateT]):
    states: Dict[StateT, Dict[str, Tuple]]
    start_states: Dict[str, StateT]
    end_states: Dict[str, StateT]

    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])

class ParseTable(ParseTableBase['State']):
    #--
    pass


class IntParseTable(ParseTableBase[int]):
    #--

    @classmethod
    def from_ParseTable(cls, parse_table: ParseTable):
        enum = list(parse_table.states)
        state_to_idx: Dict['State', int] = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



class ParseConf(Generic[StateT]):
    __slots__ = 'parse_table', 'callbacks', 'start', 'start_state', 'end_state', 'states'

    parse_table: ParseTableBase[StateT]
    callbacks: ParserCallbacks
    start: str

    start_state: StateT
    end_state: StateT
    states: Dict[StateT, Dict[str, tuple]]

    def __init__(self, parse_table: ParseTableBase[StateT], callbacks: ParserCallbacks, start: str):
        self.parse_table = parse_table

        self.start_state = self.parse_table.start_states[start]
        self.end_state = self.parse_table.end_states[start]
        self.states = self.parse_table.states

        self.callbacks = callbacks
        self.start = start

class ParserState(Generic[StateT]):
    __slots__ = 'parse_conf', 'lexer', 'state_stack', 'value_stack'

    parse_conf: ParseConf[StateT]
    lexer: LexerThread
    state_stack: List[StateT]
    value_stack: list

    def __init__(self, parse_conf: ParseConf[StateT], lexer: LexerThread, state_stack=None, value_stack=None):
        self.parse_conf = parse_conf
        self.lexer = lexer
        self.state_stack = state_stack or [self.parse_conf.start_state]
        self.value_stack = value_stack or []

    @property
    def position(self) -> StateT:
        return self.state_stack[-1]

    ##

    def __eq__(self, other) -> bool:
        if not isinstance(other, ParserState):
            return NotImplemented
        return len(self.state_stack) == len(other.state_stack) and self.position == other.position

    def __copy__(self):
        return type(self)(
            self.parse_conf,
            self.lexer, ##

            copy(self.state_stack),
            deepcopy(self.value_stack),
        )

    def copy(self) -> 'ParserState[StateT]':
        return copy(self)

    def feed_token(self, token: Token, is_end=False) -> Any:
        state_stack = self.state_stack
        value_stack = self.value_stack
        states = self.parse_conf.states
        end_state = self.parse_conf.end_state
        callbacks = self.parse_conf.callbacks

        while True:
            state = state_stack[-1]
            try:
                action, arg = states[state][token.type]
            except KeyError:
                expected = {s for s in states[state].keys() if s.isupper()}
                raise UnexpectedToken(token, expected, state=self, interactive_parser=None)

            assert arg != end_state

            if action is Shift:
                ##

                assert not is_end
                state_stack.append(arg)
                value_stack.append(token if token.type not in callbacks else callbacks[token.type](token))
                return
            else:
                ##

                rule = arg
                size = len(rule.expansion)
                if size:
                    s = value_stack[-size:]
                    del state_stack[-size:]
                    del value_stack[-size:]
                else:
                    s = []

                value = callbacks[rule](s) if callbacks else s

                _action, new_state = states[state_stack[-1]][rule.origin.name]
                assert _action is Shift
                state_stack.append(new_state)
                value_stack.append(value)

                if is_end and state_stack[-1] == end_state:
                    return value_stack[-1]


class LALR_Parser(Serialize):
    def __init__(self, parser_conf: ParserConf, debug: bool=False, strict: bool=False):
        analysis = LALR_Analyzer(parser_conf, debug=debug, strict=strict)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks, debug=False):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks, debug)
        return inst

    def serialize(self, memo: Any = None) -> Dict[str, Any]:
        return self._parse_table.serialize(memo)

    def parse_interactive(self, lexer: LexerThread, start: str):
        return self.parser.parse(lexer, start, start_interactive=True)

    def parse(self, lexer, start, on_error=None):
        try:
            return self.parser.parse(lexer, start)
        except UnexpectedInput as e:
            if on_error is None:
                raise

            while True:
                if isinstance(e, UnexpectedCharacters):
                    s = e.interactive_parser.lexer_thread.state
                    p = s.line_ctr.char_pos

                if not on_error(e):
                    raise e

                if isinstance(e, UnexpectedCharacters):
                    ##

                    if p == s.line_ctr.char_pos:
                        s.line_ctr.feed(s.text[p:p+1])

                try:
                    return e.interactive_parser.resume_parse()
                except UnexpectedToken as e2:
                    if (isinstance(e, UnexpectedToken)
                        and e.token.type == e2.token.type == '$END'
                        and e.interactive_parser == e2.interactive_parser):
                        ##

                        raise e2
                    e = e2
                except UnexpectedCharacters as e2:
                    e = e2


class _Parser:
    parse_table: ParseTableBase
    callbacks: ParserCallbacks
    debug: bool

    def __init__(self, parse_table: ParseTableBase, callbacks: ParserCallbacks, debug: bool=False):
        self.parse_table = parse_table
        self.callbacks = callbacks
        self.debug = debug

    def parse(self, lexer: LexerThread, start: str, value_stack=None, state_stack=None, start_interactive=False):
        parse_conf = ParseConf(self.parse_table, self.callbacks, start)
        parser_state = ParserState(parse_conf, lexer, state_stack, value_stack)
        if start_interactive:
            return InteractiveParser(self, parser_state, parser_state.lexer)
        return self.parse_from_state(parser_state)


    def parse_from_state(self, state: ParserState, last_token: Optional[Token]=None):
        #--
        try:
            token = last_token
            for token in state.lexer.lex(state):
                assert token is not None
                state.feed_token(token)

            end_token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
            return state.feed_token(end_token, True)
        except UnexpectedInput as e:
            try:
                e.interactive_parser = InteractiveParser(self, state, state.lexer)
            except NameError:
                pass
            raise e
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state.state_stack):
                    print('%d)' % i , s)
                print("")

            raise


class InteractiveParser:
    #--
    def __init__(self, parser, parser_state, lexer_thread: LexerThread):
        self.parser = parser
        self.parser_state = parser_state
        self.lexer_thread = lexer_thread
        self.result = None

    @property
    def lexer_state(self) -> LexerThread:
        warnings.warn("lexer_state will be removed in subsequent releases. Use lexer_thread instead.", DeprecationWarning)
        return self.lexer_thread

    def feed_token(self, token: Token):
        #--
        return self.parser_state.feed_token(token, token.type == '$END')

    def iter_parse(self) -> Iterator[Token]:
        #--
        for token in self.lexer_thread.lex(self.parser_state):
            yield token
            self.result = self.feed_token(token)

    def exhaust_lexer(self) -> List[Token]:
        #--
        return list(self.iter_parse())


    def feed_eof(self, last_token=None):
        #--
        eof = Token.new_borrow_pos('$END', '', last_token) if last_token is not None else self.lexer_thread._Token('$END', '', 0, 1, 1)
        return self.feed_token(eof)


    def __copy__(self):
        #--
        return type(self)(
            self.parser,
            copy(self.parser_state),
            copy(self.lexer_thread),
        )

    def copy(self):
        return copy(self)

    def __eq__(self, other):
        if not isinstance(other, InteractiveParser):
            return False

        return self.parser_state == other.parser_state and self.lexer_thread == other.lexer_thread

    def as_immutable(self):
        #--
        p = copy(self)
        return ImmutableInteractiveParser(p.parser, p.parser_state, p.lexer_thread)

    def pretty(self):
        #--
        out = ["Parser choices:"]
        for k, v in self.choices().items():
            out.append('\t- %s -> %r' % (k, v))
        out.append('stack size: %s' % len(self.parser_state.state_stack))
        return '\n'.join(out)

    def choices(self):
        #--
        return self.parser_state.parse_conf.parse_table.states[self.parser_state.position]

    def accepts(self):
        #--
        accepts = set()
        conf_no_callbacks = copy(self.parser_state.parse_conf)
        ##

        ##

        conf_no_callbacks.callbacks = {}
        for t in self.choices():
            if t.isupper(): ##

                new_cursor = copy(self)
                new_cursor.parser_state.parse_conf = conf_no_callbacks
                try:
                    new_cursor.feed_token(self.lexer_thread._Token(t, ''))
                except UnexpectedToken:
                    pass
                else:
                    accepts.add(t)
        return accepts

    def resume_parse(self):
        #--
        return self.parser.parse_from_state(self.parser_state, last_token=self.lexer_thread.state.last_token)



class ImmutableInteractiveParser(InteractiveParser):
    #--

    result = None

    def __hash__(self):
        return hash((self.parser_state, self.lexer_thread))

    def feed_token(self, token):
        c = copy(self)
        c.result = InteractiveParser.feed_token(c, token)
        return c

    def exhaust_lexer(self):
        #--
        cursor = self.as_mutable()
        cursor.exhaust_lexer()
        return cursor.as_immutable()

    def as_mutable(self):
        #--
        p = copy(self)
        return InteractiveParser(p.parser, p.parser_state, p.lexer_thread)



def _wrap_lexer(lexer_class):
    future_interface = getattr(lexer_class, '__future_interface__', False)
    if future_interface:
        return lexer_class
    else:
        class CustomLexerWrapper(Lexer):
            def __init__(self, lexer_conf):
                self.lexer = lexer_class(lexer_conf)
            def lex(self, lexer_state, parser_state):
                return self.lexer.lex(lexer_state.text)
        return CustomLexerWrapper


def _deserialize_parsing_frontend(data, memo, lexer_conf, callbacks, options):
    parser_conf = ParserConf.deserialize(data['parser_conf'], memo)
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    parser = cls.deserialize(data['parser'], memo, callbacks, options.debug)
    parser_conf.callbacks = callbacks
    return ParsingFrontend(lexer_conf, parser_conf, options, parser=parser)


_parser_creators: 'Dict[str, Callable[[LexerConf, Any, Any], Any]]' = {}


class ParsingFrontend(Serialize):
    __serialize_fields__ = 'lexer_conf', 'parser_conf', 'parser'

    lexer_conf: LexerConf
    parser_conf: ParserConf
    options: Any

    def __init__(self, lexer_conf: LexerConf, parser_conf: ParserConf, options, parser=None):
        self.parser_conf = parser_conf
        self.lexer_conf = lexer_conf
        self.options = options

        ##

        if parser:  ##

            self.parser = parser
        else:
            create_parser = _parser_creators.get(parser_conf.parser_type)
            assert create_parser is not None, "{} is not supported in standalone mode".format(
                    parser_conf.parser_type
                )
            self.parser = create_parser(lexer_conf, parser_conf, options)

        ##

        lexer_type = lexer_conf.lexer_type
        self.skip_lexer = False
        if lexer_type in ('dynamic', 'dynamic_complete'):
            assert lexer_conf.postlex is None
            self.skip_lexer = True
            return

        if isinstance(lexer_type, type):
            assert issubclass(lexer_type, Lexer)
            self.lexer = _wrap_lexer(lexer_type)(lexer_conf)
        elif isinstance(lexer_type, str):
            create_lexer = {
                'basic': create_basic_lexer,
                'contextual': create_contextual_lexer,
            }[lexer_type]
            self.lexer = create_lexer(lexer_conf, self.parser, lexer_conf.postlex, options)
        else:
            raise TypeError("Bad value for lexer_type: {lexer_type}")

        if lexer_conf.postlex:
            self.lexer = PostLexConnector(self.lexer, lexer_conf.postlex)

    def _verify_start(self, start=None):
        if start is None:
            start_decls = self.parser_conf.start
            if len(start_decls) > 1:
                raise ConfigurationError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start_decls)
            start ,= start_decls
        elif start not in self.parser_conf.start:
            raise ConfigurationError("Unknown start rule %s. Must be one of %r" % (start, self.parser_conf.start))
        return start

    def _make_lexer_thread(self, text: str) -> Union[str, LexerThread]:
        cls = (self.options and self.options._plugins.get('LexerThread')) or LexerThread
        return text if self.skip_lexer else cls.from_text(self.lexer, text)

    def parse(self, text: str, start=None, on_error=None):
        chosen_start = self._verify_start(start)
        kw = {} if on_error is None else {'on_error': on_error}
        stream = self._make_lexer_thread(text)
        return self.parser.parse(stream, chosen_start, **kw)

    def parse_interactive(self, text: Optional[str]=None, start=None):
        ##

        ##

        chosen_start = self._verify_start(start)
        if self.parser_conf.parser_type != 'lalr':
            raise ConfigurationError("parse_interactive() currently only works with parser='lalr' ")
        stream = self._make_lexer_thread(text)  ##

        return self.parser.parse_interactive(stream, chosen_start)


def _validate_frontend_args(parser, lexer) -> None:
    assert_config(parser, ('lalr', 'earley', 'cyk'))
    if not isinstance(lexer, type):     ##

        expected = {
            'lalr': ('basic', 'contextual'),
            'earley': ('basic', 'dynamic', 'dynamic_complete'),
            'cyk': ('basic', ),
         }[parser]
        assert_config(lexer, expected, 'Parser %r does not support lexer %%r, expected one of %%s' % parser)


def _get_lexer_callbacks(transformer, terminals):
    result = {}
    for terminal in terminals:
        callback = getattr(transformer, terminal.name, None)
        if callback is not None:
            result[terminal.name] = callback
    return result

class PostLexConnector:
    def __init__(self, lexer, postlexer):
        self.lexer = lexer
        self.postlexer = postlexer

    def lex(self, lexer_state, parser_state):
        i = self.lexer.lex(lexer_state, parser_state)
        return self.postlexer.process(i)



def create_basic_lexer(lexer_conf, parser, postlex, options) -> BasicLexer:
    cls = (options and options._plugins.get('BasicLexer')) or BasicLexer
    return cls(lexer_conf)

def create_contextual_lexer(lexer_conf: LexerConf, parser, postlex, options) -> ContextualLexer:
    cls = (options and options._plugins.get('ContextualLexer')) or ContextualLexer
    parse_table: ParseTableBase[int] = parser._parse_table
    states: Dict[int, Collection[str]] = {idx:list(t.keys()) for idx, t in parse_table.states.items()}
    always_accept: Collection[str] = postlex.always_accept if postlex else ()
    return cls(lexer_conf, states, always_accept=always_accept)

def create_lalr_parser(lexer_conf: LexerConf, parser_conf: ParserConf, options=None) -> LALR_Parser:
    debug = options.debug if options else False
    strict = options.strict if options else False
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    return cls(parser_conf, debug=debug, strict=strict)

_parser_creators['lalr'] = create_lalr_parser




class PostLex(ABC):
    @abstractmethod
    def process(self, stream: Iterator[Token]) -> Iterator[Token]:
        return stream

    always_accept: Iterable[str] = ()

class LarkOptions(Serialize):
    #--

    start: List[str]
    debug: bool
    strict: bool
    transformer: 'Optional[Transformer]'
    propagate_positions: Union[bool, str]
    maybe_placeholders: bool
    cache: Union[bool, str]
    regex: bool
    g_regex_flags: int
    keep_all_tokens: bool
    tree_class: Optional[Callable[[str, List], Any]]
    parser: _ParserArgType
    lexer: _LexerArgType
    ambiguity: 'Literal["auto", "resolve", "explicit", "forest"]'
    postlex: Optional[PostLex]
    priority: 'Optional[Literal["auto", "normal", "invert"]]'
    lexer_callbacks: Dict[str, Callable[[Token], Token]]
    use_bytes: bool
    ordered_sets: bool
    edit_terminals: Optional[Callable[[TerminalDef], TerminalDef]]
    import_paths: 'List[Union[str, Callable[[Union[None, str, PackageResource], str], Tuple[str, str]]]]'
    source_path: Optional[str]

    OPTIONS_DOC = r"""
    **===  General Options  ===**

    start
            The start symbol. Either a string, or a list of strings for multiple possible starts (Default: "start")
    debug
            Display debug information and extra warnings. Use only when debugging (Default: ``False``)
            When used with Earley, it generates a forest graph as "sppf.png", if 'dot' is installed.
    strict
            Throw an exception on any potential ambiguity, including shift/reduce conflicts, and regex collisions.
    transformer
            Applies the transformer to every parse tree (equivalent to applying it after the parse, but faster)
    propagate_positions
            Propagates positional attributes into the 'meta' attribute of all tree branches.
            Sets attributes: (line, column, end_line, end_column, start_pos, end_pos,
                              container_line, container_column, container_end_line, container_end_column)
            Accepts ``False``, ``True``, or a callable, which will filter which nodes to ignore when propagating.
    maybe_placeholders
            When ``True``, the ``[]`` operator returns ``None`` when not matched.
            When ``False``,  ``[]`` behaves like the ``?`` operator, and returns no value at all.
            (default= ``True``)
    cache
            Cache the results of the Lark grammar analysis, for x2 to x3 faster loading. LALR only for now.

            - When ``False``, does nothing (default)
            - When ``True``, caches to a temporary file in the local directory
            - When given a string, caches to the path pointed by the string
    regex
            When True, uses the ``regex`` module instead of the stdlib ``re``.
    g_regex_flags
            Flags that are applied to all terminals (both regex and strings)
    keep_all_tokens
            Prevent the tree builder from automagically removing "punctuation" tokens (Default: ``False``)
    tree_class
            Lark will produce trees comprised of instances of this class instead of the default ``lark.Tree``.

    **=== Algorithm Options ===**

    parser
            Decides which parser engine to use. Accepts "earley" or "lalr". (Default: "earley").
            (there is also a "cyk" option for legacy)
    lexer
            Decides whether or not to use a lexer stage

            - "auto" (default): Choose for me based on the parser
            - "basic": Use a basic lexer
            - "contextual": Stronger lexer (only works with parser="lalr")
            - "dynamic": Flexible and powerful (only with parser="earley")
            - "dynamic_complete": Same as dynamic, but tries *every* variation of tokenizing possible.
    ambiguity
            Decides how to handle ambiguity in the parse. Only relevant if parser="earley"

            - "resolve": The parser will automatically choose the simplest derivation
              (it chooses consistently: greedy for tokens, non-greedy for rules)
            - "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).
            - "forest": The parser will return the root of the shared packed parse forest.

    **=== Misc. / Domain Specific Options ===**

    postlex
            Lexer post-processing (Default: ``None``) Only works with the basic and contextual lexers.
    priority
            How priorities should be evaluated - "auto", ``None``, "normal", "invert" (Default: "auto")
    lexer_callbacks
            Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
    use_bytes
            Accept an input of type ``bytes`` instead of ``str``.
    ordered_sets
            Should Earley use ordered-sets to achieve stable output (~10% slower than regular sets. Default: True)
    edit_terminals
            A callback for editing the terminals before parse.
    import_paths
            A List of either paths or loader functions to specify from where grammars are imported
    source_path
            Override the source of from where the grammar was loaded. Useful for relative imports and unconventional grammar loading
    **=== End of Options ===**
    """
    if __doc__:
        __doc__ += OPTIONS_DOC


    ##

    ##

    ##

    ##

    ##

    ##

    _defaults: Dict[str, Any] = {
        'debug': False,
        'strict': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'regex': False,
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': True,
        'edit_terminals': None,
        'g_regex_flags': 0,
        'use_bytes': False,
        'ordered_sets': True,
        'import_paths': [],
        'source_path': None,
        '_plugins': {},
    }

    def __init__(self, options_dict: Dict[str, Any]) -> None:
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name not in ('cache', 'use_bytes', 'propagate_positions'):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], str):
            options['start'] = [options['start']]

        self.__dict__['options'] = options


        assert_config(self.parser, ('earley', 'lalr', 'cyk', None))

        if self.parser == 'earley' and self.transformer:
            raise ConfigurationError('Cannot specify an embedded transformer when using the Earley algorithm. '
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ConfigurationError("Unknown options: %s" % o.keys())

    def __getattr__(self, name: str) -> Any:
        try:
            return self.__dict__['options'][name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name: str, value: str) -> None:
        assert_config(name, self.options.keys(), "%r isn't a valid option. Expected one of: %s")
        self.options[name] = value

    def serialize(self, memo = None) -> Dict[str, Any]:
        return self.options

    @classmethod
    def deserialize(cls, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]]) -> "LarkOptions":
        return cls(data)


##

##

_LOAD_ALLOWED_OPTIONS = {'postlex', 'transformer', 'lexer_callbacks', 'use_bytes', 'debug', 'g_regex_flags', 'regex', 'propagate_positions', 'tree_class', '_plugins'}

_VALID_PRIORITY_OPTIONS = ('auto', 'normal', 'invert', None)
_VALID_AMBIGUITY_OPTIONS = ('auto', 'resolve', 'explicit', 'forest')


_T = TypeVar('_T', bound="Lark")

class Lark(Serialize):
    #--

    source_path: str
    source_grammar: str
    grammar: 'Grammar'
    options: LarkOptions
    lexer: Lexer
    parser: 'ParsingFrontend'
    terminals: Collection[TerminalDef]

    def __init__(self, grammar: 'Union[Grammar, str, IO[str]]', **options) -> None:
        self.options = LarkOptions(options)
        re_module: types.ModuleType

        ##

        use_regex = self.options.regex
        if use_regex:
            if _has_regex:
                re_module = regex
            else:
                raise ImportError('`regex` module must be installed if calling `Lark(regex=True)`.')
        else:
            re_module = re

        ##

        if self.options.source_path is None:
            try:
                self.source_path = grammar.name  ##

            except AttributeError:
                self.source_path = '<string>'
        else:
            self.source_path = self.options.source_path

        ##

        try:
            read = grammar.read  ##

        except AttributeError:
            pass
        else:
            grammar = read()

        cache_fn = None
        cache_sha256 = None
        if isinstance(grammar, str):
            self.source_grammar = grammar
            if self.options.use_bytes:
                if not isascii(grammar):
                    raise ConfigurationError("Grammar must be ascii only, when use_bytes=True")

            if self.options.cache:
                if self.options.parser != 'lalr':
                    raise ConfigurationError("cache only works with parser='lalr' for now")

                unhashable = ('transformer', 'postlex', 'lexer_callbacks', 'edit_terminals', '_plugins')
                options_str = ''.join(k+str(v) for k, v in options.items() if k not in unhashable)
                from . import __version__
                s = grammar + options_str + __version__ + str(sys.version_info[:2])
                cache_sha256 = sha256_digest(s)

                if isinstance(self.options.cache, str):
                    cache_fn = self.options.cache
                else:
                    if self.options.cache is not True:
                        raise ConfigurationError("cache argument must be bool or str")

                    try:
                        username = getpass.getuser()
                    except Exception:
                        ##

                        ##

                        ##

                        username = "unknown"

                    cache_fn = tempfile.gettempdir() + "/.lark_cache_%s_%s_%s_%s.tmp" % (username, cache_sha256, *sys.version_info[:2])

                old_options = self.options
                try:
                    with FS.open(cache_fn, 'rb') as f:
                        logger.debug('Loading grammar from cache: %s', cache_fn)
                        ##

                        for name in (set(options) - _LOAD_ALLOWED_OPTIONS):
                            del options[name]
                        file_sha256 = f.readline().rstrip(b'\n')
                        cached_used_files = pickle.load(f)
                        if file_sha256 == cache_sha256.encode('utf8') and verify_used_files(cached_used_files):
                            cached_parser_data = pickle.load(f)
                            self._load(cached_parser_data, **options)
                            return
                except FileNotFoundError:
                    ##

                    pass
                except Exception: ##

                    logger.exception("Failed to load Lark from cache: %r. We will try to carry on.", cache_fn)

                    ##

                    ##

                    self.options = old_options


            ##

            self.grammar, used_files = load_grammar(grammar, self.source_path, self.options.import_paths, self.options.keep_all_tokens)
        else:
            assert isinstance(grammar, Grammar)
            self.grammar = grammar


        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                if self.options.postlex is not None:
                    logger.info("postlex can't be used with the dynamic lexer, so we use 'basic' instead. "
                                "Consider using lalr with contextual instead of earley")
                    self.options.lexer = 'basic'
                else:
                    self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'basic'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        if isinstance(lexer, type):
            assert issubclass(lexer, Lexer)     ##

        else:
            assert_config(lexer, ('basic', 'contextual', 'dynamic', 'dynamic_complete'))
            if self.options.postlex is not None and 'dynamic' in lexer:
                raise ConfigurationError("Can't use postlex with a dynamic lexer. Use basic or contextual instead")

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            assert_config(self.options.parser, ('earley', 'cyk'), "%r doesn't support disambiguation. Use one of these parsers instead: %s")

        if self.options.priority == 'auto':
            self.options.priority = 'normal'

        if self.options.priority not in _VALID_PRIORITY_OPTIONS:
            raise ConfigurationError("invalid priority option: %r. Must be one of %r" % (self.options.priority, _VALID_PRIORITY_OPTIONS))
        if self.options.ambiguity not in _VALID_AMBIGUITY_OPTIONS:
            raise ConfigurationError("invalid ambiguity option: %r. Must be one of %r" % (self.options.ambiguity, _VALID_AMBIGUITY_OPTIONS))

        if self.options.parser is None:
            terminals_to_keep = '*'
        elif self.options.postlex is not None:
            terminals_to_keep = set(self.options.postlex.always_accept)
        else:
            terminals_to_keep = set()

        ##

        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start, terminals_to_keep)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name: t for t in self.terminals}

        ##

        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
            for term in self.terminals:
                term.priority = -term.priority
        ##

        ##

        ##

        elif self.options.priority is None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None
            for term in self.terminals:
                term.priority = 0

        ##

        self.lexer_conf = LexerConf(
                self.terminals, re_module, self.ignore_tokens, self.options.postlex,
                self.options.lexer_callbacks, self.options.g_regex_flags, use_bytes=self.options.use_bytes, strict=self.options.strict
            )

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logger.debug('Saving grammar to cache: %s', cache_fn)
            try:
                with FS.open(cache_fn, 'wb') as f:
                    assert cache_sha256 is not None
                    f.write(cache_sha256.encode('utf8') + b'\n')
                    pickle.dump(used_files, f)
                    self.save(f, _LOAD_ALLOWED_OPTIONS)
            except IOError as e:
                logger.exception("Failed to save Lark to cache: %r.", cache_fn, e)

    if __doc__:
        __doc__ += "\n\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self, dont_ignore: bool=False) -> BasicLexer:
        lexer_conf = self.lexer_conf
        if dont_ignore:
            from copy import copy
            lexer_conf = copy(lexer_conf)
            lexer_conf.ignore = ()
        return BasicLexer(lexer_conf)

    def _prepare_callbacks(self) -> None:
        self._callbacks = {}
        ##

        if self.options.ambiguity != 'forest':
            self._parse_tree_builder = ParseTreeBuilder(
                    self.rules,
                    self.options.tree_class or Tree,
                    self.options.propagate_positions,
                    self.options.parser != 'lalr' and self.options.ambiguity == 'explicit',
                    self.options.maybe_placeholders
                )
            self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)
        self._callbacks.update(_get_lexer_callbacks(self.options.transformer, self.terminals))

    def _build_parser(self) -> "ParsingFrontend":
        self._prepare_callbacks()
        _validate_frontend_args(self.options.parser, self.options.lexer)
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return _construct_parsing_frontend(
            self.options.parser,
            self.options.lexer,
            self.lexer_conf,
            parser_conf,
            options=self.options
        )

    def save(self, f, exclude_options: Collection[str] = ()) -> None:
        #--
        if self.options.parser != 'lalr':
            raise NotImplementedError("Lark.save() is only implemented for the LALR(1) parser.")
        data, m = self.memo_serialize([TerminalDef, Rule])
        if exclude_options:
            data["options"] = {n: v for n, v in data["options"].items() if n not in exclude_options}
        pickle.dump({'data': data, 'memo': m}, f, protocol=pickle.HIGHEST_PROTOCOL)

    @classmethod
    def load(cls: Type[_T], f) -> _T:
        #--
        inst = cls.__new__(cls)
        return inst._load(f)

    def _deserialize_lexer_conf(self, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]], options: LarkOptions) -> LexerConf:
        lexer_conf = LexerConf.deserialize(data['lexer_conf'], memo)
        lexer_conf.callbacks = options.lexer_callbacks or {}
        lexer_conf.re_module = regex if options.regex else re
        lexer_conf.use_bytes = options.use_bytes
        lexer_conf.g_regex_flags = options.g_regex_flags
        lexer_conf.skip_validation = True
        lexer_conf.postlex = options.postlex
        return lexer_conf

    def _load(self: _T, f: Any, **kwargs) -> _T:
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo_json = d['memo']
        data = d['data']

        assert memo_json
        memo = SerializeMemoizer.deserialize(memo_json, {'Rule': Rule, 'TerminalDef': TerminalDef}, {})
        options = dict(data['options'])
        if (set(kwargs) - _LOAD_ALLOWED_OPTIONS) & set(LarkOptions._defaults):
            raise ConfigurationError("Some options are not allowed when loading a Parser: {}"
                             .format(set(kwargs) - _LOAD_ALLOWED_OPTIONS))
        options.update(kwargs)
        self.options = LarkOptions.deserialize(options, memo)
        self.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        self.source_path = '<deserialized>'
        _validate_frontend_args(self.options.parser, self.options.lexer)
        self.lexer_conf = self._deserialize_lexer_conf(data['parser'], memo, self.options)
        self.terminals = self.lexer_conf.terminals
        self._prepare_callbacks()
        self._terminals_dict = {t.name: t for t in self.terminals}
        self.parser = _deserialize_parsing_frontend(
            data['parser'],
            memo,
            self.lexer_conf,
            self._callbacks,
            self.options,  ##

        )
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, **kwargs):
        inst = cls.__new__(cls)
        return inst._load({'data': data, 'memo': memo}, **kwargs)

    @classmethod
    def open(cls: Type[_T], grammar_filename: str, rel_to: Optional[str]=None, **options) -> _T:
        #--
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    @classmethod
    def open_from_package(cls: Type[_T], package: str, grammar_path: str, search_paths: 'Sequence[str]'=[""], **options) -> _T:
        #--
        package_loader = FromPackageLoader(package, search_paths)
        full_path, text = package_loader(None, grammar_path)
        options.setdefault('source_path', full_path)
        options.setdefault('import_paths', [])
        options['import_paths'].append(package_loader)
        return cls(text, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source_path, self.options.parser, self.options.lexer)


    def lex(self, text: str, dont_ignore: bool=False) -> Iterator[Token]:
        #--
        lexer: Lexer
        if not hasattr(self, 'lexer') or dont_ignore:
            lexer = self._build_lexer(dont_ignore)
        else:
            lexer = self.lexer
        lexer_thread = LexerThread.from_text(lexer, text)
        stream = lexer_thread.lex(None)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name: str) -> TerminalDef:
        #--
        return self._terminals_dict[name]

    def parse_interactive(self, text: Optional[str]=None, start: Optional[str]=None) -> 'InteractiveParser':
        #--
        return self.parser.parse_interactive(text, start=start)

    def parse(self, text: str, start: Optional[str]=None, on_error: 'Optional[Callable[[UnexpectedInput], bool]]'=None) -> 'ParseTree':
        #--
        return self.parser.parse(text, start=start, on_error=on_error)




class DedentError(LarkError):
    pass

class Indenter(PostLex, ABC):
    paren_level: int
    indent_level: List[int]

    def __init__(self) -> None:
        self.paren_level = 0
        self.indent_level = [0]
        assert self.tab_len > 0

    def handle_NL(self, token: Token) -> Iterator[Token]:
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] ##

        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            if indent != self.indent_level[-1]:
                raise DedentError('Unexpected dedent to column %s. Expected dedent to %s' % (indent, self.indent_level[-1]))

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                yield from self.handle_NL(token)
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    ##

    @property
    def always_accept(self):
        return (self.NL_type,)

    @property
    @abstractmethod
    def NL_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def OPEN_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def CLOSE_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def INDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def DEDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def tab_len(self) -> int:
        raise NotImplementedError()


class PythonIndenter(Indenter):
    NL_type = '_NEWLINE'
    OPEN_PAREN_types = ['LPAR', 'LSQB', 'LBRACE']
    CLOSE_PAREN_types = ['RPAR', 'RSQB', 'RBRACE']
    INDENT_type = '_INDENT'
    DEDENT_type = '_DEDENT'
    tab_len = 8


import pickle, zlib, base64
DATA = (
{'parser': {'lexer_conf': {'terminals': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}, {'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}, {'@': 82}, {'@': 83}, {'@': 84}, {'@': 85}, {'@': 86}], 'ignore': ['__IGNORE_0', '__IGNORE_1', 'COMMENT'], 'g_regex_flags': 0, 'use_bytes': False, 'lexer_type': 'contextual', '__type__': 'LexerConf'}, 'parser_conf': {'rules': [{'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}, {'@': 220}, {'@': 221}, {'@': 222}, {'@': 223}, {'@': 224}, {'@': 225}, {'@': 226}, {'@': 227}, {'@': 228}, {'@': 229}, {'@': 230}, {'@': 231}, {'@': 232}, {'@': 233}, {'@': 234}, {'@': 235}, {'@': 236}, {'@': 237}, {'@': 238}, {'@': 239}, {'@': 240}, {'@': 241}, {'@': 242}, {'@': 243}, {'@': 244}, {'@': 245}, {'@': 246}, {'@': 247}, {'@': 248}, {'@': 249}, {'@': 250}, {'@': 251}, {'@': 252}, {'@': 253}, {'@': 254}, {'@': 255}, {'@': 256}, {'@': 257}, {'@': 258}, {'@': 259}, {'@': 260}, {'@': 261}, {'@': 262}, {'@': 263}, {'@': 264}, {'@': 265}, {'@': 266}, {'@': 267}, {'@': 268}, {'@': 269}, {'@': 270}, {'@': 271}, {'@': 272}, {'@': 273}, {'@': 274}, {'@': 275}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 337}, {'@': 338}, {'@': 339}, {'@': 340}, {'@': 341}, {'@': 342}, {'@': 343}, {'@': 344}, {'@': 345}, {'@': 346}, {'@': 347}, {'@': 348}, {'@': 349}, {'@': 350}, {'@': 351}, {'@': 352}, {'@': 353}, {'@': 354}, {'@': 355}, {'@': 356}, {'@': 357}, {'@': 358}, {'@': 359}, {'@': 360}, {'@': 361}, {'@': 362}, {'@': 363}, {'@': 364}, {'@': 365}, {'@': 366}, {'@': 367}, {'@': 368}, {'@': 369}, {'@': 370}, {'@': 371}, {'@': 372}, {'@': 373}, {'@': 374}, {'@': 375}, {'@': 376}, {'@': 377}, {'@': 378}, {'@': 379}, {'@': 380}, {'@': 381}, {'@': 382}, {'@': 383}, {'@': 384}, {'@': 385}, {'@': 386}, {'@': 387}, {'@': 388}, {'@': 389}, {'@': 390}, {'@': 391}, {'@': 392}, {'@': 393}, {'@': 394}, {'@': 395}, {'@': 396}, {'@': 397}, {'@': 398}, {'@': 399}, {'@': 400}, {'@': 401}, {'@': 402}, {'@': 403}, {'@': 404}, {'@': 405}, {'@': 406}, {'@': 407}, {'@': 408}, {'@': 409}, {'@': 410}, {'@': 411}, {'@': 412}, {'@': 413}, {'@': 414}, {'@': 415}, {'@': 416}, {'@': 417}, {'@': 418}, {'@': 419}, {'@': 420}, {'@': 421}, {'@': 422}, {'@': 423}, {'@': 424}, {'@': 425}, {'@': 426}, {'@': 427}, {'@': 428}, {'@': 429}, {'@': 430}, {'@': 431}, {'@': 432}, {'@': 433}, {'@': 434}, {'@': 435}, {'@': 436}, {'@': 437}, {'@': 438}, {'@': 439}, {'@': 440}, {'@': 441}, {'@': 442}, {'@': 443}, {'@': 444}, {'@': 445}, {'@': 446}, {'@': 447}, {'@': 448}, {'@': 449}, {'@': 450}, {'@': 451}, {'@': 452}, {'@': 453}, {'@': 454}, {'@': 455}, {'@': 456}, {'@': 457}, {'@': 458}, {'@': 459}, {'@': 460}, {'@': 461}, {'@': 462}, {'@': 463}, {'@': 464}, {'@': 465}, {'@': 466}, {'@': 467}, {'@': 468}, {'@': 469}, {'@': 470}, {'@': 471}, {'@': 472}, {'@': 473}, {'@': 474}, {'@': 475}, {'@': 476}, {'@': 477}, {'@': 478}, {'@': 479}, {'@': 480}, {'@': 481}, {'@': 482}, {'@': 483}, {'@': 484}, {'@': 485}, {'@': 486}], 'start': ['start'], 'parser_type': 'lalr', '__type__': 'ParserConf'}, 'parser': {'tokens': {0: 'name', 1: 'dotted_name', 2: 'NAME', 3: 'dotted_as_name', 4: 'xor_expr', 5: 'and_test', 6: 'arith_expr', 7: 'testlist_star_expr', 8: 'FROM', 9: 'RETURN', 10: 'assert_stmt', 11: 'suite', 12: 'LSQB', 13: '__ANON_22', 14: 'or_test', 15: 'simple_stmt', 16: 'atom_expr', 17: 'string_concat', 18: 'nonlocal_stmt', 19: 'BREAK', 20: 'NONLOCAL', 21: 'LAMBDA', 22: 'expr', 23: 'term', 24: 'small_stmt', 25: 'GLOBAL', 26: 'global_stmt', 27: 'star_expr', 28: 'or_expr', 29: 'and_expr', 30: 'LBRACE', 31: 'test_or_star_expr', 32: 'DEC_NUMBER', 33: 'power', 34: 'FLOAT_NUMBER', 35: 'BIN_NUMBER', 36: '__string_concat_plus_24', 37: 'DEF', 38: 'shift_expr', 39: '_NEWLINE', 40: 'LPAR', 41: 'ASSERT', 42: '_unary_op', 43: 'test', 44: 'comparison', 45: 'continue_stmt', 46: 'import_from', 47: 'IMPORT', 48: 'MINUS', 49: 'OCT_NUMBER', 50: 'CONTINUE', 51: 'TILDE', 52: 'STAR', 53: 'pass_stmt', 54: 'LONG_STRING', 55: 'name_with_package', 56: 'factor', 57: 'not_test_', 58: 'lambdef', 59: 'NULL', 60: 'augassign', 61: 'number', 62: 'expr_stmt', 63: 'typed_var', 64: 'NOT', 65: 'return_stmt', 66: 'break_stmt', 67: 'import_name', 68: 'IMAG_NUMBER', 69: 'flow_stmt', 70: 'TRUE', 71: 'import_stmt', 72: 'PLUS', 73: 'var_decl_type', 74: 'assign_stmt', 75: 'assign', 76: 'atom', 77: 'STRING', 78: 'string', 79: 'funcdecl', 80: 'FALSE', 81: 'PASS', 82: 'HEX_NUMBER', 83: 'COMMA', 84: 'RBRACE', 85: 'with_item', 86: 'COLON', 87: 'import_as_name', 88: 'RPAR', 89: 'SEMICOLON', 90: 'import_as_names', 91: '_DEDENT', 92: 'STRUCT', 93: 'WHILE', 94: 'IF', 95: 'FOR', 96: 'UNION', 97: 'WITH', 98: '$END', 99: '__ANON_0', 100: 'lambda_kwparams', 101: 'lambda_paramvalue', 102: 'RSQB', 103: 'ELSE', 104: 'ELIF', 105: '__ANON_21', 106: 'AMPERSAND', 107: 'EQUAL', 108: 'AS', 109: 'VBAR', 110: 'SLASH', 111: '__ANON_15', 112: 'PERCENT', 113: '__ANON_13', 114: '__ANON_3', 115: 'LESSTHAN', 116: '__ANON_19', 117: '__ANON_14', 118: '__ANON_6', 119: '__ANON_10', 120: '__ANON_5', 121: '__ANON_18', 122: 'IN', 123: '__ANON_8', 124: 'AT', 125: 'IS', 126: 'AND', 127: '__ANON_16', 128: '__ANON_2', 129: '__ANON_9', 130: 'CIRCUMFLEX', 131: '__ANON_20', 132: 'OR', 133: '__ANON_7', 134: '__ANON_12', 135: '__ANON_4', 136: '__ANON_11', 137: '__ANON_17', 138: 'MORETHAN', 139: 'DOT', 140: '_INDENT', 141: 'argvalue', 142: 'stararg', 143: 'kwargs', 144: 'starargs', 145: '__subscriptlist_plus_25', 146: 'typedparam', 147: 'paramvalue', 148: 'lambda_starparams', 149: 'lambda_params', 150: 'subscript', 151: 'sliceop', 152: 'type_and_name', 153: 'struct_union_types', 154: 'test_nocond', 155: 'lambdef_nocond', 156: '__arguments_star_29', 157: 'key_value', 158: 'elifs', 159: '__elifs_star_12', 160: 'elif_', 161: '__struct_union_types_plus_28', 162: 'funcdef', 163: 'structdef', 164: 'uninit_var_decl', 165: 'for_stmt', 166: 'if_stmt', 167: 'with_stmt', 168: 'while_stmt', 169: 'compound_stmt', 170: 'macro_with_block_stmt', 171: 'stmt', 172: 'uniondef', 173: '__start_star_0', 174: 'start', 175: 'with_items', 176: '__testlist_star_expr_plus_6', 177: '__comp_fors_plus_31', 178: 'comp_fors', 179: 'comp_for', 180: 'returntype', 181: '__parameter_types_star_4', 182: 'subscriptlist', 183: 'exprlist', 184: 'comprehension{test}', 185: 'arguments', 186: '_shift_op', 187: '__ANON_1', 188: 'comp_if', 189: 'comp_op', 190: '_mul_op', 191: '__term_star_23', 192: '__and_test_star_16', 193: '__assign_plus_5', 194: 'comprehension{test_or_star_expr}', 195: '_exprlist', 196: 'parameter_types', 197: '__import_as_names_star_8', 198: '_add_op', 199: 'parameters', 200: '__or_expr_star_18', 201: '__starargs_star_30', 202: '__exprlist_plus_26', 203: '__suite_plus_14', 204: '__arith_expr_star_22', 205: '__or_test_star_15', 206: '__shift_expr_star_21', 207: '__with_items_star_13', 208: '__dotted_name_star_10', 209: '__xor_expr_star_19', 210: '__comparison_star_17', 211: '__lambda_params_star_2', 212: '__global_stmt_star_11', 213: 'augassign_op', 214: '__simple_stmt_star_3', 215: '__dots_plus_7', 216: 'dots', 217: '___dict_exprlist_star_27', 218: 'testlist', 219: 'testlist_tuple', 220: '__and_expr_star_20', 221: '__dotted_as_names_star_9', 222: '_tuple_inner', 223: 'comprehension{key_value}', 224: '_dict_exprlist', 225: '__parameters_star_1', 226: 'dotted_as_names'}, 'states': {0: {0: (0, 401), 1: (0, 348), 2: (0, 408), 3: (0, 142)}, 1: {4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 11: (0, 144), 12: (0, 534), 13: (0, 541), 14: (0, 587), 15: (0, 183), 16: (0, 229), 17: (0, 215), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 22: (0, 414), 23: (0, 332), 24: (0, 445), 25: (0, 442), 26: (0, 546), 27: (0, 317), 28: (0, 201), 29: (0, 411), 30: (0, 519), 31: (0, 574), 32: (0, 422), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 37: (0, 212), 38: (0, 459), 39: (0, 404), 0: (0, 493), 40: (0, 508), 41: (0, 378), 42: (0, 364), 43: (0, 531), 44: (0, 543), 45: (0, 336), 46: (0, 538), 2: (0, 408), 47: (0, 576), 48: (0, 495), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 60: (0, 586), 61: (0, 326), 62: (0, 372), 63: (0, 536), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 69: (0, 219), 70: (0, 296), 71: (0, 282), 72: (0, 242), 73: (0, 235), 74: (0, 206), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 81: (0, 96), 82: (0, 106)}, 2: {83: (1, {'@': 475}), 84: (1, {'@': 475})}, 3: {51: (0, 583), 4: (0, 289), 38: (0, 459), 43: (0, 258), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 85: (0, 117), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 4: {86: (0, 423)}, 5: {51: (0, 583), 12: (0, 262), 4: (0, 289), 29: (0, 411), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 22: (0, 151), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 2: (0, 408), 68: (0, 250), 28: (0, 201), 48: (0, 495), 82: (0, 106), 49: (0, 579), 32: (0, 422)}, 6: {87: (0, 113), 0: (0, 537), 2: (0, 408), 88: (1, {'@': 207}), 89: (1, {'@': 207}), 39: (1, {'@': 207})}, 7: {89: (1, {'@': 217}), 39: (1, {'@': 217})}, 8: {88: (0, 122)}, 9: {2: (0, 408), 87: (0, 265), 0: (0, 537), 90: (0, 140)}, 10: {68: (1, {'@': 370}), 40: (1, {'@': 370}), 21: (1, {'@': 370}), 48: (1, {'@': 370}), 59: (1, {'@': 370}), 51: (1, {'@': 370}), 91: (1, {'@': 370}), 92: (1, {'@': 370}), 72: (1, {'@': 370}), 49: (1, {'@': 370}), 8: (1, {'@': 370}), 50: (1, {'@': 370}), 82: (1, {'@': 370}), 93: (1, {'@': 370}), 94: (1, {'@': 370}), 95: (1, {'@': 370}), 41: (1, {'@': 370}), 35: (1, {'@': 370}), 20: (1, {'@': 370}), 32: (1, {'@': 370}), 64: (1, {'@': 370}), 80: (1, {'@': 370}), 25: (1, {'@': 370}), 96: (1, {'@': 370}), 47: (1, {'@': 370}), 12: (1, {'@': 370}), 34: (1, {'@': 370}), 70: (1, {'@': 370}), 77: (1, {'@': 370}), 19: (1, {'@': 370}), 81: (1, {'@': 370}), 30: (1, {'@': 370}), 54: (1, {'@': 370}), 2: (1, {'@': 370}), 37: (1, {'@': 370}), 52: (1, {'@': 370}), 97: (1, {'@': 370}), 9: (1, {'@': 370}), 13: (1, {'@': 370}), 98: (1, {'@': 370}), 39: (1, {'@': 370})}, 11: {2: (1, {'@': 155}), 40: (1, {'@': 155})}, 12: {68: (1, {'@': 371}), 40: (1, {'@': 371}), 21: (1, {'@': 371}), 48: (1, {'@': 371}), 59: (1, {'@': 371}), 51: (1, {'@': 371}), 91: (1, {'@': 371}), 92: (1, {'@': 371}), 72: (1, {'@': 371}), 49: (1, {'@': 371}), 8: (1, {'@': 371}), 50: (1, {'@': 371}), 82: (1, {'@': 371}), 93: (1, {'@': 371}), 94: (1, {'@': 371}), 95: (1, {'@': 371}), 41: (1, {'@': 371}), 35: (1, {'@': 371}), 20: (1, {'@': 371}), 32: (1, {'@': 371}), 64: (1, {'@': 371}), 80: (1, {'@': 371}), 25: (1, {'@': 371}), 96: (1, {'@': 371}), 47: (1, {'@': 371}), 12: (1, {'@': 371}), 34: (1, {'@': 371}), 70: (1, {'@': 371}), 77: (1, {'@': 371}), 19: (1, {'@': 371}), 81: (1, {'@': 371}), 30: (1, {'@': 371}), 54: (1, {'@': 371}), 2: (1, {'@': 371}), 37: (1, {'@': 371}), 52: (1, {'@': 371}), 97: (1, {'@': 371}), 9: (1, {'@': 371}), 13: (1, {'@': 371}), 98: (1, {'@': 371}), 39: (1, {'@': 371})}, 13: {0: (0, 102), 2: (0, 408)}, 14: {2: (0, 408), 0: (0, 506)}, 15: {83: (0, 132), 88: (1, {'@': 206}), 89: (1, {'@': 206}), 39: (1, {'@': 206})}, 16: {88: (0, 145)}, 17: {0: (0, 389), 2: (0, 408), 99: (0, 23), 100: (0, 115), 101: (0, 92), 86: (1, {'@': 117})}, 18: {102: (0, 329)}, 19: {0: (0, 74), 2: (0, 408)}, 20: {68: (1, {'@': 133}), 40: (1, {'@': 133}), 48: (1, {'@': 133}), 21: (1, {'@': 133}), 59: (1, {'@': 133}), 51: (1, {'@': 133}), 98: (1, {'@': 133}), 91: (1, {'@': 133}), 92: (1, {'@': 133}), 72: (1, {'@': 133}), 49: (1, {'@': 133}), 8: (1, {'@': 133}), 50: (1, {'@': 133}), 82: (1, {'@': 133}), 93: (1, {'@': 133}), 94: (1, {'@': 133}), 95: (1, {'@': 133}), 39: (1, {'@': 133}), 41: (1, {'@': 133}), 35: (1, {'@': 133}), 20: (1, {'@': 133}), 32: (1, {'@': 133}), 80: (1, {'@': 133}), 64: (1, {'@': 133}), 25: (1, {'@': 133}), 96: (1, {'@': 133}), 47: (1, {'@': 133}), 12: (1, {'@': 133}), 34: (1, {'@': 133}), 77: (1, {'@': 133}), 70: (1, {'@': 133}), 19: (1, {'@': 133}), 81: (1, {'@': 133}), 30: (1, {'@': 133}), 54: (1, {'@': 133}), 2: (1, {'@': 133}), 37: (1, {'@': 133}), 52: (1, {'@': 133}), 97: (1, {'@': 133}), 9: (1, {'@': 133}), 13: (1, {'@': 133}), 103: (1, {'@': 133}), 104: (1, {'@': 133})}, 21: {68: (1, {'@': 417}), 40: (1, {'@': 417}), 21: (1, {'@': 417}), 48: (1, {'@': 417}), 59: (1, {'@': 417}), 51: (1, {'@': 417}), 98: (1, {'@': 417}), 92: (1, {'@': 417}), 72: (1, {'@': 417}), 49: (1, {'@': 417}), 8: (1, {'@': 417}), 50: (1, {'@': 417}), 82: (1, {'@': 417}), 93: (1, {'@': 417}), 94: (1, {'@': 417}), 95: (1, {'@': 417}), 39: (1, {'@': 417}), 41: (1, {'@': 417}), 35: (1, {'@': 417}), 20: (1, {'@': 417}), 32: (1, {'@': 417}), 64: (1, {'@': 417}), 80: (1, {'@': 417}), 25: (1, {'@': 417}), 96: (1, {'@': 417}), 47: (1, {'@': 417}), 12: (1, {'@': 417}), 34: (1, {'@': 417}), 70: (1, {'@': 417}), 77: (1, {'@': 417}), 19: (1, {'@': 417}), 81: (1, {'@': 417}), 30: (1, {'@': 417}), 54: (1, {'@': 417}), 2: (1, {'@': 417}), 37: (1, {'@': 417}), 52: (1, {'@': 417}), 97: (1, {'@': 417}), 9: (1, {'@': 417}), 13: (1, {'@': 417})}, 22: {89: (1, {'@': 425}), 39: (1, {'@': 425})}, 23: {0: (0, 577), 2: (0, 408)}, 24: {51: (0, 583), 12: (0, 262), 4: (0, 289), 29: (0, 411), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 2: (0, 408), 68: (0, 250), 28: (0, 201), 22: (0, 581), 48: (0, 495), 82: (0, 106), 49: (0, 579), 32: (0, 422)}, 25: {87: (0, 265), 2: (0, 408), 40: (0, 328), 0: (0, 537), 90: (0, 566), 52: (0, 578)}, 26: {86: (1, {'@': 445}), 83: (1, {'@': 445})}, 27: {0: (0, 365), 2: (0, 408)}, 28: {48: (1, {'@': 466}), 89: (1, {'@': 466}), 105: (1, {'@': 466}), 106: (1, {'@': 466}), 107: (1, {'@': 466}), 108: (1, {'@': 466}), 83: (1, {'@': 466}), 103: (1, {'@': 466}), 84: (1, {'@': 466}), 109: (1, {'@': 466}), 95: (1, {'@': 466}), 110: (1, {'@': 466}), 111: (1, {'@': 466}), 112: (1, {'@': 466}), 113: (1, {'@': 466}), 114: (1, {'@': 466}), 115: (1, {'@': 466}), 116: (1, {'@': 466}), 117: (1, {'@': 466}), 52: (1, {'@': 466}), 88: (1, {'@': 466}), 118: (1, {'@': 466}), 119: (1, {'@': 466}), 120: (1, {'@': 466}), 72: (1, {'@': 466}), 121: (1, {'@': 466}), 122: (1, {'@': 466}), 123: (1, {'@': 466}), 124: (1, {'@': 466}), 94: (1, {'@': 466}), 86: (1, {'@': 466}), 125: (1, {'@': 466}), 126: (1, {'@': 466}), 127: (1, {'@': 466}), 39: (1, {'@': 466}), 64: (1, {'@': 466}), 128: (1, {'@': 466}), 129: (1, {'@': 466}), 130: (1, {'@': 466}), 102: (1, {'@': 466}), 131: (1, {'@': 466}), 132: (1, {'@': 466}), 133: (1, {'@': 466}), 2: (1, {'@': 466}), 134: (1, {'@': 466}), 135: (1, {'@': 466}), 136: (1, {'@': 466}), 137: (1, {'@': 466}), 138: (1, {'@': 466})}, 29: {83: (0, 517), 122: (1, {'@': 350})}, 30: {68: (1, {'@': 373}), 40: (1, {'@': 373}), 48: (1, {'@': 373}), 59: (1, {'@': 373}), 98: (1, {'@': 373}), 50: (1, {'@': 373}), 95: (1, {'@': 373}), 35: (1, {'@': 373}), 20: (1, {'@': 373}), 32: (1, {'@': 373}), 80: (1, {'@': 373}), 25: (1, {'@': 373}), 96: (1, {'@': 373}), 34: (1, {'@': 373}), 77: (1, {'@': 373}), 19: (1, {'@': 373}), 52: (1, {'@': 373}), 97: (1, {'@': 373}), 21: (1, {'@': 373}), 51: (1, {'@': 373}), 91: (1, {'@': 373}), 92: (1, {'@': 373}), 72: (1, {'@': 373}), 49: (1, {'@': 373}), 8: (1, {'@': 373}), 82: (1, {'@': 373}), 93: (1, {'@': 373}), 94: (1, {'@': 373}), 39: (1, {'@': 373}), 41: (1, {'@': 373}), 64: (1, {'@': 373}), 47: (1, {'@': 373}), 12: (1, {'@': 373}), 70: (1, {'@': 373}), 81: (1, {'@': 373}), 30: (1, {'@': 373}), 54: (1, {'@': 373}), 2: (1, {'@': 373}), 37: (1, {'@': 373}), 9: (1, {'@': 373}), 13: (1, {'@': 373})}, 31: {86: (1, {'@': 108})}, 32: {89: (1, {'@': 452}), 119: (1, {'@': 452}), 107: (1, {'@': 452}), 120: (1, {'@': 452}), 108: (1, {'@': 452}), 83: (1, {'@': 452}), 103: (1, {'@': 452}), 123: (1, {'@': 452}), 84: (1, {'@': 452}), 94: (1, {'@': 452}), 86: (1, {'@': 452}), 95: (1, {'@': 452}), 126: (1, {'@': 452}), 39: (1, {'@': 452}), 128: (1, {'@': 452}), 129: (1, {'@': 452}), 102: (1, {'@': 452}), 113: (1, {'@': 452}), 114: (1, {'@': 452}), 132: (1, {'@': 452}), 133: (1, {'@': 452}), 2: (1, {'@': 452}), 134: (1, {'@': 452}), 135: (1, {'@': 452}), 117: (1, {'@': 452}), 136: (1, {'@': 452}), 88: (1, {'@': 452}), 118: (1, {'@': 452})}, 33: {89: (1, {'@': 193}), 39: (1, {'@': 193})}, 34: {40: (1, {'@': 467}), 48: (1, {'@': 467}), 89: (1, {'@': 467}), 105: (1, {'@': 467}), 119: (1, {'@': 467}), 106: (1, {'@': 467}), 107: (1, {'@': 467}), 120: (1, {'@': 467}), 83: (1, {'@': 467}), 72: (1, {'@': 467}), 121: (1, {'@': 467}), 139: (1, {'@': 467}), 122: (1, {'@': 467}), 123: (1, {'@': 467}), 109: (1, {'@': 467}), 124: (1, {'@': 467}), 94: (1, {'@': 467}), 125: (1, {'@': 467}), 126: (1, {'@': 467}), 127: (1, {'@': 467}), 39: (1, {'@': 467}), 64: (1, {'@': 467}), 110: (1, {'@': 467}), 128: (1, {'@': 467}), 111: (1, {'@': 467}), 129: (1, {'@': 467}), 130: (1, {'@': 467}), 112: (1, {'@': 467}), 113: (1, {'@': 467}), 131: (1, {'@': 467}), 114: (1, {'@': 467}), 12: (1, {'@': 467}), 118: (1, {'@': 467}), 77: (1, {'@': 467}), 132: (1, {'@': 467}), 115: (1, {'@': 467}), 99: (1, {'@': 467}), 54: (1, {'@': 467}), 133: (1, {'@': 467}), 116: (1, {'@': 467}), 134: (1, {'@': 467}), 135: (1, {'@': 467}), 117: (1, {'@': 467}), 52: (1, {'@': 467}), 136: (1, {'@': 467}), 137: (1, {'@': 467}), 138: (1, {'@': 467}), 108: (1, {'@': 467}), 86: (1, {'@': 467}), 84: (1, {'@': 467}), 103: (1, {'@': 467}), 95: (1, {'@': 467}), 102: (1, {'@': 467}), 2: (1, {'@': 467}), 88: (1, {'@': 467})}, 35: {140: (0, 139)}, 36: {68: (1, {'@': 237}), 40: (1, {'@': 237}), 21: (1, {'@': 237}), 48: (1, {'@': 237}), 59: (1, {'@': 237}), 51: (1, {'@': 237}), 91: (1, {'@': 237}), 92: (1, {'@': 237}), 72: (1, {'@': 237}), 49: (1, {'@': 237}), 8: (1, {'@': 237}), 50: (1, {'@': 237}), 82: (1, {'@': 237}), 93: (1, {'@': 237}), 94: (1, {'@': 237}), 95: (1, {'@': 237}), 41: (1, {'@': 237}), 35: (1, {'@': 237}), 20: (1, {'@': 237}), 32: (1, {'@': 237}), 64: (1, {'@': 237}), 80: (1, {'@': 237}), 25: (1, {'@': 237}), 96: (1, {'@': 237}), 47: (1, {'@': 237}), 12: (1, {'@': 237}), 34: (1, {'@': 237}), 70: (1, {'@': 237}), 77: (1, {'@': 237}), 19: (1, {'@': 237}), 81: (1, {'@': 237}), 30: (1, {'@': 237}), 54: (1, {'@': 237}), 2: (1, {'@': 237}), 37: (1, {'@': 237}), 52: (1, {'@': 237}), 97: (1, {'@': 237}), 9: (1, {'@': 237}), 13: (1, {'@': 237}), 98: (1, {'@': 237}), 39: (1, {'@': 237})}, 37: {84: (1, {'@': 401}), 88: (1, {'@': 401}), 102: (1, {'@': 401})}, 38: {83: (1, {'@': 365}), 84: (1, {'@': 365}), 95: (1, {'@': 365})}, 39: {89: (1, {'@': 191}), 39: (1, {'@': 191})}, 40: {2: (1, {'@': 154}), 40: (1, {'@': 154})}, 41: {51: (0, 583), 4: (0, 289), 38: (0, 459), 99: (0, 98), 43: (0, 57), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 141: (0, 68), 142: (0, 169), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 143: (0, 156), 77: (0, 260), 40: (0, 508), 52: (0, 375), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 42: {142: (0, 294), 51: (0, 583), 4: (0, 289), 38: (0, 459), 99: (0, 98), 43: (0, 57), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 143: (0, 62), 57: (0, 230), 13: (0, 541), 141: (0, 68), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 52: (0, 375), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 144: (0, 82), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579), 88: (1, {'@': 381})}, 43: {83: (0, 163), 88: (1, {'@': 387})}, 44: {51: (0, 583), 12: (0, 262), 4: (0, 289), 29: (0, 411), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 72: (0, 242), 57: (0, 230), 30: (0, 519), 5: (0, 514), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 22: (0, 414), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 64: (0, 564), 44: (0, 543), 2: (0, 408), 68: (0, 250), 28: (0, 201), 48: (0, 495), 82: (0, 106), 49: (0, 579), 32: (0, 422)}, 45: {86: (1, {'@': 119})}, 46: {145: (0, 518), 83: (0, 135), 102: (1, {'@': 329})}, 47: {88: (1, {'@': 249}), 102: (1, {'@': 249}), 84: (1, {'@': 249})}, 48: {102: (1, {'@': 338}), 83: (1, {'@': 338})}, 49: {0: (0, 389), 2: (0, 408), 99: (0, 23), 101: (0, 92), 100: (0, 97), 86: (1, {'@': 123})}, 50: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 146: (0, 458), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 147: (0, 313), 32: (0, 422), 70: (0, 296), 33: (0, 484), 43: (0, 19), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579), 88: (1, {'@': 95})}, 51: {68: (1, {'@': 287}), 40: (1, {'@': 287}), 48: (1, {'@': 287}), 59: (1, {'@': 287}), 51: (1, {'@': 287}), 72: (1, {'@': 287}), 49: (1, {'@': 287}), 82: (1, {'@': 287}), 35: (1, {'@': 287}), 32: (1, {'@': 287}), 80: (1, {'@': 287}), 12: (1, {'@': 287}), 34: (1, {'@': 287}), 70: (1, {'@': 287}), 77: (1, {'@': 287}), 30: (1, {'@': 287}), 54: (1, {'@': 287}), 2: (1, {'@': 287}), 13: (1, {'@': 287})}, 52: {86: (1, {'@': 428}), 39: (1, {'@': 428}), 89: (1, {'@': 428}), 83: (1, {'@': 428}), 88: (1, {'@': 428})}, 53: {39: (1, {'@': 246}), 89: (1, {'@': 246}), 128: (1, {'@': 246}), 129: (1, {'@': 246}), 119: (1, {'@': 246}), 107: (1, {'@': 246}), 120: (1, {'@': 246}), 113: (1, {'@': 246}), 114: (1, {'@': 246}), 83: (1, {'@': 246}), 133: (1, {'@': 246}), 123: (1, {'@': 246}), 134: (1, {'@': 246}), 135: (1, {'@': 246}), 117: (1, {'@': 246}), 136: (1, {'@': 246}), 118: (1, {'@': 246}), 86: (1, {'@': 246}), 108: (1, {'@': 246}), 88: (1, {'@': 246}), 2: (1, {'@': 246}), 102: (1, {'@': 246}), 95: (1, {'@': 246}), 84: (1, {'@': 246})}, 54: {101: (0, 435), 52: (0, 525), 0: (0, 389), 86: (0, 88), 148: (0, 231), 100: (0, 489), 2: (0, 408), 99: (0, 23), 149: (0, 112)}, 55: {88: (1, {'@': 250}), 102: (1, {'@': 250}), 84: (1, {'@': 250})}, 56: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 86: (0, 487), 5: (0, 387), 6: (0, 390), 56: (0, 224), 13: (0, 541), 57: (0, 230), 14: (0, 587), 58: (0, 449), 16: (0, 229), 43: (0, 81), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 150: (0, 161), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579), 102: (1, {'@': 330})}, 57: {107: (0, 420), 83: (1, {'@': 398}), 88: (1, {'@': 398})}, 58: {68: (1, {'@': 293}), 40: (1, {'@': 293}), 48: (1, {'@': 293}), 59: (1, {'@': 293}), 51: (1, {'@': 293}), 72: (1, {'@': 293}), 49: (1, {'@': 293}), 82: (1, {'@': 293}), 35: (1, {'@': 293}), 32: (1, {'@': 293}), 80: (1, {'@': 293}), 12: (1, {'@': 293}), 34: (1, {'@': 293}), 70: (1, {'@': 293}), 77: (1, {'@': 293}), 30: (1, {'@': 293}), 54: (1, {'@': 293}), 2: (1, {'@': 293}), 13: (1, {'@': 293})}, 59: {51: (0, 583), 4: (0, 289), 38: (0, 459), 43: (0, 57), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 141: (0, 68), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 60: {102: (1, {'@': 336}), 83: (1, {'@': 336})}, 61: {68: (1, {'@': 235}), 40: (1, {'@': 235}), 21: (1, {'@': 235}), 48: (1, {'@': 235}), 59: (1, {'@': 235}), 51: (1, {'@': 235}), 91: (1, {'@': 235}), 92: (1, {'@': 235}), 72: (1, {'@': 235}), 49: (1, {'@': 235}), 8: (1, {'@': 235}), 50: (1, {'@': 235}), 82: (1, {'@': 235}), 93: (1, {'@': 235}), 94: (1, {'@': 235}), 95: (1, {'@': 235}), 41: (1, {'@': 235}), 35: (1, {'@': 235}), 20: (1, {'@': 235}), 32: (1, {'@': 235}), 64: (1, {'@': 235}), 80: (1, {'@': 235}), 25: (1, {'@': 235}), 96: (1, {'@': 235}), 47: (1, {'@': 235}), 12: (1, {'@': 235}), 34: (1, {'@': 235}), 70: (1, {'@': 235}), 77: (1, {'@': 235}), 19: (1, {'@': 235}), 81: (1, {'@': 235}), 30: (1, {'@': 235}), 54: (1, {'@': 235}), 2: (1, {'@': 235}), 37: (1, {'@': 235}), 52: (1, {'@': 235}), 97: (1, {'@': 235}), 9: (1, {'@': 235}), 13: (1, {'@': 235}), 98: (1, {'@': 235}), 39: (1, {'@': 235})}, 62: {88: (1, {'@': 380})}, 63: {83: (0, 134), 88: (1, {'@': 94})}, 64: {4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 12: (0, 534), 13: (0, 541), 14: (0, 587), 15: (0, 183), 16: (0, 229), 17: (0, 215), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 22: (0, 414), 23: (0, 332), 24: (0, 445), 25: (0, 442), 26: (0, 546), 27: (0, 317), 28: (0, 201), 29: (0, 411), 30: (0, 519), 31: (0, 574), 32: (0, 422), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 37: (0, 212), 38: (0, 459), 39: (0, 404), 0: (0, 493), 40: (0, 508), 41: (0, 378), 42: (0, 364), 43: (0, 531), 44: (0, 543), 45: (0, 336), 46: (0, 538), 2: (0, 408), 47: (0, 576), 48: (0, 495), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 60: (0, 586), 61: (0, 326), 62: (0, 372), 63: (0, 536), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 69: (0, 219), 70: (0, 296), 71: (0, 282), 11: (0, 61), 72: (0, 242), 73: (0, 235), 74: (0, 206), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 81: (0, 96), 82: (0, 106)}, 65: {88: (1, {'@': 392})}, 66: {88: (1, {'@': 390})}, 67: {68: (1, {'@': 444}), 40: (1, {'@': 444}), 48: (1, {'@': 444}), 21: (1, {'@': 444}), 59: (1, {'@': 444}), 51: (1, {'@': 444}), 98: (1, {'@': 444}), 91: (1, {'@': 444}), 104: (1, {'@': 444}), 92: (1, {'@': 444}), 72: (1, {'@': 444}), 103: (1, {'@': 444}), 49: (1, {'@': 444}), 8: (1, {'@': 444}), 50: (1, {'@': 444}), 82: (1, {'@': 444}), 93: (1, {'@': 444}), 94: (1, {'@': 444}), 95: (1, {'@': 444}), 39: (1, {'@': 444}), 41: (1, {'@': 444}), 35: (1, {'@': 444}), 20: (1, {'@': 444}), 32: (1, {'@': 444}), 80: (1, {'@': 444}), 64: (1, {'@': 444}), 25: (1, {'@': 444}), 96: (1, {'@': 444}), 47: (1, {'@': 444}), 12: (1, {'@': 444}), 34: (1, {'@': 444}), 77: (1, {'@': 444}), 70: (1, {'@': 444}), 19: (1, {'@': 444}), 81: (1, {'@': 444}), 30: (1, {'@': 444}), 54: (1, {'@': 444}), 2: (1, {'@': 444}), 37: (1, {'@': 444}), 52: (1, {'@': 444}), 97: (1, {'@': 444}), 9: (1, {'@': 444}), 13: (1, {'@': 444})}, 68: {83: (1, {'@': 481}), 88: (1, {'@': 481})}, 69: {2: (1, {'@': 151}), 40: (1, {'@': 151})}, 70: {86: (1, {'@': 105})}, 71: {68: (1, {'@': 89}), 40: (1, {'@': 89}), 21: (1, {'@': 89}), 48: (1, {'@': 89}), 59: (1, {'@': 89}), 51: (1, {'@': 89}), 91: (1, {'@': 89}), 92: (1, {'@': 89}), 72: (1, {'@': 89}), 49: (1, {'@': 89}), 8: (1, {'@': 89}), 50: (1, {'@': 89}), 82: (1, {'@': 89}), 93: (1, {'@': 89}), 94: (1, {'@': 89}), 95: (1, {'@': 89}), 41: (1, {'@': 89}), 35: (1, {'@': 89}), 20: (1, {'@': 89}), 32: (1, {'@': 89}), 64: (1, {'@': 89}), 80: (1, {'@': 89}), 25: (1, {'@': 89}), 96: (1, {'@': 89}), 47: (1, {'@': 89}), 12: (1, {'@': 89}), 34: (1, {'@': 89}), 70: (1, {'@': 89}), 77: (1, {'@': 89}), 19: (1, {'@': 89}), 81: (1, {'@': 89}), 30: (1, {'@': 89}), 54: (1, {'@': 89}), 2: (1, {'@': 89}), 37: (1, {'@': 89}), 52: (1, {'@': 89}), 97: (1, {'@': 89}), 9: (1, {'@': 89}), 13: (1, {'@': 89}), 98: (1, {'@': 89}), 39: (1, {'@': 89})}, 72: {102: (1, {'@': 469}), 83: (1, {'@': 469})}, 73: {51: (0, 583), 12: (0, 262), 4: (0, 289), 29: (0, 411), 52: (0, 515), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 22: (0, 297), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 27: (0, 234), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 2: (0, 408), 68: (0, 250), 28: (0, 201), 48: (0, 495), 82: (0, 106), 49: (0, 579), 32: (0, 422), 122: (1, {'@': 351})}, 74: {88: (1, {'@': 99}), 83: (1, {'@': 99}), 107: (1, {'@': 99})}, 75: {68: (1, {'@': 233}), 40: (1, {'@': 233}), 21: (1, {'@': 233}), 48: (1, {'@': 233}), 59: (1, {'@': 233}), 51: (1, {'@': 233}), 91: (1, {'@': 233}), 92: (1, {'@': 233}), 72: (1, {'@': 233}), 49: (1, {'@': 233}), 8: (1, {'@': 233}), 50: (1, {'@': 233}), 82: (1, {'@': 233}), 93: (1, {'@': 233}), 94: (1, {'@': 233}), 95: (1, {'@': 233}), 41: (1, {'@': 233}), 35: (1, {'@': 233}), 20: (1, {'@': 233}), 32: (1, {'@': 233}), 64: (1, {'@': 233}), 80: (1, {'@': 233}), 25: (1, {'@': 233}), 96: (1, {'@': 233}), 47: (1, {'@': 233}), 12: (1, {'@': 233}), 34: (1, {'@': 233}), 70: (1, {'@': 233}), 77: (1, {'@': 233}), 19: (1, {'@': 233}), 81: (1, {'@': 233}), 30: (1, {'@': 233}), 54: (1, {'@': 233}), 2: (1, {'@': 233}), 37: (1, {'@': 233}), 52: (1, {'@': 233}), 97: (1, {'@': 233}), 9: (1, {'@': 233}), 13: (1, {'@': 233}), 98: (1, {'@': 233}), 39: (1, {'@': 233})}, 76: {86: (0, 131), 151: (0, 165), 102: (1, {'@': 335}), 83: (1, {'@': 335})}, 77: {68: (1, {'@': 232}), 40: (1, {'@': 232}), 48: (1, {'@': 232}), 21: (1, {'@': 232}), 59: (1, {'@': 232}), 51: (1, {'@': 232}), 98: (1, {'@': 232}), 91: (1, {'@': 232}), 104: (1, {'@': 232}), 92: (1, {'@': 232}), 72: (1, {'@': 232}), 103: (1, {'@': 232}), 49: (1, {'@': 232}), 8: (1, {'@': 232}), 50: (1, {'@': 232}), 82: (1, {'@': 232}), 93: (1, {'@': 232}), 94: (1, {'@': 232}), 95: (1, {'@': 232}), 39: (1, {'@': 232}), 41: (1, {'@': 232}), 35: (1, {'@': 232}), 20: (1, {'@': 232}), 32: (1, {'@': 232}), 80: (1, {'@': 232}), 64: (1, {'@': 232}), 25: (1, {'@': 232}), 96: (1, {'@': 232}), 47: (1, {'@': 232}), 12: (1, {'@': 232}), 34: (1, {'@': 232}), 77: (1, {'@': 232}), 70: (1, {'@': 232}), 19: (1, {'@': 232}), 81: (1, {'@': 232}), 30: (1, {'@': 232}), 54: (1, {'@': 232}), 2: (1, {'@': 232}), 37: (1, {'@': 232}), 52: (1, {'@': 232}), 97: (1, {'@': 232}), 9: (1, {'@': 232}), 13: (1, {'@': 232})}, 78: {4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 12: (0, 534), 13: (0, 541), 14: (0, 587), 15: (0, 183), 16: (0, 229), 17: (0, 215), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 22: (0, 414), 23: (0, 332), 24: (0, 445), 25: (0, 442), 26: (0, 546), 27: (0, 317), 28: (0, 201), 29: (0, 411), 30: (0, 519), 31: (0, 574), 32: (0, 422), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 37: (0, 212), 38: (0, 459), 39: (0, 404), 0: (0, 493), 40: (0, 508), 41: (0, 378), 42: (0, 364), 43: (0, 531), 44: (0, 543), 45: (0, 336), 46: (0, 538), 2: (0, 408), 47: (0, 576), 11: (0, 71), 48: (0, 495), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 60: (0, 586), 61: (0, 326), 62: (0, 372), 63: (0, 536), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 69: (0, 219), 70: (0, 296), 71: (0, 282), 72: (0, 242), 73: (0, 235), 74: (0, 206), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 81: (0, 96), 82: (0, 106)}, 79: {102: (1, {'@': 342}), 83: (1, {'@': 342})}, 80: {88: (1, {'@': 102}), 102: (1, {'@': 102}), 84: (1, {'@': 102})}, 81: {86: (0, 322), 102: (1, {'@': 333}), 83: (1, {'@': 333})}, 82: {88: (1, {'@': 379})}, 83: {139: (0, 275), 89: (1, {'@': 211}), 108: (1, {'@': 211}), 83: (1, {'@': 211}), 39: (1, {'@': 211}), 47: (1, {'@': 211})}, 84: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 43: (0, 511), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 85: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 43: (0, 13), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 152: (0, 30), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 153: (0, 12), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 39: (0, 35), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 86: {51: (0, 583), 12: (0, 262), 4: (0, 289), 29: (0, 411), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 22: (0, 130), 2: (0, 408), 68: (0, 250), 28: (0, 201), 48: (0, 495), 82: (0, 106), 49: (0, 579), 32: (0, 422)}, 87: {51: (0, 583), 4: (0, 289), 38: (0, 459), 99: (0, 98), 43: (0, 57), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 143: (0, 66), 70: (0, 296), 33: (0, 484), 34: (0, 483), 141: (0, 114), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 88: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 14: (0, 47), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 21: (0, 54), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 154: (0, 143), 42: (0, 364), 44: (0, 543), 155: (0, 55), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 89: {86: (1, {'@': 104})}, 90: {83: (1, {'@': 474}), 122: (1, {'@': 474})}, 91: {4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 12: (0, 534), 13: (0, 541), 14: (0, 587), 15: (0, 183), 16: (0, 229), 17: (0, 215), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 22: (0, 414), 23: (0, 332), 24: (0, 445), 25: (0, 442), 26: (0, 546), 27: (0, 317), 28: (0, 201), 29: (0, 411), 30: (0, 519), 31: (0, 574), 32: (0, 422), 33: (0, 484), 34: (0, 483), 11: (0, 168), 35: (0, 461), 36: (0, 477), 37: (0, 212), 38: (0, 459), 39: (0, 404), 0: (0, 493), 40: (0, 508), 41: (0, 378), 42: (0, 364), 43: (0, 531), 44: (0, 543), 45: (0, 336), 46: (0, 538), 2: (0, 408), 47: (0, 576), 48: (0, 495), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 60: (0, 586), 61: (0, 326), 62: (0, 372), 63: (0, 536), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 69: (0, 219), 70: (0, 296), 71: (0, 282), 72: (0, 242), 73: (0, 235), 74: (0, 206), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 81: (0, 96), 82: (0, 106)}, 92: {86: (1, {'@': 424}), 83: (1, {'@': 424})}, 93: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 43: (0, 13), 57: (0, 230), 13: (0, 541), 14: (0, 587), 91: (0, 170), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 152: (0, 162), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 94: {4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 12: (0, 534), 13: (0, 541), 14: (0, 587), 16: (0, 229), 17: (0, 215), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 22: (0, 414), 23: (0, 332), 25: (0, 442), 26: (0, 546), 27: (0, 317), 28: (0, 201), 30: (0, 519), 24: (0, 305), 29: (0, 411), 31: (0, 574), 32: (0, 422), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 37: (0, 212), 38: (0, 459), 0: (0, 493), 40: (0, 508), 41: (0, 378), 42: (0, 364), 43: (0, 531), 44: (0, 543), 45: (0, 336), 46: (0, 538), 47: (0, 576), 2: (0, 408), 48: (0, 495), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 60: (0, 586), 61: (0, 326), 62: (0, 372), 63: (0, 536), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 69: (0, 219), 70: (0, 296), 71: (0, 282), 72: (0, 242), 73: (0, 235), 74: (0, 206), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 81: (0, 96), 82: (0, 106), 39: (0, 535)}, 95: {83: (1, {'@': 397}), 88: (1, {'@': 397})}, 96: {89: (1, {'@': 180}), 39: (1, {'@': 180})}, 97: {86: (1, {'@': 122})}, 98: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 43: (0, 100), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 99: {83: (1, {'@': 473}), 122: (1, {'@': 473})}, 100: {156: (0, 460), 83: (0, 59), 88: (1, {'@': 396})}, 101: {83: (1, {'@': 422}), 88: (1, {'@': 422})}, 102: {39: (0, 256)}, 103: {68: (1, {'@': 228}), 40: (1, {'@': 228}), 21: (1, {'@': 228}), 48: (1, {'@': 228}), 59: (1, {'@': 228}), 51: (1, {'@': 228}), 91: (1, {'@': 228}), 92: (1, {'@': 228}), 72: (1, {'@': 228}), 49: (1, {'@': 228}), 8: (1, {'@': 228}), 50: (1, {'@': 228}), 82: (1, {'@': 228}), 93: (1, {'@': 228}), 94: (1, {'@': 228}), 95: (1, {'@': 228}), 41: (1, {'@': 228}), 35: (1, {'@': 228}), 20: (1, {'@': 228}), 32: (1, {'@': 228}), 64: (1, {'@': 228}), 80: (1, {'@': 228}), 25: (1, {'@': 228}), 96: (1, {'@': 228}), 47: (1, {'@': 228}), 12: (1, {'@': 228}), 34: (1, {'@': 228}), 70: (1, {'@': 228}), 77: (1, {'@': 228}), 19: (1, {'@': 228}), 81: (1, {'@': 228}), 30: (1, {'@': 228}), 54: (1, {'@': 228}), 2: (1, {'@': 228}), 37: (1, {'@': 228}), 52: (1, {'@': 228}), 97: (1, {'@': 228}), 9: (1, {'@': 228}), 13: (1, {'@': 228}), 98: (1, {'@': 228}), 39: (1, {'@': 228})}, 104: {68: (1, {'@': 289}), 40: (1, {'@': 289}), 48: (1, {'@': 289}), 59: (1, {'@': 289}), 51: (1, {'@': 289}), 72: (1, {'@': 289}), 49: (1, {'@': 289}), 82: (1, {'@': 289}), 35: (1, {'@': 289}), 32: (1, {'@': 289}), 80: (1, {'@': 289}), 12: (1, {'@': 289}), 34: (1, {'@': 289}), 70: (1, {'@': 289}), 77: (1, {'@': 289}), 30: (1, {'@': 289}), 54: (1, {'@': 289}), 2: (1, {'@': 289}), 13: (1, {'@': 289})}, 105: {40: (0, 9), 2: (0, 408), 90: (0, 33), 87: (0, 265), 0: (0, 537), 52: (0, 39)}, 106: {40: (1, {'@': 403}), 48: (1, {'@': 403}), 89: (1, {'@': 403}), 105: (1, {'@': 403}), 119: (1, {'@': 403}), 106: (1, {'@': 403}), 107: (1, {'@': 403}), 120: (1, {'@': 403}), 83: (1, {'@': 403}), 72: (1, {'@': 403}), 121: (1, {'@': 403}), 139: (1, {'@': 403}), 122: (1, {'@': 403}), 123: (1, {'@': 403}), 109: (1, {'@': 403}), 124: (1, {'@': 403}), 94: (1, {'@': 403}), 138: (1, {'@': 403}), 125: (1, {'@': 403}), 126: (1, {'@': 403}), 127: (1, {'@': 403}), 39: (1, {'@': 403}), 64: (1, {'@': 403}), 110: (1, {'@': 403}), 128: (1, {'@': 403}), 111: (1, {'@': 403}), 129: (1, {'@': 403}), 130: (1, {'@': 403}), 112: (1, {'@': 403}), 113: (1, {'@': 403}), 131: (1, {'@': 403}), 114: (1, {'@': 403}), 12: (1, {'@': 403}), 132: (1, {'@': 403}), 115: (1, {'@': 403}), 99: (1, {'@': 403}), 133: (1, {'@': 403}), 116: (1, {'@': 403}), 134: (1, {'@': 403}), 135: (1, {'@': 403}), 117: (1, {'@': 403}), 52: (1, {'@': 403}), 136: (1, {'@': 403}), 137: (1, {'@': 403}), 118: (1, {'@': 403}), 86: (1, {'@': 403}), 108: (1, {'@': 403}), 84: (1, {'@': 403}), 103: (1, {'@': 403}), 95: (1, {'@': 403}), 102: (1, {'@': 403}), 2: (1, {'@': 403}), 88: (1, {'@': 403})}, 107: {83: (1, {'@': 483}), 88: (1, {'@': 483})}, 108: {68: (1, {'@': 90}), 40: (1, {'@': 90}), 21: (1, {'@': 90}), 48: (1, {'@': 90}), 59: (1, {'@': 90}), 51: (1, {'@': 90}), 91: (1, {'@': 90}), 92: (1, {'@': 90}), 72: (1, {'@': 90}), 49: (1, {'@': 90}), 8: (1, {'@': 90}), 50: (1, {'@': 90}), 82: (1, {'@': 90}), 93: (1, {'@': 90}), 94: (1, {'@': 90}), 95: (1, {'@': 90}), 41: (1, {'@': 90}), 35: (1, {'@': 90}), 20: (1, {'@': 90}), 32: (1, {'@': 90}), 64: (1, {'@': 90}), 80: (1, {'@': 90}), 25: (1, {'@': 90}), 96: (1, {'@': 90}), 47: (1, {'@': 90}), 12: (1, {'@': 90}), 34: (1, {'@': 90}), 70: (1, {'@': 90}), 77: (1, {'@': 90}), 19: (1, {'@': 90}), 81: (1, {'@': 90}), 30: (1, {'@': 90}), 54: (1, {'@': 90}), 2: (1, {'@': 90}), 37: (1, {'@': 90}), 52: (1, {'@': 90}), 97: (1, {'@': 90}), 9: (1, {'@': 90}), 13: (1, {'@': 90}), 98: (1, {'@': 90}), 39: (1, {'@': 90})}, 109: {4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 11: (0, 269), 12: (0, 534), 13: (0, 541), 14: (0, 587), 15: (0, 183), 16: (0, 229), 17: (0, 215), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 22: (0, 414), 23: (0, 332), 24: (0, 445), 25: (0, 442), 26: (0, 546), 27: (0, 317), 28: (0, 201), 29: (0, 411), 30: (0, 519), 31: (0, 574), 32: (0, 422), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 37: (0, 212), 38: (0, 459), 39: (0, 404), 0: (0, 493), 40: (0, 508), 41: (0, 378), 42: (0, 364), 43: (0, 531), 44: (0, 543), 45: (0, 336), 46: (0, 538), 2: (0, 408), 47: (0, 576), 48: (0, 495), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 60: (0, 586), 61: (0, 326), 62: (0, 372), 63: (0, 536), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 69: (0, 219), 70: (0, 296), 71: (0, 282), 72: (0, 242), 73: (0, 235), 74: (0, 206), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 81: (0, 96), 82: (0, 106)}, 110: {68: (1, {'@': 418}), 40: (1, {'@': 418}), 21: (1, {'@': 418}), 48: (1, {'@': 418}), 59: (1, {'@': 418}), 51: (1, {'@': 418}), 98: (1, {'@': 418}), 92: (1, {'@': 418}), 72: (1, {'@': 418}), 49: (1, {'@': 418}), 8: (1, {'@': 418}), 50: (1, {'@': 418}), 82: (1, {'@': 418}), 93: (1, {'@': 418}), 94: (1, {'@': 418}), 95: (1, {'@': 418}), 39: (1, {'@': 418}), 41: (1, {'@': 418}), 35: (1, {'@': 418}), 20: (1, {'@': 418}), 32: (1, {'@': 418}), 64: (1, {'@': 418}), 80: (1, {'@': 418}), 25: (1, {'@': 418}), 96: (1, {'@': 418}), 47: (1, {'@': 418}), 12: (1, {'@': 418}), 34: (1, {'@': 418}), 70: (1, {'@': 418}), 77: (1, {'@': 418}), 19: (1, {'@': 418}), 81: (1, {'@': 418}), 30: (1, {'@': 418}), 54: (1, {'@': 418}), 2: (1, {'@': 418}), 37: (1, {'@': 418}), 52: (1, {'@': 418}), 97: (1, {'@': 418}), 9: (1, {'@': 418}), 13: (1, {'@': 418})}, 111: {86: (0, 447)}, 112: {86: (0, 228)}, 113: {88: (1, {'@': 435}), 39: (1, {'@': 435}), 89: (1, {'@': 435}), 83: (1, {'@': 435})}, 114: {83: (1, {'@': 482}), 88: (1, {'@': 482})}, 115: {86: (1, {'@': 116})}, 116: {68: (1, {'@': 245}), 40: (1, {'@': 245}), 48: (1, {'@': 245}), 59: (1, {'@': 245}), 98: (1, {'@': 245}), 50: (1, {'@': 245}), 95: (1, {'@': 245}), 35: (1, {'@': 245}), 20: (1, {'@': 245}), 32: (1, {'@': 245}), 80: (1, {'@': 245}), 25: (1, {'@': 245}), 96: (1, {'@': 245}), 34: (1, {'@': 245}), 77: (1, {'@': 245}), 19: (1, {'@': 245}), 52: (1, {'@': 245}), 97: (1, {'@': 245}), 21: (1, {'@': 245}), 51: (1, {'@': 245}), 91: (1, {'@': 245}), 92: (1, {'@': 245}), 72: (1, {'@': 245}), 49: (1, {'@': 245}), 8: (1, {'@': 245}), 82: (1, {'@': 245}), 93: (1, {'@': 245}), 94: (1, {'@': 245}), 39: (1, {'@': 245}), 41: (1, {'@': 245}), 64: (1, {'@': 245}), 47: (1, {'@': 245}), 12: (1, {'@': 245}), 70: (1, {'@': 245}), 81: (1, {'@': 245}), 30: (1, {'@': 245}), 54: (1, {'@': 245}), 2: (1, {'@': 245}), 37: (1, {'@': 245}), 9: (1, {'@': 245}), 13: (1, {'@': 245}), 103: (1, {'@': 245}), 104: (1, {'@': 245})}, 117: {86: (1, {'@': 446}), 83: (1, {'@': 446})}, 118: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 99: (0, 86), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 157: (0, 152), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 43: (0, 4), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579), 84: (1, {'@': 357})}, 119: {52: (0, 525), 0: (0, 389), 148: (0, 89), 100: (0, 70), 99: (0, 23), 2: (0, 408), 101: (0, 92), 86: (1, {'@': 106})}, 120: {88: (1, {'@': 386})}, 121: {83: (0, 164), 88: (1, {'@': 156})}, 122: {89: (1, {'@': 195}), 39: (1, {'@': 195})}, 123: {89: (1, {'@': 449}), 119: (1, {'@': 449}), 107: (1, {'@': 449}), 120: (1, {'@': 449}), 108: (1, {'@': 449}), 83: (1, {'@': 449}), 103: (1, {'@': 449}), 123: (1, {'@': 449}), 84: (1, {'@': 449}), 94: (1, {'@': 449}), 86: (1, {'@': 449}), 95: (1, {'@': 449}), 39: (1, {'@': 449}), 128: (1, {'@': 449}), 129: (1, {'@': 449}), 102: (1, {'@': 449}), 113: (1, {'@': 449}), 114: (1, {'@': 449}), 132: (1, {'@': 449}), 133: (1, {'@': 449}), 2: (1, {'@': 449}), 134: (1, {'@': 449}), 135: (1, {'@': 449}), 117: (1, {'@': 449}), 136: (1, {'@': 449}), 88: (1, {'@': 449}), 118: (1, {'@': 449})}, 124: {2: (0, 408), 0: (0, 278)}, 125: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 43: (0, 146), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 126: {151: (0, 48), 86: (0, 131), 102: (1, {'@': 339}), 83: (1, {'@': 339})}, 127: {86: (0, 254)}, 128: {86: (1, {'@': 125})}, 129: {88: (0, 180)}, 130: {83: (1, {'@': 478}), 84: (1, {'@': 478})}, 131: {51: (0, 583), 4: (0, 289), 38: (0, 459), 43: (0, 79), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 49: (0, 579), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 102: (1, {'@': 343}), 83: (1, {'@': 343})}, 132: {0: (0, 537), 87: (0, 456), 2: (0, 408), 88: (1, {'@': 205}), 89: (1, {'@': 205}), 39: (1, {'@': 205})}, 133: {68: (1, {'@': 448}), 40: (1, {'@': 448}), 21: (1, {'@': 448}), 48: (1, {'@': 448}), 59: (1, {'@': 448}), 51: (1, {'@': 448}), 91: (1, {'@': 448}), 92: (1, {'@': 448}), 72: (1, {'@': 448}), 49: (1, {'@': 448}), 8: (1, {'@': 448}), 50: (1, {'@': 448}), 82: (1, {'@': 448}), 93: (1, {'@': 448}), 94: (1, {'@': 448}), 95: (1, {'@': 448}), 41: (1, {'@': 448}), 35: (1, {'@': 448}), 20: (1, {'@': 448}), 32: (1, {'@': 448}), 64: (1, {'@': 448}), 80: (1, {'@': 448}), 25: (1, {'@': 448}), 96: (1, {'@': 448}), 47: (1, {'@': 448}), 12: (1, {'@': 448}), 34: (1, {'@': 448}), 70: (1, {'@': 448}), 77: (1, {'@': 448}), 19: (1, {'@': 448}), 81: (1, {'@': 448}), 30: (1, {'@': 448}), 54: (1, {'@': 448}), 2: (1, {'@': 448}), 37: (1, {'@': 448}), 52: (1, {'@': 448}), 97: (1, {'@': 448}), 9: (1, {'@': 448}), 13: (1, {'@': 448})}, 134: {51: (0, 583), 4: (0, 289), 38: (0, 459), 147: (0, 101), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 146: (0, 458), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 43: (0, 19), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579), 88: (1, {'@': 93})}, 135: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 86: (0, 487), 5: (0, 387), 6: (0, 390), 56: (0, 224), 13: (0, 541), 57: (0, 230), 14: (0, 587), 58: (0, 449), 16: (0, 229), 43: (0, 81), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 150: (0, 72), 49: (0, 579), 102: (1, {'@': 332})}, 136: {83: (1, {'@': 432}), 88: (1, {'@': 432}), 39: (1, {'@': 432}), 89: (1, {'@': 432}), 128: (1, {'@': 432}), 129: (1, {'@': 432}), 119: (1, {'@': 432}), 107: (1, {'@': 432}), 120: (1, {'@': 432}), 113: (1, {'@': 432}), 114: (1, {'@': 432}), 133: (1, {'@': 432}), 123: (1, {'@': 432}), 134: (1, {'@': 432}), 135: (1, {'@': 432}), 117: (1, {'@': 432}), 136: (1, {'@': 432}), 118: (1, {'@': 432}), 102: (1, {'@': 432}), 84: (1, {'@': 432})}, 137: {158: (0, 155), 159: (0, 159), 160: (0, 171), 104: (0, 125), 68: (1, {'@': 231}), 40: (1, {'@': 231}), 48: (1, {'@': 231}), 59: (1, {'@': 231}), 98: (1, {'@': 231}), 103: (1, {'@': 231}), 50: (1, {'@': 231}), 95: (1, {'@': 231}), 35: (1, {'@': 231}), 20: (1, {'@': 231}), 32: (1, {'@': 231}), 80: (1, {'@': 231}), 25: (1, {'@': 231}), 96: (1, {'@': 231}), 34: (1, {'@': 231}), 77: (1, {'@': 231}), 19: (1, {'@': 231}), 52: (1, {'@': 231}), 97: (1, {'@': 231}), 21: (1, {'@': 231}), 51: (1, {'@': 231}), 91: (1, {'@': 231}), 92: (1, {'@': 231}), 72: (1, {'@': 231}), 49: (1, {'@': 231}), 8: (1, {'@': 231}), 82: (1, {'@': 231}), 93: (1, {'@': 231}), 94: (1, {'@': 231}), 39: (1, {'@': 231}), 41: (1, {'@': 231}), 64: (1, {'@': 231}), 47: (1, {'@': 231}), 12: (1, {'@': 231}), 70: (1, {'@': 231}), 81: (1, {'@': 231}), 30: (1, {'@': 231}), 54: (1, {'@': 231}), 2: (1, {'@': 231}), 37: (1, {'@': 231}), 9: (1, {'@': 231}), 13: (1, {'@': 231})}, 138: {51: (0, 583), 4: (0, 289), 38: (0, 459), 99: (0, 98), 43: (0, 57), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 141: (0, 68), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 143: (0, 65), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 142: (0, 107), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 52: (0, 375), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 139: {51: (0, 583), 161: (0, 93), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 43: (0, 13), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 152: (0, 166), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 140: {88: (0, 585)}, 141: {68: (1, {'@': 226}), 40: (1, {'@': 226}), 21: (1, {'@': 226}), 48: (1, {'@': 226}), 59: (1, {'@': 226}), 51: (1, {'@': 226}), 91: (1, {'@': 226}), 92: (1, {'@': 226}), 72: (1, {'@': 226}), 49: (1, {'@': 226}), 8: (1, {'@': 226}), 50: (1, {'@': 226}), 82: (1, {'@': 226}), 93: (1, {'@': 226}), 94: (1, {'@': 226}), 95: (1, {'@': 226}), 41: (1, {'@': 226}), 35: (1, {'@': 226}), 20: (1, {'@': 226}), 32: (1, {'@': 226}), 64: (1, {'@': 226}), 80: (1, {'@': 226}), 25: (1, {'@': 226}), 96: (1, {'@': 226}), 47: (1, {'@': 226}), 12: (1, {'@': 226}), 34: (1, {'@': 226}), 70: (1, {'@': 226}), 77: (1, {'@': 226}), 19: (1, {'@': 226}), 81: (1, {'@': 226}), 30: (1, {'@': 226}), 54: (1, {'@': 226}), 2: (1, {'@': 226}), 37: (1, {'@': 226}), 52: (1, {'@': 226}), 97: (1, {'@': 226}), 9: (1, {'@': 226}), 13: (1, {'@': 226}), 98: (1, {'@': 226}), 39: (1, {'@': 226})}, 142: {89: (1, {'@': 438}), 83: (1, {'@': 438}), 39: (1, {'@': 438})}, 143: {88: (1, {'@': 103}), 102: (1, {'@': 103}), 84: (1, {'@': 103})}, 144: {68: (1, {'@': 92}), 40: (1, {'@': 92}), 21: (1, {'@': 92}), 48: (1, {'@': 92}), 59: (1, {'@': 92}), 51: (1, {'@': 92}), 91: (1, {'@': 92}), 92: (1, {'@': 92}), 72: (1, {'@': 92}), 49: (1, {'@': 92}), 8: (1, {'@': 92}), 50: (1, {'@': 92}), 82: (1, {'@': 92}), 93: (1, {'@': 92}), 94: (1, {'@': 92}), 95: (1, {'@': 92}), 41: (1, {'@': 92}), 35: (1, {'@': 92}), 20: (1, {'@': 92}), 32: (1, {'@': 92}), 64: (1, {'@': 92}), 80: (1, {'@': 92}), 25: (1, {'@': 92}), 96: (1, {'@': 92}), 47: (1, {'@': 92}), 12: (1, {'@': 92}), 34: (1, {'@': 92}), 70: (1, {'@': 92}), 77: (1, {'@': 92}), 19: (1, {'@': 92}), 81: (1, {'@': 92}), 30: (1, {'@': 92}), 54: (1, {'@': 92}), 2: (1, {'@': 92}), 37: (1, {'@': 92}), 52: (1, {'@': 92}), 97: (1, {'@': 92}), 9: (1, {'@': 92}), 13: (1, {'@': 92}), 98: (1, {'@': 92}), 39: (1, {'@': 92})}, 145: {89: (1, {'@': 198}), 39: (1, {'@': 198})}, 146: {86: (0, 309)}, 147: {83: (0, 87), 88: (1, {'@': 391})}, 148: {89: (1, {'@': 460}), 105: (1, {'@': 460}), 106: (1, {'@': 460}), 107: (1, {'@': 460}), 108: (1, {'@': 460}), 83: (1, {'@': 460}), 103: (1, {'@': 460}), 84: (1, {'@': 460}), 109: (1, {'@': 460}), 95: (1, {'@': 460}), 113: (1, {'@': 460}), 114: (1, {'@': 460}), 115: (1, {'@': 460}), 116: (1, {'@': 460}), 117: (1, {'@': 460}), 88: (1, {'@': 460}), 118: (1, {'@': 460}), 119: (1, {'@': 460}), 120: (1, {'@': 460}), 121: (1, {'@': 460}), 122: (1, {'@': 460}), 123: (1, {'@': 460}), 94: (1, {'@': 460}), 86: (1, {'@': 460}), 125: (1, {'@': 460}), 126: (1, {'@': 460}), 39: (1, {'@': 460}), 64: (1, {'@': 460}), 128: (1, {'@': 460}), 129: (1, {'@': 460}), 130: (1, {'@': 460}), 102: (1, {'@': 460}), 131: (1, {'@': 460}), 132: (1, {'@': 460}), 133: (1, {'@': 460}), 2: (1, {'@': 460}), 134: (1, {'@': 460}), 135: (1, {'@': 460}), 136: (1, {'@': 460}), 138: (1, {'@': 460})}, 149: {89: (1, {'@': 437}), 83: (1, {'@': 437}), 39: (1, {'@': 437})}, 150: {122: (0, 431)}, 151: {83: (1, {'@': 476}), 84: (1, {'@': 476})}, 152: {83: (1, {'@': 477}), 84: (1, {'@': 477})}, 153: {102: (1, {'@': 340}), 83: (1, {'@': 340})}, 154: {51: (0, 583), 12: (0, 262), 4: (0, 289), 29: (0, 411), 52: (0, 515), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 22: (0, 297), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 27: (0, 234), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 2: (0, 408), 68: (0, 250), 28: (0, 201), 48: (0, 495), 82: (0, 106), 49: (0, 579), 32: (0, 422), 122: (1, {'@': 348})}, 155: {103: (0, 111), 68: (1, {'@': 229}), 40: (1, {'@': 229}), 21: (1, {'@': 229}), 48: (1, {'@': 229}), 59: (1, {'@': 229}), 51: (1, {'@': 229}), 91: (1, {'@': 229}), 92: (1, {'@': 229}), 72: (1, {'@': 229}), 49: (1, {'@': 229}), 8: (1, {'@': 229}), 50: (1, {'@': 229}), 82: (1, {'@': 229}), 93: (1, {'@': 229}), 94: (1, {'@': 229}), 95: (1, {'@': 229}), 41: (1, {'@': 229}), 35: (1, {'@': 229}), 20: (1, {'@': 229}), 32: (1, {'@': 229}), 64: (1, {'@': 229}), 80: (1, {'@': 229}), 25: (1, {'@': 229}), 96: (1, {'@': 229}), 47: (1, {'@': 229}), 12: (1, {'@': 229}), 34: (1, {'@': 229}), 70: (1, {'@': 229}), 77: (1, {'@': 229}), 19: (1, {'@': 229}), 81: (1, {'@': 229}), 30: (1, {'@': 229}), 54: (1, {'@': 229}), 2: (1, {'@': 229}), 37: (1, {'@': 229}), 52: (1, {'@': 229}), 97: (1, {'@': 229}), 9: (1, {'@': 229}), 13: (1, {'@': 229}), 98: (1, {'@': 229}), 39: (1, {'@': 229})}, 156: {88: (1, {'@': 388})}, 157: {86: (0, 1)}, 158: {88: (1, {'@': 400}), 94: (1, {'@': 400}), 95: (1, {'@': 400}), 102: (1, {'@': 400}), 84: (1, {'@': 400})}, 159: {160: (0, 67), 104: (0, 125), 68: (1, {'@': 230}), 40: (1, {'@': 230}), 48: (1, {'@': 230}), 59: (1, {'@': 230}), 98: (1, {'@': 230}), 103: (1, {'@': 230}), 50: (1, {'@': 230}), 95: (1, {'@': 230}), 35: (1, {'@': 230}), 20: (1, {'@': 230}), 32: (1, {'@': 230}), 80: (1, {'@': 230}), 25: (1, {'@': 230}), 96: (1, {'@': 230}), 34: (1, {'@': 230}), 77: (1, {'@': 230}), 19: (1, {'@': 230}), 52: (1, {'@': 230}), 97: (1, {'@': 230}), 21: (1, {'@': 230}), 51: (1, {'@': 230}), 91: (1, {'@': 230}), 92: (1, {'@': 230}), 72: (1, {'@': 230}), 49: (1, {'@': 230}), 8: (1, {'@': 230}), 82: (1, {'@': 230}), 93: (1, {'@': 230}), 94: (1, {'@': 230}), 39: (1, {'@': 230}), 41: (1, {'@': 230}), 64: (1, {'@': 230}), 47: (1, {'@': 230}), 12: (1, {'@': 230}), 70: (1, {'@': 230}), 81: (1, {'@': 230}), 30: (1, {'@': 230}), 54: (1, {'@': 230}), 2: (1, {'@': 230}), 37: (1, {'@': 230}), 9: (1, {'@': 230}), 13: (1, {'@': 230})}, 160: {47: (0, 105)}, 161: {102: (1, {'@': 470}), 83: (1, {'@': 470})}, 162: {68: (1, {'@': 480}), 40: (1, {'@': 480}), 21: (1, {'@': 480}), 48: (1, {'@': 480}), 59: (1, {'@': 480}), 51: (1, {'@': 480}), 91: (1, {'@': 480}), 72: (1, {'@': 480}), 49: (1, {'@': 480}), 82: (1, {'@': 480}), 64: (1, {'@': 480}), 35: (1, {'@': 480}), 32: (1, {'@': 480}), 80: (1, {'@': 480}), 12: (1, {'@': 480}), 34: (1, {'@': 480}), 70: (1, {'@': 480}), 77: (1, {'@': 480}), 30: (1, {'@': 480}), 54: (1, {'@': 480}), 2: (1, {'@': 480}), 13: (1, {'@': 480})}, 163: {51: (0, 583), 4: (0, 289), 38: (0, 459), 99: (0, 98), 43: (0, 57), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 141: (0, 114), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 143: (0, 120), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 164: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 43: (0, 52), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 165: {102: (1, {'@': 334}), 83: (1, {'@': 334})}, 166: {68: (1, {'@': 479}), 40: (1, {'@': 479}), 21: (1, {'@': 479}), 48: (1, {'@': 479}), 59: (1, {'@': 479}), 51: (1, {'@': 479}), 91: (1, {'@': 479}), 72: (1, {'@': 479}), 49: (1, {'@': 479}), 82: (1, {'@': 479}), 64: (1, {'@': 479}), 35: (1, {'@': 479}), 32: (1, {'@': 479}), 80: (1, {'@': 479}), 12: (1, {'@': 479}), 34: (1, {'@': 479}), 70: (1, {'@': 479}), 77: (1, {'@': 479}), 30: (1, {'@': 479}), 54: (1, {'@': 479}), 2: (1, {'@': 479}), 13: (1, {'@': 479})}, 167: {40: (1, {'@': 322}), 48: (1, {'@': 322}), 89: (1, {'@': 322}), 105: (1, {'@': 322}), 119: (1, {'@': 322}), 106: (1, {'@': 322}), 107: (1, {'@': 322}), 120: (1, {'@': 322}), 83: (1, {'@': 322}), 72: (1, {'@': 322}), 121: (1, {'@': 322}), 139: (1, {'@': 322}), 122: (1, {'@': 322}), 123: (1, {'@': 322}), 109: (1, {'@': 322}), 124: (1, {'@': 322}), 94: (1, {'@': 322}), 138: (1, {'@': 322}), 125: (1, {'@': 322}), 126: (1, {'@': 322}), 127: (1, {'@': 322}), 39: (1, {'@': 322}), 64: (1, {'@': 322}), 110: (1, {'@': 322}), 128: (1, {'@': 322}), 111: (1, {'@': 322}), 129: (1, {'@': 322}), 130: (1, {'@': 322}), 112: (1, {'@': 322}), 113: (1, {'@': 322}), 131: (1, {'@': 322}), 114: (1, {'@': 322}), 12: (1, {'@': 322}), 132: (1, {'@': 322}), 115: (1, {'@': 322}), 99: (1, {'@': 322}), 133: (1, {'@': 322}), 116: (1, {'@': 322}), 134: (1, {'@': 322}), 135: (1, {'@': 322}), 117: (1, {'@': 322}), 52: (1, {'@': 322}), 136: (1, {'@': 322}), 137: (1, {'@': 322}), 118: (1, {'@': 322}), 86: (1, {'@': 322}), 108: (1, {'@': 322}), 84: (1, {'@': 322}), 103: (1, {'@': 322}), 95: (1, {'@': 322}), 102: (1, {'@': 322}), 2: (1, {'@': 322}), 88: (1, {'@': 322})}, 168: {68: (1, {'@': 91}), 40: (1, {'@': 91}), 21: (1, {'@': 91}), 48: (1, {'@': 91}), 59: (1, {'@': 91}), 51: (1, {'@': 91}), 91: (1, {'@': 91}), 92: (1, {'@': 91}), 72: (1, {'@': 91}), 49: (1, {'@': 91}), 8: (1, {'@': 91}), 50: (1, {'@': 91}), 82: (1, {'@': 91}), 93: (1, {'@': 91}), 94: (1, {'@': 91}), 95: (1, {'@': 91}), 41: (1, {'@': 91}), 35: (1, {'@': 91}), 20: (1, {'@': 91}), 32: (1, {'@': 91}), 64: (1, {'@': 91}), 80: (1, {'@': 91}), 25: (1, {'@': 91}), 96: (1, {'@': 91}), 47: (1, {'@': 91}), 12: (1, {'@': 91}), 34: (1, {'@': 91}), 70: (1, {'@': 91}), 77: (1, {'@': 91}), 19: (1, {'@': 91}), 81: (1, {'@': 91}), 30: (1, {'@': 91}), 54: (1, {'@': 91}), 2: (1, {'@': 91}), 37: (1, {'@': 91}), 52: (1, {'@': 91}), 97: (1, {'@': 91}), 9: (1, {'@': 91}), 13: (1, {'@': 91}), 98: (1, {'@': 91}), 39: (1, {'@': 91})}, 169: {83: (1, {'@': 484}), 88: (1, {'@': 484})}, 170: {68: (1, {'@': 374}), 40: (1, {'@': 374}), 48: (1, {'@': 374}), 59: (1, {'@': 374}), 98: (1, {'@': 374}), 50: (1, {'@': 374}), 95: (1, {'@': 374}), 35: (1, {'@': 374}), 20: (1, {'@': 374}), 32: (1, {'@': 374}), 80: (1, {'@': 374}), 25: (1, {'@': 374}), 96: (1, {'@': 374}), 34: (1, {'@': 374}), 77: (1, {'@': 374}), 19: (1, {'@': 374}), 52: (1, {'@': 374}), 97: (1, {'@': 374}), 21: (1, {'@': 374}), 51: (1, {'@': 374}), 91: (1, {'@': 374}), 92: (1, {'@': 374}), 72: (1, {'@': 374}), 49: (1, {'@': 374}), 8: (1, {'@': 374}), 82: (1, {'@': 374}), 93: (1, {'@': 374}), 94: (1, {'@': 374}), 39: (1, {'@': 374}), 41: (1, {'@': 374}), 64: (1, {'@': 374}), 47: (1, {'@': 374}), 12: (1, {'@': 374}), 70: (1, {'@': 374}), 81: (1, {'@': 374}), 30: (1, {'@': 374}), 54: (1, {'@': 374}), 2: (1, {'@': 374}), 37: (1, {'@': 374}), 9: (1, {'@': 374}), 13: (1, {'@': 374})}, 171: {68: (1, {'@': 443}), 40: (1, {'@': 443}), 48: (1, {'@': 443}), 21: (1, {'@': 443}), 59: (1, {'@': 443}), 51: (1, {'@': 443}), 98: (1, {'@': 443}), 91: (1, {'@': 443}), 104: (1, {'@': 443}), 92: (1, {'@': 443}), 72: (1, {'@': 443}), 103: (1, {'@': 443}), 49: (1, {'@': 443}), 8: (1, {'@': 443}), 50: (1, {'@': 443}), 82: (1, {'@': 443}), 93: (1, {'@': 443}), 94: (1, {'@': 443}), 95: (1, {'@': 443}), 39: (1, {'@': 443}), 41: (1, {'@': 443}), 35: (1, {'@': 443}), 20: (1, {'@': 443}), 32: (1, {'@': 443}), 80: (1, {'@': 443}), 64: (1, {'@': 443}), 25: (1, {'@': 443}), 96: (1, {'@': 443}), 47: (1, {'@': 443}), 12: (1, {'@': 443}), 34: (1, {'@': 443}), 77: (1, {'@': 443}), 70: (1, {'@': 443}), 19: (1, {'@': 443}), 81: (1, {'@': 443}), 30: (1, {'@': 443}), 54: (1, {'@': 443}), 2: (1, {'@': 443}), 37: (1, {'@': 443}), 52: (1, {'@': 443}), 97: (1, {'@': 443}), 9: (1, {'@': 443}), 13: (1, {'@': 443})}, 172: {68: (1, {'@': 447}), 40: (1, {'@': 447}), 21: (1, {'@': 447}), 48: (1, {'@': 447}), 59: (1, {'@': 447}), 51: (1, {'@': 447}), 91: (1, {'@': 447}), 92: (1, {'@': 447}), 72: (1, {'@': 447}), 49: (1, {'@': 447}), 8: (1, {'@': 447}), 50: (1, {'@': 447}), 82: (1, {'@': 447}), 93: (1, {'@': 447}), 94: (1, {'@': 447}), 95: (1, {'@': 447}), 41: (1, {'@': 447}), 35: (1, {'@': 447}), 20: (1, {'@': 447}), 32: (1, {'@': 447}), 64: (1, {'@': 447}), 80: (1, {'@': 447}), 25: (1, {'@': 447}), 96: (1, {'@': 447}), 47: (1, {'@': 447}), 12: (1, {'@': 447}), 34: (1, {'@': 447}), 70: (1, {'@': 447}), 77: (1, {'@': 447}), 19: (1, {'@': 447}), 81: (1, {'@': 447}), 30: (1, {'@': 447}), 54: (1, {'@': 447}), 2: (1, {'@': 447}), 37: (1, {'@': 447}), 52: (1, {'@': 447}), 97: (1, {'@': 447}), 9: (1, {'@': 447}), 13: (1, {'@': 447})}, 173: {83: (0, 192), 122: (1, {'@': 347})}, 174: {4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 162: (0, 560), 12: (0, 534), 13: (0, 541), 91: (0, 116), 14: (0, 587), 16: (0, 229), 17: (0, 215), 163: (0, 247), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 22: (0, 414), 23: (0, 332), 24: (0, 445), 25: (0, 442), 26: (0, 546), 27: (0, 317), 164: (0, 255), 28: (0, 201), 95: (0, 193), 37: (0, 187), 29: (0, 411), 31: (0, 454), 94: (0, 443), 32: (0, 422), 33: (0, 484), 34: (0, 483), 35: (0, 461), 93: (0, 472), 36: (0, 477), 30: (0, 519), 38: (0, 459), 165: (0, 499), 0: (0, 493), 40: (0, 508), 41: (0, 378), 166: (0, 341), 167: (0, 571), 42: (0, 364), 43: (0, 531), 44: (0, 543), 47: (0, 576), 45: (0, 336), 46: (0, 538), 2: (0, 408), 15: (0, 516), 48: (0, 495), 168: (0, 175), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 97: (0, 184), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 63: (0, 245), 60: (0, 586), 61: (0, 326), 62: (0, 372), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 69: (0, 219), 169: (0, 302), 92: (0, 298), 70: (0, 296), 71: (0, 282), 170: (0, 274), 171: (0, 133), 72: (0, 242), 73: (0, 235), 74: (0, 206), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 172: (0, 141), 81: (0, 96), 82: (0, 106), 96: (0, 124)}, 175: {68: (1, {'@': 220}), 40: (1, {'@': 220}), 21: (1, {'@': 220}), 48: (1, {'@': 220}), 59: (1, {'@': 220}), 51: (1, {'@': 220}), 91: (1, {'@': 220}), 92: (1, {'@': 220}), 72: (1, {'@': 220}), 49: (1, {'@': 220}), 8: (1, {'@': 220}), 50: (1, {'@': 220}), 82: (1, {'@': 220}), 93: (1, {'@': 220}), 94: (1, {'@': 220}), 95: (1, {'@': 220}), 41: (1, {'@': 220}), 35: (1, {'@': 220}), 20: (1, {'@': 220}), 32: (1, {'@': 220}), 64: (1, {'@': 220}), 80: (1, {'@': 220}), 25: (1, {'@': 220}), 96: (1, {'@': 220}), 47: (1, {'@': 220}), 12: (1, {'@': 220}), 34: (1, {'@': 220}), 70: (1, {'@': 220}), 77: (1, {'@': 220}), 19: (1, {'@': 220}), 81: (1, {'@': 220}), 30: (1, {'@': 220}), 54: (1, {'@': 220}), 2: (1, {'@': 220}), 37: (1, {'@': 220}), 52: (1, {'@': 220}), 97: (1, {'@': 220}), 9: (1, {'@': 220}), 13: (1, {'@': 220}), 98: (1, {'@': 220}), 39: (1, {'@': 220})}, 176: {68: (1, {'@': 292}), 40: (1, {'@': 292}), 48: (1, {'@': 292}), 59: (1, {'@': 292}), 51: (1, {'@': 292}), 72: (1, {'@': 292}), 49: (1, {'@': 292}), 82: (1, {'@': 292}), 35: (1, {'@': 292}), 32: (1, {'@': 292}), 80: (1, {'@': 292}), 12: (1, {'@': 292}), 34: (1, {'@': 292}), 70: (1, {'@': 292}), 77: (1, {'@': 292}), 30: (1, {'@': 292}), 54: (1, {'@': 292}), 2: (1, {'@': 292}), 13: (1, {'@': 292})}, 177: {4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 162: (0, 560), 12: (0, 534), 13: (0, 541), 14: (0, 587), 16: (0, 229), 17: (0, 215), 163: (0, 247), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 173: (0, 432), 22: (0, 414), 23: (0, 332), 24: (0, 445), 25: (0, 442), 26: (0, 546), 27: (0, 317), 164: (0, 255), 28: (0, 201), 95: (0, 193), 37: (0, 187), 29: (0, 411), 31: (0, 454), 94: (0, 443), 32: (0, 422), 33: (0, 484), 34: (0, 483), 35: (0, 461), 93: (0, 472), 36: (0, 477), 30: (0, 519), 38: (0, 459), 165: (0, 499), 0: (0, 493), 40: (0, 508), 41: (0, 378), 174: (0, 556), 166: (0, 341), 167: (0, 571), 42: (0, 364), 43: (0, 531), 44: (0, 543), 45: (0, 336), 46: (0, 538), 47: (0, 576), 2: (0, 408), 15: (0, 516), 48: (0, 495), 168: (0, 175), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 97: (0, 184), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 63: (0, 245), 60: (0, 586), 61: (0, 326), 62: (0, 372), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 69: (0, 219), 169: (0, 302), 92: (0, 298), 70: (0, 296), 71: (0, 282), 170: (0, 274), 72: (0, 242), 73: (0, 235), 74: (0, 206), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 172: (0, 141), 81: (0, 96), 82: (0, 106), 171: (0, 110), 96: (0, 124), 39: (0, 21), 98: (1, {'@': 88})}, 178: {83: (0, 527), 89: (1, {'@': 355}), 39: (1, {'@': 355}), 86: (1, {'@': 355})}, 179: {40: (1, {'@': 303}), 48: (1, {'@': 303}), 89: (1, {'@': 303}), 105: (1, {'@': 303}), 119: (1, {'@': 303}), 106: (1, {'@': 303}), 107: (1, {'@': 303}), 120: (1, {'@': 303}), 83: (1, {'@': 303}), 72: (1, {'@': 303}), 121: (1, {'@': 303}), 139: (1, {'@': 303}), 122: (1, {'@': 303}), 123: (1, {'@': 303}), 109: (1, {'@': 303}), 124: (1, {'@': 303}), 94: (1, {'@': 303}), 138: (1, {'@': 303}), 125: (1, {'@': 303}), 126: (1, {'@': 303}), 127: (1, {'@': 303}), 39: (1, {'@': 303}), 64: (1, {'@': 303}), 110: (1, {'@': 303}), 128: (1, {'@': 303}), 111: (1, {'@': 303}), 129: (1, {'@': 303}), 130: (1, {'@': 303}), 112: (1, {'@': 303}), 113: (1, {'@': 303}), 131: (1, {'@': 303}), 114: (1, {'@': 303}), 12: (1, {'@': 303}), 132: (1, {'@': 303}), 115: (1, {'@': 303}), 99: (1, {'@': 303}), 133: (1, {'@': 303}), 116: (1, {'@': 303}), 134: (1, {'@': 303}), 135: (1, {'@': 303}), 117: (1, {'@': 303}), 52: (1, {'@': 303}), 136: (1, {'@': 303}), 137: (1, {'@': 303}), 118: (1, {'@': 303}), 86: (1, {'@': 303}), 108: (1, {'@': 303}), 84: (1, {'@': 303}), 103: (1, {'@': 303}), 95: (1, {'@': 303}), 102: (1, {'@': 303}), 2: (1, {'@': 303}), 88: (1, {'@': 303})}, 180: {86: (0, 78)}, 181: {122: (0, 567)}, 182: {88: (0, 369), 83: (1, {'@': 327}), 95: (1, {'@': 327})}, 183: {68: (1, {'@': 244}), 40: (1, {'@': 244}), 48: (1, {'@': 244}), 59: (1, {'@': 244}), 98: (1, {'@': 244}), 50: (1, {'@': 244}), 95: (1, {'@': 244}), 35: (1, {'@': 244}), 20: (1, {'@': 244}), 32: (1, {'@': 244}), 80: (1, {'@': 244}), 25: (1, {'@': 244}), 96: (1, {'@': 244}), 34: (1, {'@': 244}), 77: (1, {'@': 244}), 19: (1, {'@': 244}), 52: (1, {'@': 244}), 97: (1, {'@': 244}), 21: (1, {'@': 244}), 51: (1, {'@': 244}), 91: (1, {'@': 244}), 92: (1, {'@': 244}), 72: (1, {'@': 244}), 49: (1, {'@': 244}), 8: (1, {'@': 244}), 82: (1, {'@': 244}), 93: (1, {'@': 244}), 94: (1, {'@': 244}), 39: (1, {'@': 244}), 41: (1, {'@': 244}), 64: (1, {'@': 244}), 47: (1, {'@': 244}), 12: (1, {'@': 244}), 70: (1, {'@': 244}), 81: (1, {'@': 244}), 30: (1, {'@': 244}), 54: (1, {'@': 244}), 2: (1, {'@': 244}), 37: (1, {'@': 244}), 9: (1, {'@': 244}), 13: (1, {'@': 244}), 103: (1, {'@': 244}), 104: (1, {'@': 244})}, 184: {51: (0, 583), 4: (0, 289), 38: (0, 459), 43: (0, 258), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 175: (0, 359), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 85: (0, 395), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 185: {176: (0, 227), 177: (0, 312), 178: (0, 386), 95: (0, 533), 83: (0, 295), 179: (0, 371)}, 186: {89: (1, {'@': 455}), 105: (1, {'@': 455}), 119: (1, {'@': 455}), 107: (1, {'@': 455}), 120: (1, {'@': 455}), 108: (1, {'@': 455}), 83: (1, {'@': 455}), 103: (1, {'@': 455}), 121: (1, {'@': 455}), 122: (1, {'@': 455}), 123: (1, {'@': 455}), 84: (1, {'@': 455}), 109: (1, {'@': 455}), 94: (1, {'@': 455}), 86: (1, {'@': 455}), 95: (1, {'@': 455}), 125: (1, {'@': 455}), 126: (1, {'@': 455}), 39: (1, {'@': 455}), 64: (1, {'@': 455}), 128: (1, {'@': 455}), 129: (1, {'@': 455}), 102: (1, {'@': 455}), 113: (1, {'@': 455}), 131: (1, {'@': 455}), 114: (1, {'@': 455}), 118: (1, {'@': 455}), 132: (1, {'@': 455}), 115: (1, {'@': 455}), 133: (1, {'@': 455}), 116: (1, {'@': 455}), 2: (1, {'@': 455}), 134: (1, {'@': 455}), 135: (1, {'@': 455}), 117: (1, {'@': 455}), 136: (1, {'@': 455}), 88: (1, {'@': 455}), 138: (1, {'@': 455})}, 187: {79: (0, 69), 0: (0, 494), 180: (0, 197), 55: (0, 267), 12: (0, 561), 37: (0, 212), 73: (0, 410), 52: (0, 284), 2: (0, 408)}, 188: {84: (0, 238)}, 189: {181: (0, 178), 83: (0, 345), 89: (1, {'@': 352}), 39: (1, {'@': 352}), 86: (1, {'@': 352})}, 190: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 86: (0, 487), 5: (0, 387), 182: (0, 18), 6: (0, 390), 56: (0, 224), 150: (0, 46), 13: (0, 541), 57: (0, 230), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 43: (0, 81), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 48: (0, 495), 82: (0, 106), 49: (0, 579)}, 191: {89: (1, {'@': 185}), 39: (1, {'@': 185})}, 192: {51: (0, 583), 12: (0, 262), 22: (0, 99), 52: (0, 515), 4: (0, 289), 29: (0, 411), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 2: (0, 408), 68: (0, 250), 27: (0, 90), 28: (0, 201), 48: (0, 495), 82: (0, 106), 49: (0, 579), 32: (0, 422), 122: (1, {'@': 346})}, 193: {51: (0, 583), 52: (0, 515), 4: (0, 289), 38: (0, 459), 54: (0, 330), 6: (0, 390), 56: (0, 224), 13: (0, 541), 22: (0, 325), 27: (0, 308), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 23: (0, 332), 61: (0, 326), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 183: (0, 181), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 194: {142: (0, 294), 51: (0, 583), 4: (0, 289), 38: (0, 459), 99: (0, 98), 43: (0, 304), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 141: (0, 217), 184: (0, 346), 13: (0, 541), 57: (0, 230), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 88: (0, 482), 29: (0, 411), 185: (0, 248), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 144: (0, 339), 52: (0, 375), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 48: (0, 495), 82: (0, 106), 143: (0, 545), 49: (0, 579)}, 195: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 153: (0, 10), 5: (0, 387), 6: (0, 390), 56: (0, 224), 43: (0, 13), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 152: (0, 30), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 39: (0, 35), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 196: {86: (1, {'@': 114}), 83: (1, {'@': 114})}, 197: {40: (0, 264), 2: (0, 408), 0: (0, 333)}, 198: {52: (0, 284), 73: (0, 272), 12: (0, 561), 37: (0, 212), 2: (0, 408), 79: (0, 69), 0: (0, 220), 55: (0, 267)}, 199: {88: (1, {'@': 415}), 84: (1, {'@': 415})}, 200: {40: (1, {'@': 305}), 48: (1, {'@': 305}), 89: (1, {'@': 305}), 105: (1, {'@': 305}), 119: (1, {'@': 305}), 106: (1, {'@': 305}), 107: (1, {'@': 305}), 120: (1, {'@': 305}), 83: (1, {'@': 305}), 72: (1, {'@': 305}), 121: (1, {'@': 305}), 139: (1, {'@': 305}), 122: (1, {'@': 305}), 123: (1, {'@': 305}), 109: (1, {'@': 305}), 124: (1, {'@': 305}), 94: (1, {'@': 305}), 138: (1, {'@': 305}), 125: (1, {'@': 305}), 126: (1, {'@': 305}), 127: (1, {'@': 305}), 39: (1, {'@': 305}), 64: (1, {'@': 305}), 110: (1, {'@': 305}), 128: (1, {'@': 305}), 111: (1, {'@': 305}), 129: (1, {'@': 305}), 130: (1, {'@': 305}), 112: (1, {'@': 305}), 113: (1, {'@': 305}), 131: (1, {'@': 305}), 114: (1, {'@': 305}), 12: (1, {'@': 305}), 132: (1, {'@': 305}), 115: (1, {'@': 305}), 99: (1, {'@': 305}), 133: (1, {'@': 305}), 116: (1, {'@': 305}), 134: (1, {'@': 305}), 135: (1, {'@': 305}), 117: (1, {'@': 305}), 52: (1, {'@': 305}), 136: (1, {'@': 305}), 137: (1, {'@': 305}), 118: (1, {'@': 305}), 86: (1, {'@': 305}), 108: (1, {'@': 305}), 84: (1, {'@': 305}), 103: (1, {'@': 305}), 95: (1, {'@': 305}), 102: (1, {'@': 305}), 2: (1, {'@': 305}), 88: (1, {'@': 305})}, 201: {125: (1, {'@': 260}), 126: (1, {'@': 260}), 105: (1, {'@': 260}), 39: (1, {'@': 260}), 89: (1, {'@': 260}), 64: (1, {'@': 260}), 128: (1, {'@': 260}), 129: (1, {'@': 260}), 119: (1, {'@': 260}), 107: (1, {'@': 260}), 120: (1, {'@': 260}), 113: (1, {'@': 260}), 131: (1, {'@': 260}), 114: (1, {'@': 260}), 83: (1, {'@': 260}), 118: (1, {'@': 260}), 132: (1, {'@': 260}), 115: (1, {'@': 260}), 133: (1, {'@': 260}), 116: (1, {'@': 260}), 121: (1, {'@': 260}), 122: (1, {'@': 260}), 123: (1, {'@': 260}), 134: (1, {'@': 260}), 135: (1, {'@': 260}), 117: (1, {'@': 260}), 136: (1, {'@': 260}), 94: (1, {'@': 260}), 138: (1, {'@': 260}), 86: (1, {'@': 260}), 108: (1, {'@': 260}), 84: (1, {'@': 260}), 103: (1, {'@': 260}), 95: (1, {'@': 260}), 102: (1, {'@': 260}), 2: (1, {'@': 260}), 88: (1, {'@': 260})}, 202: {89: (1, {'@': 146}), 39: (1, {'@': 146})}, 203: {186: (0, 502), 127: (0, 225), 111: (0, 218), 89: (1, {'@': 267}), 105: (1, {'@': 267}), 119: (1, {'@': 267}), 106: (1, {'@': 267}), 107: (1, {'@': 267}), 120: (1, {'@': 267}), 83: (1, {'@': 267}), 121: (1, {'@': 267}), 122: (1, {'@': 267}), 123: (1, {'@': 267}), 109: (1, {'@': 267}), 94: (1, {'@': 267}), 138: (1, {'@': 267}), 125: (1, {'@': 267}), 126: (1, {'@': 267}), 39: (1, {'@': 267}), 64: (1, {'@': 267}), 128: (1, {'@': 267}), 129: (1, {'@': 267}), 130: (1, {'@': 267}), 113: (1, {'@': 267}), 131: (1, {'@': 267}), 114: (1, {'@': 267}), 132: (1, {'@': 267}), 115: (1, {'@': 267}), 133: (1, {'@': 267}), 116: (1, {'@': 267}), 134: (1, {'@': 267}), 135: (1, {'@': 267}), 117: (1, {'@': 267}), 136: (1, {'@': 267}), 118: (1, {'@': 267}), 86: (1, {'@': 267}), 108: (1, {'@': 267}), 84: (1, {'@': 267}), 103: (1, {'@': 267}), 95: (1, {'@': 267}), 102: (1, {'@': 267}), 2: (1, {'@': 267}), 88: (1, {'@': 267})}, 204: {103: (0, 488)}, 205: {39: (1, {'@': 100}), 89: (1, {'@': 100}), 128: (1, {'@': 100}), 129: (1, {'@': 100}), 119: (1, {'@': 100}), 107: (1, {'@': 100}), 120: (1, {'@': 100}), 113: (1, {'@': 100}), 114: (1, {'@': 100}), 83: (1, {'@': 100}), 133: (1, {'@': 100}), 123: (1, {'@': 100}), 134: (1, {'@': 100}), 135: (1, {'@': 100}), 117: (1, {'@': 100}), 136: (1, {'@': 100}), 118: (1, {'@': 100}), 86: (1, {'@': 100}), 108: (1, {'@': 100}), 88: (1, {'@': 100}), 2: (1, {'@': 100}), 102: (1, {'@': 100}), 95: (1, {'@': 100}), 84: (1, {'@': 100})}, 206: {89: (1, {'@': 137}), 39: (1, {'@': 137})}, 207: {51: (0, 583), 12: (0, 262), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 56: (0, 224), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 6: (0, 362), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 2: (0, 408), 68: (0, 250), 82: (0, 106), 48: (0, 495), 49: (0, 579), 32: (0, 422)}, 208: {40: (0, 276), 90: (0, 402), 52: (0, 334), 2: (0, 408), 87: (0, 265), 0: (0, 537)}, 209: {89: (1, {'@': 458}), 105: (1, {'@': 458}), 107: (1, {'@': 458}), 108: (1, {'@': 458}), 83: (1, {'@': 458}), 103: (1, {'@': 458}), 84: (1, {'@': 458}), 109: (1, {'@': 458}), 95: (1, {'@': 458}), 113: (1, {'@': 458}), 114: (1, {'@': 458}), 115: (1, {'@': 458}), 116: (1, {'@': 458}), 88: (1, {'@': 458}), 117: (1, {'@': 458}), 118: (1, {'@': 458}), 119: (1, {'@': 458}), 120: (1, {'@': 458}), 121: (1, {'@': 458}), 122: (1, {'@': 458}), 123: (1, {'@': 458}), 94: (1, {'@': 458}), 86: (1, {'@': 458}), 125: (1, {'@': 458}), 126: (1, {'@': 458}), 39: (1, {'@': 458}), 64: (1, {'@': 458}), 128: (1, {'@': 458}), 129: (1, {'@': 458}), 130: (1, {'@': 458}), 102: (1, {'@': 458}), 131: (1, {'@': 458}), 132: (1, {'@': 458}), 133: (1, {'@': 458}), 2: (1, {'@': 458}), 134: (1, {'@': 458}), 135: (1, {'@': 458}), 136: (1, {'@': 458}), 138: (1, {'@': 458})}, 210: {89: (1, {'@': 188}), 39: (1, {'@': 188})}, 211: {68: (1, {'@': 169}), 40: (1, {'@': 169}), 21: (1, {'@': 169}), 48: (1, {'@': 169}), 59: (1, {'@': 169}), 51: (1, {'@': 169}), 72: (1, {'@': 169}), 49: (1, {'@': 169}), 82: (1, {'@': 169}), 64: (1, {'@': 169}), 35: (1, {'@': 169}), 32: (1, {'@': 169}), 80: (1, {'@': 169}), 12: (1, {'@': 169}), 34: (1, {'@': 169}), 70: (1, {'@': 169}), 77: (1, {'@': 169}), 30: (1, {'@': 169}), 54: (1, {'@': 169}), 2: (1, {'@': 169}), 13: (1, {'@': 169})}, 212: {52: (0, 284), 180: (0, 419), 12: (0, 561), 37: (0, 212), 2: (0, 408), 79: (0, 69), 0: (0, 220), 55: (0, 267), 73: (0, 410)}, 213: {39: (1, {'@': 440}), 89: (1, {'@': 440}), 139: (1, {'@': 440}), 47: (1, {'@': 440}), 108: (1, {'@': 440}), 83: (1, {'@': 440})}, 214: {86: (0, 91)}, 215: {40: (1, {'@': 317}), 48: (1, {'@': 317}), 89: (1, {'@': 317}), 105: (1, {'@': 317}), 119: (1, {'@': 317}), 106: (1, {'@': 317}), 107: (1, {'@': 317}), 120: (1, {'@': 317}), 83: (1, {'@': 317}), 72: (1, {'@': 317}), 121: (1, {'@': 317}), 139: (1, {'@': 317}), 122: (1, {'@': 317}), 123: (1, {'@': 317}), 109: (1, {'@': 317}), 124: (1, {'@': 317}), 94: (1, {'@': 317}), 138: (1, {'@': 317}), 125: (1, {'@': 317}), 126: (1, {'@': 317}), 127: (1, {'@': 317}), 39: (1, {'@': 317}), 64: (1, {'@': 317}), 110: (1, {'@': 317}), 128: (1, {'@': 317}), 111: (1, {'@': 317}), 129: (1, {'@': 317}), 130: (1, {'@': 317}), 112: (1, {'@': 317}), 113: (1, {'@': 317}), 131: (1, {'@': 317}), 114: (1, {'@': 317}), 12: (1, {'@': 317}), 132: (1, {'@': 317}), 115: (1, {'@': 317}), 99: (1, {'@': 317}), 133: (1, {'@': 317}), 116: (1, {'@': 317}), 134: (1, {'@': 317}), 135: (1, {'@': 317}), 117: (1, {'@': 317}), 52: (1, {'@': 317}), 136: (1, {'@': 317}), 137: (1, {'@': 317}), 118: (1, {'@': 317}), 86: (1, {'@': 317}), 108: (1, {'@': 317}), 84: (1, {'@': 317}), 103: (1, {'@': 317}), 95: (1, {'@': 317}), 102: (1, {'@': 317}), 2: (1, {'@': 317}), 88: (1, {'@': 317})}, 216: {89: (1, {'@': 462}), 105: (1, {'@': 462}), 106: (1, {'@': 462}), 107: (1, {'@': 462}), 108: (1, {'@': 462}), 83: (1, {'@': 462}), 103: (1, {'@': 462}), 84: (1, {'@': 462}), 109: (1, {'@': 462}), 95: (1, {'@': 462}), 111: (1, {'@': 462}), 113: (1, {'@': 462}), 114: (1, {'@': 462}), 115: (1, {'@': 462}), 116: (1, {'@': 462}), 117: (1, {'@': 462}), 88: (1, {'@': 462}), 118: (1, {'@': 462}), 119: (1, {'@': 462}), 120: (1, {'@': 462}), 121: (1, {'@': 462}), 122: (1, {'@': 462}), 123: (1, {'@': 462}), 94: (1, {'@': 462}), 86: (1, {'@': 462}), 125: (1, {'@': 462}), 126: (1, {'@': 462}), 127: (1, {'@': 462}), 39: (1, {'@': 462}), 64: (1, {'@': 462}), 128: (1, {'@': 462}), 129: (1, {'@': 462}), 130: (1, {'@': 462}), 102: (1, {'@': 462}), 131: (1, {'@': 462}), 132: (1, {'@': 462}), 133: (1, {'@': 462}), 2: (1, {'@': 462}), 134: (1, {'@': 462}), 135: (1, {'@': 462}), 136: (1, {'@': 462}), 138: (1, {'@': 462})}, 217: {156: (0, 400), 83: (0, 42), 88: (1, {'@': 382})}, 218: {68: (1, {'@': 280}), 40: (1, {'@': 280}), 48: (1, {'@': 280}), 59: (1, {'@': 280}), 51: (1, {'@': 280}), 72: (1, {'@': 280}), 49: (1, {'@': 280}), 82: (1, {'@': 280}), 35: (1, {'@': 280}), 32: (1, {'@': 280}), 80: (1, {'@': 280}), 12: (1, {'@': 280}), 34: (1, {'@': 280}), 70: (1, {'@': 280}), 77: (1, {'@': 280}), 30: (1, {'@': 280}), 54: (1, {'@': 280}), 2: (1, {'@': 280}), 13: (1, {'@': 280})}, 219: {89: (1, {'@': 139}), 39: (1, {'@': 139})}, 220: {40: (1, {'@': 153}), 187: (1, {'@': 153}), 2: (1, {'@': 153})}, 221: {188: (0, 344), 94: (0, 352), 84: (1, {'@': 414})}, 222: {125: (0, 300), 116: (0, 226), 131: (0, 307), 138: (0, 290), 105: (0, 176), 64: (0, 287), 189: (0, 417), 121: (0, 104), 115: (0, 51), 122: (0, 58), 126: (1, {'@': 257}), 39: (1, {'@': 257}), 89: (1, {'@': 257}), 128: (1, {'@': 257}), 129: (1, {'@': 257}), 119: (1, {'@': 257}), 107: (1, {'@': 257}), 120: (1, {'@': 257}), 113: (1, {'@': 257}), 114: (1, {'@': 257}), 83: (1, {'@': 257}), 132: (1, {'@': 257}), 133: (1, {'@': 257}), 123: (1, {'@': 257}), 134: (1, {'@': 257}), 135: (1, {'@': 257}), 117: (1, {'@': 257}), 136: (1, {'@': 257}), 94: (1, {'@': 257}), 118: (1, {'@': 257}), 86: (1, {'@': 257}), 108: (1, {'@': 257}), 88: (1, {'@': 257}), 95: (1, {'@': 257}), 102: (1, {'@': 257}), 103: (1, {'@': 257}), 84: (1, {'@': 257}), 2: (1, {'@': 257})}, 223: {86: (0, 470)}, 224: {124: (0, 251), 190: (0, 403), 112: (0, 501), 52: (0, 426), 191: (0, 315), 110: (0, 504), 137: (0, 335), 48: (1, {'@': 272}), 89: (1, {'@': 272}), 105: (1, {'@': 272}), 119: (1, {'@': 272}), 106: (1, {'@': 272}), 107: (1, {'@': 272}), 120: (1, {'@': 272}), 83: (1, {'@': 272}), 72: (1, {'@': 272}), 121: (1, {'@': 272}), 122: (1, {'@': 272}), 123: (1, {'@': 272}), 109: (1, {'@': 272}), 94: (1, {'@': 272}), 138: (1, {'@': 272}), 125: (1, {'@': 272}), 126: (1, {'@': 272}), 127: (1, {'@': 272}), 39: (1, {'@': 272}), 64: (1, {'@': 272}), 128: (1, {'@': 272}), 111: (1, {'@': 272}), 129: (1, {'@': 272}), 130: (1, {'@': 272}), 113: (1, {'@': 272}), 131: (1, {'@': 272}), 114: (1, {'@': 272}), 132: (1, {'@': 272}), 115: (1, {'@': 272}), 133: (1, {'@': 272}), 116: (1, {'@': 272}), 134: (1, {'@': 272}), 135: (1, {'@': 272}), 117: (1, {'@': 272}), 136: (1, {'@': 272}), 118: (1, {'@': 272}), 86: (1, {'@': 272}), 108: (1, {'@': 272}), 84: (1, {'@': 272}), 103: (1, {'@': 272}), 95: (1, {'@': 272}), 102: (1, {'@': 272}), 2: (1, {'@': 272}), 88: (1, {'@': 272})}, 225: {68: (1, {'@': 281}), 40: (1, {'@': 281}), 48: (1, {'@': 281}), 59: (1, {'@': 281}), 51: (1, {'@': 281}), 72: (1, {'@': 281}), 49: (1, {'@': 281}), 82: (1, {'@': 281}), 35: (1, {'@': 281}), 32: (1, {'@': 281}), 80: (1, {'@': 281}), 12: (1, {'@': 281}), 34: (1, {'@': 281}), 70: (1, {'@': 281}), 77: (1, {'@': 281}), 30: (1, {'@': 281}), 54: (1, {'@': 281}), 2: (1, {'@': 281}), 13: (1, {'@': 281})}, 226: {68: (1, {'@': 290}), 40: (1, {'@': 290}), 48: (1, {'@': 290}), 59: (1, {'@': 290}), 51: (1, {'@': 290}), 72: (1, {'@': 290}), 49: (1, {'@': 290}), 82: (1, {'@': 290}), 35: (1, {'@': 290}), 32: (1, {'@': 290}), 80: (1, {'@': 290}), 12: (1, {'@': 290}), 34: (1, {'@': 290}), 70: (1, {'@': 290}), 77: (1, {'@': 290}), 30: (1, {'@': 290}), 54: (1, {'@': 290}), 2: (1, {'@': 290}), 13: (1, {'@': 290})}, 227: {83: (0, 542), 88: (1, {'@': 325})}, 228: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 154: (0, 80), 57: (0, 230), 13: (0, 541), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 14: (0, 47), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 21: (0, 54), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 155: (0, 55), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 229: {99: (0, 383), 12: (0, 190), 40: (0, 194), 139: (0, 323), 48: (1, {'@': 298}), 89: (1, {'@': 298}), 105: (1, {'@': 298}), 119: (1, {'@': 298}), 106: (1, {'@': 298}), 107: (1, {'@': 298}), 120: (1, {'@': 298}), 83: (1, {'@': 298}), 72: (1, {'@': 298}), 121: (1, {'@': 298}), 122: (1, {'@': 298}), 123: (1, {'@': 298}), 109: (1, {'@': 298}), 124: (1, {'@': 298}), 94: (1, {'@': 298}), 125: (1, {'@': 298}), 126: (1, {'@': 298}), 127: (1, {'@': 298}), 39: (1, {'@': 298}), 64: (1, {'@': 298}), 110: (1, {'@': 298}), 128: (1, {'@': 298}), 111: (1, {'@': 298}), 129: (1, {'@': 298}), 130: (1, {'@': 298}), 112: (1, {'@': 298}), 113: (1, {'@': 298}), 131: (1, {'@': 298}), 114: (1, {'@': 298}), 118: (1, {'@': 298}), 132: (1, {'@': 298}), 115: (1, {'@': 298}), 133: (1, {'@': 298}), 116: (1, {'@': 298}), 134: (1, {'@': 298}), 135: (1, {'@': 298}), 117: (1, {'@': 298}), 52: (1, {'@': 298}), 136: (1, {'@': 298}), 137: (1, {'@': 298}), 138: (1, {'@': 298}), 86: (1, {'@': 298}), 108: (1, {'@': 298}), 84: (1, {'@': 298}), 103: (1, {'@': 298}), 95: (1, {'@': 298}), 102: (1, {'@': 298}), 2: (1, {'@': 298}), 88: (1, {'@': 298})}, 230: {192: (0, 311), 126: (0, 452), 39: (1, {'@': 254}), 89: (1, {'@': 254}), 128: (1, {'@': 254}), 129: (1, {'@': 254}), 119: (1, {'@': 254}), 107: (1, {'@': 254}), 120: (1, {'@': 254}), 113: (1, {'@': 254}), 114: (1, {'@': 254}), 83: (1, {'@': 254}), 132: (1, {'@': 254}), 133: (1, {'@': 254}), 123: (1, {'@': 254}), 134: (1, {'@': 254}), 135: (1, {'@': 254}), 117: (1, {'@': 254}), 136: (1, {'@': 254}), 94: (1, {'@': 254}), 118: (1, {'@': 254}), 86: (1, {'@': 254}), 108: (1, {'@': 254}), 88: (1, {'@': 254}), 95: (1, {'@': 254}), 102: (1, {'@': 254}), 103: (1, {'@': 254}), 84: (1, {'@': 254}), 2: (1, {'@': 254})}, 231: {86: (1, {'@': 112})}, 232: {68: (1, {'@': 163}), 40: (1, {'@': 163}), 21: (1, {'@': 163}), 48: (1, {'@': 163}), 59: (1, {'@': 163}), 51: (1, {'@': 163}), 72: (1, {'@': 163}), 49: (1, {'@': 163}), 82: (1, {'@': 163}), 64: (1, {'@': 163}), 35: (1, {'@': 163}), 32: (1, {'@': 163}), 80: (1, {'@': 163}), 12: (1, {'@': 163}), 34: (1, {'@': 163}), 70: (1, {'@': 163}), 77: (1, {'@': 163}), 30: (1, {'@': 163}), 54: (1, {'@': 163}), 2: (1, {'@': 163}), 13: (1, {'@': 163})}, 233: {68: (1, {'@': 170}), 40: (1, {'@': 170}), 21: (1, {'@': 170}), 48: (1, {'@': 170}), 59: (1, {'@': 170}), 51: (1, {'@': 170}), 72: (1, {'@': 170}), 49: (1, {'@': 170}), 82: (1, {'@': 170}), 64: (1, {'@': 170}), 35: (1, {'@': 170}), 32: (1, {'@': 170}), 80: (1, {'@': 170}), 12: (1, {'@': 170}), 34: (1, {'@': 170}), 70: (1, {'@': 170}), 77: (1, {'@': 170}), 30: (1, {'@': 170}), 54: (1, {'@': 170}), 2: (1, {'@': 170}), 13: (1, {'@': 170})}, 234: {83: (1, {'@': 472}), 122: (1, {'@': 472})}, 235: {0: (0, 301), 2: (0, 408)}, 236: {89: (1, {'@': 353}), 39: (1, {'@': 353}), 86: (1, {'@': 353})}, 237: {4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 12: (0, 534), 11: (0, 479), 13: (0, 541), 14: (0, 587), 15: (0, 183), 16: (0, 229), 17: (0, 215), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 22: (0, 414), 23: (0, 332), 24: (0, 445), 25: (0, 442), 26: (0, 546), 27: (0, 317), 28: (0, 201), 29: (0, 411), 30: (0, 519), 31: (0, 574), 32: (0, 422), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 37: (0, 212), 38: (0, 459), 39: (0, 404), 0: (0, 493), 40: (0, 508), 41: (0, 378), 42: (0, 364), 43: (0, 531), 44: (0, 543), 45: (0, 336), 46: (0, 538), 2: (0, 408), 47: (0, 576), 48: (0, 495), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 60: (0, 586), 61: (0, 326), 62: (0, 372), 63: (0, 536), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 69: (0, 219), 70: (0, 296), 71: (0, 282), 72: (0, 242), 73: (0, 235), 74: (0, 206), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 81: (0, 96), 82: (0, 106)}, 238: {40: (1, {'@': 310}), 48: (1, {'@': 310}), 89: (1, {'@': 310}), 105: (1, {'@': 310}), 119: (1, {'@': 310}), 106: (1, {'@': 310}), 107: (1, {'@': 310}), 120: (1, {'@': 310}), 83: (1, {'@': 310}), 72: (1, {'@': 310}), 121: (1, {'@': 310}), 139: (1, {'@': 310}), 122: (1, {'@': 310}), 123: (1, {'@': 310}), 109: (1, {'@': 310}), 124: (1, {'@': 310}), 94: (1, {'@': 310}), 138: (1, {'@': 310}), 125: (1, {'@': 310}), 126: (1, {'@': 310}), 127: (1, {'@': 310}), 39: (1, {'@': 310}), 64: (1, {'@': 310}), 110: (1, {'@': 310}), 128: (1, {'@': 310}), 111: (1, {'@': 310}), 129: (1, {'@': 310}), 130: (1, {'@': 310}), 112: (1, {'@': 310}), 113: (1, {'@': 310}), 131: (1, {'@': 310}), 114: (1, {'@': 310}), 12: (1, {'@': 310}), 132: (1, {'@': 310}), 115: (1, {'@': 310}), 99: (1, {'@': 310}), 133: (1, {'@': 310}), 116: (1, {'@': 310}), 134: (1, {'@': 310}), 135: (1, {'@': 310}), 117: (1, {'@': 310}), 52: (1, {'@': 310}), 136: (1, {'@': 310}), 137: (1, {'@': 310}), 118: (1, {'@': 310}), 86: (1, {'@': 310}), 108: (1, {'@': 310}), 84: (1, {'@': 310}), 103: (1, {'@': 310}), 95: (1, {'@': 310}), 102: (1, {'@': 310}), 2: (1, {'@': 310}), 88: (1, {'@': 310})}, 239: {51: (0, 583), 52: (0, 515), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 27: (0, 317), 28: (0, 201), 29: (0, 411), 31: (0, 574), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 43: (0, 531), 44: (0, 543), 7: (0, 563), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 240: {107: (0, 505), 89: (1, {'@': 160}), 39: (1, {'@': 160})}, 241: {86: (1, {'@': 315}), 40: (1, {'@': 315}), 48: (1, {'@': 315}), 125: (1, {'@': 315}), 126: (1, {'@': 315}), 127: (1, {'@': 315}), 105: (1, {'@': 315}), 64: (1, {'@': 315}), 110: (1, {'@': 315}), 111: (1, {'@': 315}), 130: (1, {'@': 315}), 106: (1, {'@': 315}), 112: (1, {'@': 315}), 108: (1, {'@': 315}), 131: (1, {'@': 315}), 83: (1, {'@': 315}), 12: (1, {'@': 315}), 72: (1, {'@': 315}), 132: (1, {'@': 315}), 115: (1, {'@': 315}), 99: (1, {'@': 315}), 116: (1, {'@': 315}), 121: (1, {'@': 315}), 139: (1, {'@': 315}), 122: (1, {'@': 315}), 109: (1, {'@': 315}), 52: (1, {'@': 315}), 137: (1, {'@': 315}), 124: (1, {'@': 315}), 94: (1, {'@': 315}), 138: (1, {'@': 315}), 84: (1, {'@': 315}), 89: (1, {'@': 315}), 119: (1, {'@': 315}), 107: (1, {'@': 315}), 120: (1, {'@': 315}), 103: (1, {'@': 315}), 123: (1, {'@': 315}), 95: (1, {'@': 315}), 39: (1, {'@': 315}), 128: (1, {'@': 315}), 129: (1, {'@': 315}), 102: (1, {'@': 315}), 113: (1, {'@': 315}), 114: (1, {'@': 315}), 133: (1, {'@': 315}), 2: (1, {'@': 315}), 134: (1, {'@': 315}), 135: (1, {'@': 315}), 88: (1, {'@': 315}), 117: (1, {'@': 315}), 136: (1, {'@': 315}), 118: (1, {'@': 315})}, 242: {68: (1, {'@': 275}), 40: (1, {'@': 275}), 48: (1, {'@': 275}), 59: (1, {'@': 275}), 51: (1, {'@': 275}), 72: (1, {'@': 275}), 49: (1, {'@': 275}), 82: (1, {'@': 275}), 35: (1, {'@': 275}), 32: (1, {'@': 275}), 80: (1, {'@': 275}), 12: (1, {'@': 275}), 34: (1, {'@': 275}), 70: (1, {'@': 275}), 77: (1, {'@': 275}), 30: (1, {'@': 275}), 54: (1, {'@': 275}), 2: (1, {'@': 275}), 13: (1, {'@': 275})}, 243: {68: (1, {'@': 171}), 40: (1, {'@': 171}), 21: (1, {'@': 171}), 48: (1, {'@': 171}), 59: (1, {'@': 171}), 51: (1, {'@': 171}), 72: (1, {'@': 171}), 49: (1, {'@': 171}), 82: (1, {'@': 171}), 64: (1, {'@': 171}), 35: (1, {'@': 171}), 32: (1, {'@': 171}), 80: (1, {'@': 171}), 12: (1, {'@': 171}), 34: (1, {'@': 171}), 70: (1, {'@': 171}), 77: (1, {'@': 171}), 30: (1, {'@': 171}), 54: (1, {'@': 171}), 2: (1, {'@': 171}), 13: (1, {'@': 171})}, 244: {107: (1, {'@': 430}), 39: (1, {'@': 430}), 89: (1, {'@': 430})}, 245: {193: (0, 436), 107: (0, 239), 68: (1, {'@': 243}), 40: (1, {'@': 243}), 21: (1, {'@': 243}), 48: (1, {'@': 243}), 59: (1, {'@': 243}), 51: (1, {'@': 243}), 91: (1, {'@': 243}), 92: (1, {'@': 243}), 72: (1, {'@': 243}), 49: (1, {'@': 243}), 8: (1, {'@': 243}), 50: (1, {'@': 243}), 82: (1, {'@': 243}), 93: (1, {'@': 243}), 94: (1, {'@': 243}), 95: (1, {'@': 243}), 41: (1, {'@': 243}), 35: (1, {'@': 243}), 20: (1, {'@': 243}), 32: (1, {'@': 243}), 64: (1, {'@': 243}), 80: (1, {'@': 243}), 25: (1, {'@': 243}), 96: (1, {'@': 243}), 47: (1, {'@': 243}), 12: (1, {'@': 243}), 34: (1, {'@': 243}), 70: (1, {'@': 243}), 77: (1, {'@': 243}), 19: (1, {'@': 243}), 81: (1, {'@': 243}), 30: (1, {'@': 243}), 54: (1, {'@': 243}), 2: (1, {'@': 243}), 37: (1, {'@': 243}), 52: (1, {'@': 243}), 97: (1, {'@': 243}), 9: (1, {'@': 243}), 13: (1, {'@': 243}), 98: (1, {'@': 243}), 39: (1, {'@': 243})}, 246: {48: (1, {'@': 464}), 89: (1, {'@': 464}), 105: (1, {'@': 464}), 106: (1, {'@': 464}), 107: (1, {'@': 464}), 108: (1, {'@': 464}), 83: (1, {'@': 464}), 103: (1, {'@': 464}), 84: (1, {'@': 464}), 109: (1, {'@': 464}), 95: (1, {'@': 464}), 111: (1, {'@': 464}), 113: (1, {'@': 464}), 114: (1, {'@': 464}), 115: (1, {'@': 464}), 116: (1, {'@': 464}), 117: (1, {'@': 464}), 88: (1, {'@': 464}), 118: (1, {'@': 464}), 119: (1, {'@': 464}), 120: (1, {'@': 464}), 72: (1, {'@': 464}), 121: (1, {'@': 464}), 122: (1, {'@': 464}), 123: (1, {'@': 464}), 94: (1, {'@': 464}), 86: (1, {'@': 464}), 125: (1, {'@': 464}), 126: (1, {'@': 464}), 127: (1, {'@': 464}), 39: (1, {'@': 464}), 64: (1, {'@': 464}), 128: (1, {'@': 464}), 129: (1, {'@': 464}), 130: (1, {'@': 464}), 102: (1, {'@': 464}), 131: (1, {'@': 464}), 132: (1, {'@': 464}), 133: (1, {'@': 464}), 2: (1, {'@': 464}), 134: (1, {'@': 464}), 135: (1, {'@': 464}), 136: (1, {'@': 464}), 138: (1, {'@': 464})}, 247: {68: (1, {'@': 225}), 40: (1, {'@': 225}), 21: (1, {'@': 225}), 48: (1, {'@': 225}), 59: (1, {'@': 225}), 51: (1, {'@': 225}), 91: (1, {'@': 225}), 92: (1, {'@': 225}), 72: (1, {'@': 225}), 49: (1, {'@': 225}), 8: (1, {'@': 225}), 50: (1, {'@': 225}), 82: (1, {'@': 225}), 93: (1, {'@': 225}), 94: (1, {'@': 225}), 95: (1, {'@': 225}), 41: (1, {'@': 225}), 35: (1, {'@': 225}), 20: (1, {'@': 225}), 32: (1, {'@': 225}), 64: (1, {'@': 225}), 80: (1, {'@': 225}), 25: (1, {'@': 225}), 96: (1, {'@': 225}), 47: (1, {'@': 225}), 12: (1, {'@': 225}), 34: (1, {'@': 225}), 70: (1, {'@': 225}), 77: (1, {'@': 225}), 19: (1, {'@': 225}), 81: (1, {'@': 225}), 30: (1, {'@': 225}), 54: (1, {'@': 225}), 2: (1, {'@': 225}), 37: (1, {'@': 225}), 52: (1, {'@': 225}), 97: (1, {'@': 225}), 9: (1, {'@': 225}), 13: (1, {'@': 225}), 98: (1, {'@': 225}), 39: (1, {'@': 225})}, 248: {88: (0, 467)}, 249: {88: (1, {'@': 375})}, 250: {40: (1, {'@': 407}), 48: (1, {'@': 407}), 89: (1, {'@': 407}), 105: (1, {'@': 407}), 119: (1, {'@': 407}), 106: (1, {'@': 407}), 107: (1, {'@': 407}), 120: (1, {'@': 407}), 83: (1, {'@': 407}), 72: (1, {'@': 407}), 121: (1, {'@': 407}), 139: (1, {'@': 407}), 122: (1, {'@': 407}), 123: (1, {'@': 407}), 109: (1, {'@': 407}), 124: (1, {'@': 407}), 94: (1, {'@': 407}), 138: (1, {'@': 407}), 125: (1, {'@': 407}), 126: (1, {'@': 407}), 127: (1, {'@': 407}), 39: (1, {'@': 407}), 64: (1, {'@': 407}), 110: (1, {'@': 407}), 128: (1, {'@': 407}), 111: (1, {'@': 407}), 129: (1, {'@': 407}), 130: (1, {'@': 407}), 112: (1, {'@': 407}), 113: (1, {'@': 407}), 131: (1, {'@': 407}), 114: (1, {'@': 407}), 12: (1, {'@': 407}), 132: (1, {'@': 407}), 115: (1, {'@': 407}), 99: (1, {'@': 407}), 133: (1, {'@': 407}), 116: (1, {'@': 407}), 134: (1, {'@': 407}), 135: (1, {'@': 407}), 117: (1, {'@': 407}), 52: (1, {'@': 407}), 136: (1, {'@': 407}), 137: (1, {'@': 407}), 118: (1, {'@': 407}), 86: (1, {'@': 407}), 108: (1, {'@': 407}), 84: (1, {'@': 407}), 103: (1, {'@': 407}), 95: (1, {'@': 407}), 102: (1, {'@': 407}), 2: (1, {'@': 407}), 88: (1, {'@': 407})}, 251: {68: (1, {'@': 283}), 40: (1, {'@': 283}), 48: (1, {'@': 283}), 59: (1, {'@': 283}), 51: (1, {'@': 283}), 72: (1, {'@': 283}), 49: (1, {'@': 283}), 82: (1, {'@': 283}), 35: (1, {'@': 283}), 32: (1, {'@': 283}), 80: (1, {'@': 283}), 12: (1, {'@': 283}), 34: (1, {'@': 283}), 70: (1, {'@': 283}), 77: (1, {'@': 283}), 30: (1, {'@': 283}), 54: (1, {'@': 283}), 2: (1, {'@': 283}), 13: (1, {'@': 283})}, 252: {0: (0, 401), 3: (0, 149), 2: (0, 408), 1: (0, 348)}, 253: {52: (0, 284), 12: (0, 561), 37: (0, 212), 2: (0, 408), 73: (0, 355), 79: (0, 69), 0: (0, 220), 55: (0, 267)}, 254: {4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 12: (0, 534), 13: (0, 541), 14: (0, 587), 15: (0, 183), 16: (0, 229), 17: (0, 215), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 22: (0, 414), 23: (0, 332), 24: (0, 445), 25: (0, 442), 26: (0, 546), 27: (0, 317), 28: (0, 201), 29: (0, 411), 30: (0, 519), 31: (0, 574), 32: (0, 422), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 37: (0, 212), 38: (0, 459), 39: (0, 404), 0: (0, 493), 40: (0, 508), 41: (0, 378), 42: (0, 364), 43: (0, 531), 44: (0, 543), 45: (0, 336), 46: (0, 538), 2: (0, 408), 47: (0, 576), 48: (0, 495), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 60: (0, 586), 61: (0, 326), 62: (0, 372), 63: (0, 536), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 11: (0, 108), 69: (0, 219), 70: (0, 296), 71: (0, 282), 72: (0, 242), 73: (0, 235), 74: (0, 206), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 81: (0, 96), 82: (0, 106)}, 255: {68: (1, {'@': 227}), 40: (1, {'@': 227}), 21: (1, {'@': 227}), 48: (1, {'@': 227}), 59: (1, {'@': 227}), 51: (1, {'@': 227}), 91: (1, {'@': 227}), 92: (1, {'@': 227}), 72: (1, {'@': 227}), 49: (1, {'@': 227}), 8: (1, {'@': 227}), 50: (1, {'@': 227}), 82: (1, {'@': 227}), 93: (1, {'@': 227}), 94: (1, {'@': 227}), 95: (1, {'@': 227}), 41: (1, {'@': 227}), 35: (1, {'@': 227}), 20: (1, {'@': 227}), 32: (1, {'@': 227}), 64: (1, {'@': 227}), 80: (1, {'@': 227}), 25: (1, {'@': 227}), 96: (1, {'@': 227}), 47: (1, {'@': 227}), 12: (1, {'@': 227}), 34: (1, {'@': 227}), 70: (1, {'@': 227}), 77: (1, {'@': 227}), 19: (1, {'@': 227}), 81: (1, {'@': 227}), 30: (1, {'@': 227}), 54: (1, {'@': 227}), 2: (1, {'@': 227}), 37: (1, {'@': 227}), 52: (1, {'@': 227}), 97: (1, {'@': 227}), 9: (1, {'@': 227}), 13: (1, {'@': 227}), 98: (1, {'@': 227}), 39: (1, {'@': 227})}, 256: {68: (1, {'@': 372}), 40: (1, {'@': 372}), 48: (1, {'@': 372}), 21: (1, {'@': 372}), 59: (1, {'@': 372}), 51: (1, {'@': 372}), 98: (1, {'@': 372}), 91: (1, {'@': 372}), 92: (1, {'@': 372}), 72: (1, {'@': 372}), 49: (1, {'@': 372}), 8: (1, {'@': 372}), 50: (1, {'@': 372}), 82: (1, {'@': 372}), 93: (1, {'@': 372}), 94: (1, {'@': 372}), 95: (1, {'@': 372}), 39: (1, {'@': 372}), 41: (1, {'@': 372}), 35: (1, {'@': 372}), 20: (1, {'@': 372}), 32: (1, {'@': 372}), 80: (1, {'@': 372}), 64: (1, {'@': 372}), 25: (1, {'@': 372}), 96: (1, {'@': 372}), 47: (1, {'@': 372}), 12: (1, {'@': 372}), 34: (1, {'@': 372}), 77: (1, {'@': 372}), 70: (1, {'@': 372}), 19: (1, {'@': 372}), 81: (1, {'@': 372}), 30: (1, {'@': 372}), 54: (1, {'@': 372}), 2: (1, {'@': 372}), 37: (1, {'@': 372}), 52: (1, {'@': 372}), 97: (1, {'@': 372}), 9: (1, {'@': 372}), 13: (1, {'@': 372})}, 257: {86: (0, 398)}, 258: {108: (0, 424), 86: (1, {'@': 241}), 83: (1, {'@': 241})}, 259: {89: (1, {'@': 459}), 105: (1, {'@': 459}), 106: (1, {'@': 459}), 107: (1, {'@': 459}), 108: (1, {'@': 459}), 83: (1, {'@': 459}), 103: (1, {'@': 459}), 84: (1, {'@': 459}), 109: (1, {'@': 459}), 95: (1, {'@': 459}), 113: (1, {'@': 459}), 114: (1, {'@': 459}), 115: (1, {'@': 459}), 116: (1, {'@': 459}), 117: (1, {'@': 459}), 88: (1, {'@': 459}), 118: (1, {'@': 459}), 119: (1, {'@': 459}), 120: (1, {'@': 459}), 121: (1, {'@': 459}), 122: (1, {'@': 459}), 123: (1, {'@': 459}), 94: (1, {'@': 459}), 86: (1, {'@': 459}), 125: (1, {'@': 459}), 126: (1, {'@': 459}), 39: (1, {'@': 459}), 64: (1, {'@': 459}), 128: (1, {'@': 459}), 129: (1, {'@': 459}), 130: (1, {'@': 459}), 102: (1, {'@': 459}), 131: (1, {'@': 459}), 132: (1, {'@': 459}), 133: (1, {'@': 459}), 2: (1, {'@': 459}), 134: (1, {'@': 459}), 135: (1, {'@': 459}), 136: (1, {'@': 459}), 138: (1, {'@': 459})}, 260: {40: (1, {'@': 408}), 48: (1, {'@': 408}), 89: (1, {'@': 408}), 105: (1, {'@': 408}), 119: (1, {'@': 408}), 106: (1, {'@': 408}), 107: (1, {'@': 408}), 120: (1, {'@': 408}), 83: (1, {'@': 408}), 72: (1, {'@': 408}), 121: (1, {'@': 408}), 139: (1, {'@': 408}), 122: (1, {'@': 408}), 123: (1, {'@': 408}), 109: (1, {'@': 408}), 124: (1, {'@': 408}), 94: (1, {'@': 408}), 125: (1, {'@': 408}), 126: (1, {'@': 408}), 127: (1, {'@': 408}), 39: (1, {'@': 408}), 64: (1, {'@': 408}), 110: (1, {'@': 408}), 128: (1, {'@': 408}), 111: (1, {'@': 408}), 129: (1, {'@': 408}), 130: (1, {'@': 408}), 112: (1, {'@': 408}), 113: (1, {'@': 408}), 131: (1, {'@': 408}), 114: (1, {'@': 408}), 12: (1, {'@': 408}), 118: (1, {'@': 408}), 77: (1, {'@': 408}), 132: (1, {'@': 408}), 115: (1, {'@': 408}), 99: (1, {'@': 408}), 54: (1, {'@': 408}), 133: (1, {'@': 408}), 116: (1, {'@': 408}), 134: (1, {'@': 408}), 135: (1, {'@': 408}), 117: (1, {'@': 408}), 52: (1, {'@': 408}), 136: (1, {'@': 408}), 137: (1, {'@': 408}), 138: (1, {'@': 408}), 108: (1, {'@': 408}), 86: (1, {'@': 408}), 84: (1, {'@': 408}), 103: (1, {'@': 408}), 95: (1, {'@': 408}), 102: (1, {'@': 408}), 2: (1, {'@': 408}), 88: (1, {'@': 408})}, 261: {83: (0, 84), 181: (0, 121), 88: (1, {'@': 157})}, 262: {51: (0, 583), 52: (0, 515), 4: (0, 289), 38: (0, 459), 194: (0, 549), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 31: (0, 465), 13: (0, 541), 57: (0, 230), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 27: (0, 317), 28: (0, 201), 29: (0, 411), 68: (0, 250), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 102: (0, 392), 80: (0, 167), 42: (0, 364), 195: (0, 293), 43: (0, 531), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 263: {86: (1, {'@': 109})}, 264: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 196: (0, 363), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 43: (0, 261), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 88: (0, 11), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 265: {197: (0, 15), 83: (0, 6), 88: (1, {'@': 208}), 89: (1, {'@': 208}), 39: (1, {'@': 208})}, 266: {88: (1, {'@': 376})}, 267: {187: (0, 457), 2: (1, {'@': 147}), 40: (1, {'@': 147})}, 268: {68: (1, {'@': 278}), 40: (1, {'@': 278}), 48: (1, {'@': 278}), 59: (1, {'@': 278}), 51: (1, {'@': 278}), 72: (1, {'@': 278}), 49: (1, {'@': 278}), 82: (1, {'@': 278}), 35: (1, {'@': 278}), 32: (1, {'@': 278}), 80: (1, {'@': 278}), 12: (1, {'@': 278}), 34: (1, {'@': 278}), 70: (1, {'@': 278}), 77: (1, {'@': 278}), 30: (1, {'@': 278}), 54: (1, {'@': 278}), 2: (1, {'@': 278}), 13: (1, {'@': 278})}, 269: {103: (0, 580), 68: (1, {'@': 236}), 40: (1, {'@': 236}), 21: (1, {'@': 236}), 48: (1, {'@': 236}), 59: (1, {'@': 236}), 51: (1, {'@': 236}), 91: (1, {'@': 236}), 92: (1, {'@': 236}), 72: (1, {'@': 236}), 49: (1, {'@': 236}), 8: (1, {'@': 236}), 50: (1, {'@': 236}), 82: (1, {'@': 236}), 93: (1, {'@': 236}), 94: (1, {'@': 236}), 95: (1, {'@': 236}), 41: (1, {'@': 236}), 35: (1, {'@': 236}), 20: (1, {'@': 236}), 32: (1, {'@': 236}), 64: (1, {'@': 236}), 80: (1, {'@': 236}), 25: (1, {'@': 236}), 96: (1, {'@': 236}), 47: (1, {'@': 236}), 12: (1, {'@': 236}), 34: (1, {'@': 236}), 70: (1, {'@': 236}), 77: (1, {'@': 236}), 19: (1, {'@': 236}), 81: (1, {'@': 236}), 30: (1, {'@': 236}), 54: (1, {'@': 236}), 2: (1, {'@': 236}), 37: (1, {'@': 236}), 52: (1, {'@': 236}), 97: (1, {'@': 236}), 9: (1, {'@': 236}), 13: (1, {'@': 236}), 98: (1, {'@': 236}), 39: (1, {'@': 236})}, 270: {72: (0, 268), 198: (0, 405), 48: (0, 407), 89: (1, {'@': 269}), 105: (1, {'@': 269}), 119: (1, {'@': 269}), 106: (1, {'@': 269}), 107: (1, {'@': 269}), 120: (1, {'@': 269}), 83: (1, {'@': 269}), 121: (1, {'@': 269}), 122: (1, {'@': 269}), 123: (1, {'@': 269}), 109: (1, {'@': 269}), 94: (1, {'@': 269}), 125: (1, {'@': 269}), 126: (1, {'@': 269}), 127: (1, {'@': 269}), 39: (1, {'@': 269}), 64: (1, {'@': 269}), 128: (1, {'@': 269}), 111: (1, {'@': 269}), 129: (1, {'@': 269}), 130: (1, {'@': 269}), 113: (1, {'@': 269}), 131: (1, {'@': 269}), 114: (1, {'@': 269}), 118: (1, {'@': 269}), 132: (1, {'@': 269}), 115: (1, {'@': 269}), 133: (1, {'@': 269}), 116: (1, {'@': 269}), 134: (1, {'@': 269}), 135: (1, {'@': 269}), 117: (1, {'@': 269}), 136: (1, {'@': 269}), 138: (1, {'@': 269}), 86: (1, {'@': 269}), 108: (1, {'@': 269}), 84: (1, {'@': 269}), 103: (1, {'@': 269}), 95: (1, {'@': 269}), 102: (1, {'@': 269}), 2: (1, {'@': 269}), 88: (1, {'@': 269})}, 271: {51: (0, 583), 12: (0, 262), 29: (0, 411), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 4: (0, 321), 2: (0, 408), 68: (0, 250), 82: (0, 106), 48: (0, 495), 49: (0, 579), 32: (0, 422)}, 272: {2: (1, {'@': 148}), 40: (1, {'@': 148})}, 273: {89: (1, {'@': 184}), 39: (1, {'@': 184})}, 274: {68: (1, {'@': 222}), 40: (1, {'@': 222}), 21: (1, {'@': 222}), 48: (1, {'@': 222}), 59: (1, {'@': 222}), 51: (1, {'@': 222}), 91: (1, {'@': 222}), 92: (1, {'@': 222}), 72: (1, {'@': 222}), 49: (1, {'@': 222}), 8: (1, {'@': 222}), 50: (1, {'@': 222}), 82: (1, {'@': 222}), 93: (1, {'@': 222}), 94: (1, {'@': 222}), 95: (1, {'@': 222}), 41: (1, {'@': 222}), 35: (1, {'@': 222}), 20: (1, {'@': 222}), 32: (1, {'@': 222}), 64: (1, {'@': 222}), 80: (1, {'@': 222}), 25: (1, {'@': 222}), 96: (1, {'@': 222}), 47: (1, {'@': 222}), 12: (1, {'@': 222}), 34: (1, {'@': 222}), 70: (1, {'@': 222}), 77: (1, {'@': 222}), 19: (1, {'@': 222}), 81: (1, {'@': 222}), 30: (1, {'@': 222}), 54: (1, {'@': 222}), 2: (1, {'@': 222}), 37: (1, {'@': 222}), 52: (1, {'@': 222}), 97: (1, {'@': 222}), 9: (1, {'@': 222}), 13: (1, {'@': 222}), 98: (1, {'@': 222}), 39: (1, {'@': 222})}, 275: {0: (0, 213), 2: (0, 408)}, 276: {2: (0, 408), 87: (0, 265), 0: (0, 537), 90: (0, 8)}, 277: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 199: (0, 464), 6: (0, 390), 147: (0, 539), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 146: (0, 458), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 43: (0, 19), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579), 88: (0, 157)}, 278: {86: (0, 85)}, 279: {68: (1, {'@': 296}), 40: (1, {'@': 296}), 48: (1, {'@': 296}), 59: (1, {'@': 296}), 51: (1, {'@': 296}), 72: (1, {'@': 296}), 49: (1, {'@': 296}), 82: (1, {'@': 296}), 35: (1, {'@': 296}), 32: (1, {'@': 296}), 80: (1, {'@': 296}), 12: (1, {'@': 296}), 34: (1, {'@': 296}), 70: (1, {'@': 296}), 77: (1, {'@': 296}), 30: (1, {'@': 296}), 54: (1, {'@': 296}), 2: (1, {'@': 296}), 13: (1, {'@': 296})}, 280: {89: (1, {'@': 457}), 105: (1, {'@': 457}), 107: (1, {'@': 457}), 108: (1, {'@': 457}), 83: (1, {'@': 457}), 103: (1, {'@': 457}), 84: (1, {'@': 457}), 109: (1, {'@': 457}), 95: (1, {'@': 457}), 113: (1, {'@': 457}), 114: (1, {'@': 457}), 115: (1, {'@': 457}), 116: (1, {'@': 457}), 88: (1, {'@': 457}), 117: (1, {'@': 457}), 118: (1, {'@': 457}), 119: (1, {'@': 457}), 120: (1, {'@': 457}), 121: (1, {'@': 457}), 122: (1, {'@': 457}), 123: (1, {'@': 457}), 94: (1, {'@': 457}), 86: (1, {'@': 457}), 125: (1, {'@': 457}), 126: (1, {'@': 457}), 39: (1, {'@': 457}), 64: (1, {'@': 457}), 128: (1, {'@': 457}), 129: (1, {'@': 457}), 130: (1, {'@': 457}), 102: (1, {'@': 457}), 131: (1, {'@': 457}), 132: (1, {'@': 457}), 133: (1, {'@': 457}), 2: (1, {'@': 457}), 134: (1, {'@': 457}), 135: (1, {'@': 457}), 136: (1, {'@': 457}), 138: (1, {'@': 457})}, 281: {83: (1, {'@': 97}), 88: (1, {'@': 97})}, 282: {89: (1, {'@': 140}), 39: (1, {'@': 140})}, 283: {102: (0, 253), 40: (1, {'@': 316}), 48: (1, {'@': 316}), 95: (1, {'@': 316}), 125: (1, {'@': 316}), 126: (1, {'@': 316}), 127: (1, {'@': 316}), 105: (1, {'@': 316}), 64: (1, {'@': 316}), 110: (1, {'@': 316}), 111: (1, {'@': 316}), 130: (1, {'@': 316}), 106: (1, {'@': 316}), 112: (1, {'@': 316}), 131: (1, {'@': 316}), 83: (1, {'@': 316}), 12: (1, {'@': 316}), 72: (1, {'@': 316}), 132: (1, {'@': 316}), 115: (1, {'@': 316}), 99: (1, {'@': 316}), 116: (1, {'@': 316}), 121: (1, {'@': 316}), 139: (1, {'@': 316}), 122: (1, {'@': 316}), 109: (1, {'@': 316}), 52: (1, {'@': 316}), 137: (1, {'@': 316}), 124: (1, {'@': 316}), 94: (1, {'@': 316}), 138: (1, {'@': 316})}, 284: {52: (0, 284), 12: (0, 561), 37: (0, 212), 2: (0, 408), 79: (0, 69), 0: (0, 220), 55: (0, 267), 73: (0, 554)}, 285: {83: (0, 399), 102: (1, {'@': 367}), 84: (1, {'@': 367})}, 286: {0: (0, 441), 2: (0, 408)}, 287: {122: (0, 485)}, 288: {0: (0, 389), 2: (0, 408), 99: (0, 23), 100: (0, 45), 101: (0, 569), 86: (1, {'@': 120})}, 289: {200: (0, 376), 109: (0, 373), 125: (1, {'@': 262}), 126: (1, {'@': 262}), 105: (1, {'@': 262}), 39: (1, {'@': 262}), 89: (1, {'@': 262}), 64: (1, {'@': 262}), 128: (1, {'@': 262}), 129: (1, {'@': 262}), 119: (1, {'@': 262}), 107: (1, {'@': 262}), 120: (1, {'@': 262}), 113: (1, {'@': 262}), 131: (1, {'@': 262}), 114: (1, {'@': 262}), 83: (1, {'@': 262}), 118: (1, {'@': 262}), 132: (1, {'@': 262}), 115: (1, {'@': 262}), 133: (1, {'@': 262}), 116: (1, {'@': 262}), 121: (1, {'@': 262}), 122: (1, {'@': 262}), 123: (1, {'@': 262}), 134: (1, {'@': 262}), 135: (1, {'@': 262}), 117: (1, {'@': 262}), 136: (1, {'@': 262}), 94: (1, {'@': 262}), 138: (1, {'@': 262}), 86: (1, {'@': 262}), 108: (1, {'@': 262}), 84: (1, {'@': 262}), 103: (1, {'@': 262}), 95: (1, {'@': 262}), 102: (1, {'@': 262}), 2: (1, {'@': 262}), 88: (1, {'@': 262})}, 290: {68: (1, {'@': 288}), 40: (1, {'@': 288}), 48: (1, {'@': 288}), 59: (1, {'@': 288}), 51: (1, {'@': 288}), 72: (1, {'@': 288}), 49: (1, {'@': 288}), 82: (1, {'@': 288}), 35: (1, {'@': 288}), 32: (1, {'@': 288}), 80: (1, {'@': 288}), 12: (1, {'@': 288}), 34: (1, {'@': 288}), 70: (1, {'@': 288}), 77: (1, {'@': 288}), 30: (1, {'@': 288}), 54: (1, {'@': 288}), 2: (1, {'@': 288}), 13: (1, {'@': 288})}, 291: {89: (1, {'@': 162}), 39: (1, {'@': 162})}, 292: {83: (0, 49), 86: (1, {'@': 124})}, 293: {102: (0, 377)}, 294: {201: (0, 476), 156: (0, 147), 83: (0, 138), 88: (1, {'@': 393})}, 295: {51: (0, 583), 52: (0, 515), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 27: (0, 317), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 43: (0, 531), 44: (0, 543), 2: (0, 408), 31: (0, 418), 82: (0, 106), 48: (0, 495), 49: (0, 579), 88: (1, {'@': 326})}, 296: {40: (1, {'@': 321}), 48: (1, {'@': 321}), 89: (1, {'@': 321}), 105: (1, {'@': 321}), 119: (1, {'@': 321}), 106: (1, {'@': 321}), 107: (1, {'@': 321}), 120: (1, {'@': 321}), 83: (1, {'@': 321}), 72: (1, {'@': 321}), 121: (1, {'@': 321}), 139: (1, {'@': 321}), 122: (1, {'@': 321}), 123: (1, {'@': 321}), 109: (1, {'@': 321}), 124: (1, {'@': 321}), 94: (1, {'@': 321}), 138: (1, {'@': 321}), 125: (1, {'@': 321}), 126: (1, {'@': 321}), 127: (1, {'@': 321}), 39: (1, {'@': 321}), 64: (1, {'@': 321}), 110: (1, {'@': 321}), 128: (1, {'@': 321}), 111: (1, {'@': 321}), 129: (1, {'@': 321}), 130: (1, {'@': 321}), 112: (1, {'@': 321}), 113: (1, {'@': 321}), 131: (1, {'@': 321}), 114: (1, {'@': 321}), 12: (1, {'@': 321}), 132: (1, {'@': 321}), 115: (1, {'@': 321}), 99: (1, {'@': 321}), 133: (1, {'@': 321}), 116: (1, {'@': 321}), 134: (1, {'@': 321}), 135: (1, {'@': 321}), 117: (1, {'@': 321}), 52: (1, {'@': 321}), 136: (1, {'@': 321}), 137: (1, {'@': 321}), 118: (1, {'@': 321}), 86: (1, {'@': 321}), 108: (1, {'@': 321}), 84: (1, {'@': 321}), 103: (1, {'@': 321}), 95: (1, {'@': 321}), 102: (1, {'@': 321}), 2: (1, {'@': 321}), 88: (1, {'@': 321})}, 297: {83: (1, {'@': 471}), 122: (1, {'@': 471})}, 298: {0: (0, 433), 2: (0, 408)}, 299: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 55: (0, 267), 6: (0, 390), 56: (0, 224), 52: (0, 284), 12: (0, 534), 13: (0, 541), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 23: (0, 332), 61: (0, 326), 22: (0, 544), 68: (0, 250), 28: (0, 201), 29: (0, 411), 73: (0, 554), 32: (0, 422), 70: (0, 296), 33: (0, 484), 37: (0, 212), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 493), 77: (0, 260), 40: (0, 508), 78: (0, 34), 79: (0, 69), 80: (0, 167), 42: (0, 364), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 300: {64: (0, 279), 68: (1, {'@': 295}), 40: (1, {'@': 295}), 48: (1, {'@': 295}), 59: (1, {'@': 295}), 51: (1, {'@': 295}), 72: (1, {'@': 295}), 49: (1, {'@': 295}), 82: (1, {'@': 295}), 35: (1, {'@': 295}), 32: (1, {'@': 295}), 80: (1, {'@': 295}), 12: (1, {'@': 295}), 34: (1, {'@': 295}), 70: (1, {'@': 295}), 77: (1, {'@': 295}), 30: (1, {'@': 295}), 54: (1, {'@': 295}), 2: (1, {'@': 295}), 13: (1, {'@': 295})}, 301: {107: (1, {'@': 158}), 68: (1, {'@': 158}), 40: (1, {'@': 158}), 21: (1, {'@': 158}), 48: (1, {'@': 158}), 59: (1, {'@': 158}), 51: (1, {'@': 158}), 91: (1, {'@': 158}), 92: (1, {'@': 158}), 72: (1, {'@': 158}), 49: (1, {'@': 158}), 8: (1, {'@': 158}), 50: (1, {'@': 158}), 82: (1, {'@': 158}), 93: (1, {'@': 158}), 94: (1, {'@': 158}), 95: (1, {'@': 158}), 41: (1, {'@': 158}), 35: (1, {'@': 158}), 20: (1, {'@': 158}), 32: (1, {'@': 158}), 64: (1, {'@': 158}), 80: (1, {'@': 158}), 25: (1, {'@': 158}), 96: (1, {'@': 158}), 47: (1, {'@': 158}), 12: (1, {'@': 158}), 34: (1, {'@': 158}), 70: (1, {'@': 158}), 77: (1, {'@': 158}), 19: (1, {'@': 158}), 81: (1, {'@': 158}), 30: (1, {'@': 158}), 54: (1, {'@': 158}), 2: (1, {'@': 158}), 37: (1, {'@': 158}), 52: (1, {'@': 158}), 97: (1, {'@': 158}), 9: (1, {'@': 158}), 13: (1, {'@': 158}), 98: (1, {'@': 158}), 39: (1, {'@': 158})}, 302: {68: (1, {'@': 130}), 40: (1, {'@': 130}), 21: (1, {'@': 130}), 48: (1, {'@': 130}), 59: (1, {'@': 130}), 51: (1, {'@': 130}), 91: (1, {'@': 130}), 92: (1, {'@': 130}), 72: (1, {'@': 130}), 49: (1, {'@': 130}), 8: (1, {'@': 130}), 50: (1, {'@': 130}), 82: (1, {'@': 130}), 93: (1, {'@': 130}), 94: (1, {'@': 130}), 95: (1, {'@': 130}), 41: (1, {'@': 130}), 35: (1, {'@': 130}), 20: (1, {'@': 130}), 32: (1, {'@': 130}), 64: (1, {'@': 130}), 80: (1, {'@': 130}), 25: (1, {'@': 130}), 96: (1, {'@': 130}), 47: (1, {'@': 130}), 12: (1, {'@': 130}), 34: (1, {'@': 130}), 70: (1, {'@': 130}), 77: (1, {'@': 130}), 19: (1, {'@': 130}), 81: (1, {'@': 130}), 30: (1, {'@': 130}), 54: (1, {'@': 130}), 2: (1, {'@': 130}), 37: (1, {'@': 130}), 52: (1, {'@': 130}), 97: (1, {'@': 130}), 9: (1, {'@': 130}), 13: (1, {'@': 130}), 98: (1, {'@': 130}), 39: (1, {'@': 130})}, 303: {51: (0, 583), 12: (0, 262), 4: (0, 289), 29: (0, 411), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 72: (0, 242), 57: (0, 230), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 22: (0, 414), 80: (0, 167), 23: (0, 332), 61: (0, 326), 5: (0, 123), 42: (0, 364), 64: (0, 564), 44: (0, 543), 2: (0, 408), 68: (0, 250), 28: (0, 201), 48: (0, 495), 82: (0, 106), 49: (0, 579), 32: (0, 422)}, 304: {107: (0, 420), 177: (0, 312), 95: (0, 533), 179: (0, 371), 178: (0, 357), 83: (1, {'@': 398}), 88: (1, {'@': 398})}, 305: {89: (1, {'@': 426}), 39: (1, {'@': 426})}, 306: {52: (0, 525), 0: (0, 389), 148: (0, 31), 2: (0, 408), 99: (0, 23), 100: (0, 263), 101: (0, 569), 86: (1, {'@': 110})}, 307: {68: (1, {'@': 291}), 40: (1, {'@': 291}), 48: (1, {'@': 291}), 59: (1, {'@': 291}), 51: (1, {'@': 291}), 72: (1, {'@': 291}), 49: (1, {'@': 291}), 82: (1, {'@': 291}), 35: (1, {'@': 291}), 32: (1, {'@': 291}), 80: (1, {'@': 291}), 12: (1, {'@': 291}), 34: (1, {'@': 291}), 70: (1, {'@': 291}), 77: (1, {'@': 291}), 30: (1, {'@': 291}), 54: (1, {'@': 291}), 2: (1, {'@': 291}), 13: (1, {'@': 291})}, 308: {202: (0, 29), 83: (0, 73), 122: (1, {'@': 345})}, 309: {4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 12: (0, 534), 13: (0, 541), 14: (0, 587), 15: (0, 183), 16: (0, 229), 17: (0, 215), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 22: (0, 414), 23: (0, 332), 24: (0, 445), 25: (0, 442), 26: (0, 546), 27: (0, 317), 28: (0, 201), 29: (0, 411), 30: (0, 519), 31: (0, 574), 32: (0, 422), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 37: (0, 212), 38: (0, 459), 39: (0, 404), 0: (0, 493), 40: (0, 508), 41: (0, 378), 42: (0, 364), 43: (0, 531), 44: (0, 543), 45: (0, 336), 46: (0, 538), 2: (0, 408), 47: (0, 576), 48: (0, 495), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 60: (0, 586), 61: (0, 326), 62: (0, 372), 63: (0, 536), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 69: (0, 219), 70: (0, 296), 71: (0, 282), 72: (0, 242), 73: (0, 235), 74: (0, 206), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 11: (0, 77), 81: (0, 96), 82: (0, 106)}, 310: {89: (1, {'@': 142}), 39: (1, {'@': 142})}, 311: {126: (0, 558), 39: (1, {'@': 253}), 89: (1, {'@': 253}), 128: (1, {'@': 253}), 129: (1, {'@': 253}), 119: (1, {'@': 253}), 107: (1, {'@': 253}), 120: (1, {'@': 253}), 113: (1, {'@': 253}), 114: (1, {'@': 253}), 83: (1, {'@': 253}), 132: (1, {'@': 253}), 133: (1, {'@': 253}), 123: (1, {'@': 253}), 134: (1, {'@': 253}), 135: (1, {'@': 253}), 117: (1, {'@': 253}), 136: (1, {'@': 253}), 94: (1, {'@': 253}), 118: (1, {'@': 253}), 86: (1, {'@': 253}), 108: (1, {'@': 253}), 88: (1, {'@': 253}), 95: (1, {'@': 253}), 102: (1, {'@': 253}), 103: (1, {'@': 253}), 84: (1, {'@': 253}), 2: (1, {'@': 253})}, 312: {95: (0, 533), 179: (0, 474), 88: (1, {'@': 399}), 94: (1, {'@': 399}), 84: (1, {'@': 399}), 102: (1, {'@': 399})}, 313: {83: (1, {'@': 421}), 88: (1, {'@': 421})}, 314: {132: (0, 44), 39: (1, {'@': 251}), 89: (1, {'@': 251}), 128: (1, {'@': 251}), 129: (1, {'@': 251}), 119: (1, {'@': 251}), 107: (1, {'@': 251}), 120: (1, {'@': 251}), 113: (1, {'@': 251}), 114: (1, {'@': 251}), 83: (1, {'@': 251}), 133: (1, {'@': 251}), 123: (1, {'@': 251}), 134: (1, {'@': 251}), 135: (1, {'@': 251}), 117: (1, {'@': 251}), 136: (1, {'@': 251}), 94: (1, {'@': 251}), 118: (1, {'@': 251}), 86: (1, {'@': 251}), 108: (1, {'@': 251}), 88: (1, {'@': 251}), 2: (1, {'@': 251}), 102: (1, {'@': 251}), 84: (1, {'@': 251}), 95: (1, {'@': 251}), 103: (1, {'@': 251})}, 315: {190: (0, 492), 110: (0, 504), 124: (0, 251), 112: (0, 501), 137: (0, 335), 52: (0, 426), 48: (1, {'@': 271}), 89: (1, {'@': 271}), 105: (1, {'@': 271}), 119: (1, {'@': 271}), 106: (1, {'@': 271}), 107: (1, {'@': 271}), 120: (1, {'@': 271}), 83: (1, {'@': 271}), 72: (1, {'@': 271}), 121: (1, {'@': 271}), 122: (1, {'@': 271}), 123: (1, {'@': 271}), 109: (1, {'@': 271}), 94: (1, {'@': 271}), 138: (1, {'@': 271}), 125: (1, {'@': 271}), 126: (1, {'@': 271}), 127: (1, {'@': 271}), 39: (1, {'@': 271}), 64: (1, {'@': 271}), 128: (1, {'@': 271}), 111: (1, {'@': 271}), 129: (1, {'@': 271}), 130: (1, {'@': 271}), 113: (1, {'@': 271}), 131: (1, {'@': 271}), 114: (1, {'@': 271}), 132: (1, {'@': 271}), 115: (1, {'@': 271}), 133: (1, {'@': 271}), 116: (1, {'@': 271}), 134: (1, {'@': 271}), 135: (1, {'@': 271}), 117: (1, {'@': 271}), 136: (1, {'@': 271}), 118: (1, {'@': 271}), 86: (1, {'@': 271}), 108: (1, {'@': 271}), 84: (1, {'@': 271}), 103: (1, {'@': 271}), 95: (1, {'@': 271}), 102: (1, {'@': 271}), 2: (1, {'@': 271}), 88: (1, {'@': 271})}, 316: {4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 162: (0, 560), 12: (0, 534), 13: (0, 541), 14: (0, 587), 16: (0, 229), 17: (0, 215), 163: (0, 247), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 22: (0, 414), 23: (0, 332), 24: (0, 445), 25: (0, 442), 26: (0, 546), 27: (0, 317), 164: (0, 255), 28: (0, 201), 95: (0, 193), 37: (0, 187), 29: (0, 411), 31: (0, 454), 94: (0, 443), 32: (0, 422), 33: (0, 484), 34: (0, 483), 35: (0, 461), 93: (0, 472), 36: (0, 477), 30: (0, 519), 38: (0, 459), 165: (0, 499), 0: (0, 493), 40: (0, 508), 41: (0, 378), 166: (0, 341), 167: (0, 571), 203: (0, 174), 42: (0, 364), 43: (0, 531), 44: (0, 543), 45: (0, 336), 46: (0, 538), 47: (0, 576), 2: (0, 408), 15: (0, 516), 48: (0, 495), 168: (0, 175), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 97: (0, 184), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 63: (0, 245), 60: (0, 586), 61: (0, 326), 62: (0, 372), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 69: (0, 219), 169: (0, 302), 92: (0, 298), 70: (0, 296), 71: (0, 282), 170: (0, 274), 72: (0, 242), 73: (0, 235), 74: (0, 206), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 172: (0, 141), 81: (0, 96), 82: (0, 106), 171: (0, 172), 96: (0, 124)}, 317: {39: (1, {'@': 328}), 89: (1, {'@': 328}), 128: (1, {'@': 328}), 129: (1, {'@': 328}), 119: (1, {'@': 328}), 107: (1, {'@': 328}), 120: (1, {'@': 328}), 113: (1, {'@': 328}), 114: (1, {'@': 328}), 83: (1, {'@': 328}), 133: (1, {'@': 328}), 123: (1, {'@': 328}), 134: (1, {'@': 328}), 135: (1, {'@': 328}), 117: (1, {'@': 328}), 136: (1, {'@': 328}), 118: (1, {'@': 328}), 86: (1, {'@': 328}), 102: (1, {'@': 328}), 95: (1, {'@': 328}), 88: (1, {'@': 328}), 84: (1, {'@': 328})}, 318: {89: (1, {'@': 183}), 39: (1, {'@': 183})}, 319: {83: (0, 406), 89: (1, {'@': 218}), 39: (1, {'@': 218})}, 320: {2: (1, {'@': 433}), 47: (1, {'@': 433}), 139: (1, {'@': 433})}, 321: {89: (1, {'@': 456}), 105: (1, {'@': 456}), 119: (1, {'@': 456}), 107: (1, {'@': 456}), 120: (1, {'@': 456}), 108: (1, {'@': 456}), 83: (1, {'@': 456}), 103: (1, {'@': 456}), 121: (1, {'@': 456}), 122: (1, {'@': 456}), 123: (1, {'@': 456}), 84: (1, {'@': 456}), 109: (1, {'@': 456}), 94: (1, {'@': 456}), 86: (1, {'@': 456}), 95: (1, {'@': 456}), 125: (1, {'@': 456}), 126: (1, {'@': 456}), 39: (1, {'@': 456}), 64: (1, {'@': 456}), 128: (1, {'@': 456}), 129: (1, {'@': 456}), 102: (1, {'@': 456}), 113: (1, {'@': 456}), 131: (1, {'@': 456}), 114: (1, {'@': 456}), 118: (1, {'@': 456}), 132: (1, {'@': 456}), 115: (1, {'@': 456}), 133: (1, {'@': 456}), 116: (1, {'@': 456}), 2: (1, {'@': 456}), 134: (1, {'@': 456}), 135: (1, {'@': 456}), 117: (1, {'@': 456}), 136: (1, {'@': 456}), 88: (1, {'@': 456}), 138: (1, {'@': 456})}, 322: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 43: (0, 76), 86: (0, 131), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 151: (0, 60), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579), 102: (1, {'@': 337}), 83: (1, {'@': 337})}, 323: {0: (0, 413), 2: (0, 408)}, 324: {52: (0, 284), 73: (0, 272), 12: (0, 561), 37: (0, 212), 2: (0, 408), 79: (0, 69), 0: (0, 220), 55: (0, 267), 40: (1, {'@': 308}), 48: (1, {'@': 308}), 89: (1, {'@': 308}), 105: (1, {'@': 308}), 119: (1, {'@': 308}), 106: (1, {'@': 308}), 107: (1, {'@': 308}), 120: (1, {'@': 308}), 83: (1, {'@': 308}), 72: (1, {'@': 308}), 121: (1, {'@': 308}), 139: (1, {'@': 308}), 122: (1, {'@': 308}), 123: (1, {'@': 308}), 109: (1, {'@': 308}), 124: (1, {'@': 308}), 94: (1, {'@': 308}), 138: (1, {'@': 308}), 125: (1, {'@': 308}), 126: (1, {'@': 308}), 127: (1, {'@': 308}), 39: (1, {'@': 308}), 64: (1, {'@': 308}), 110: (1, {'@': 308}), 128: (1, {'@': 308}), 111: (1, {'@': 308}), 129: (1, {'@': 308}), 130: (1, {'@': 308}), 112: (1, {'@': 308}), 113: (1, {'@': 308}), 131: (1, {'@': 308}), 114: (1, {'@': 308}), 132: (1, {'@': 308}), 115: (1, {'@': 308}), 99: (1, {'@': 308}), 133: (1, {'@': 308}), 116: (1, {'@': 308}), 134: (1, {'@': 308}), 135: (1, {'@': 308}), 117: (1, {'@': 308}), 136: (1, {'@': 308}), 137: (1, {'@': 308}), 118: (1, {'@': 308}), 86: (1, {'@': 308})}, 325: {202: (0, 173), 83: (0, 154), 122: (1, {'@': 344})}, 326: {40: (1, {'@': 316}), 48: (1, {'@': 316}), 89: (1, {'@': 316}), 105: (1, {'@': 316}), 119: (1, {'@': 316}), 106: (1, {'@': 316}), 107: (1, {'@': 316}), 120: (1, {'@': 316}), 83: (1, {'@': 316}), 72: (1, {'@': 316}), 121: (1, {'@': 316}), 139: (1, {'@': 316}), 122: (1, {'@': 316}), 123: (1, {'@': 316}), 109: (1, {'@': 316}), 124: (1, {'@': 316}), 94: (1, {'@': 316}), 138: (1, {'@': 316}), 125: (1, {'@': 316}), 126: (1, {'@': 316}), 127: (1, {'@': 316}), 39: (1, {'@': 316}), 64: (1, {'@': 316}), 110: (1, {'@': 316}), 128: (1, {'@': 316}), 111: (1, {'@': 316}), 129: (1, {'@': 316}), 130: (1, {'@': 316}), 112: (1, {'@': 316}), 113: (1, {'@': 316}), 131: (1, {'@': 316}), 114: (1, {'@': 316}), 12: (1, {'@': 316}), 132: (1, {'@': 316}), 115: (1, {'@': 316}), 99: (1, {'@': 316}), 133: (1, {'@': 316}), 116: (1, {'@': 316}), 134: (1, {'@': 316}), 135: (1, {'@': 316}), 117: (1, {'@': 316}), 52: (1, {'@': 316}), 136: (1, {'@': 316}), 137: (1, {'@': 316}), 118: (1, {'@': 316}), 86: (1, {'@': 316}), 108: (1, {'@': 316}), 84: (1, {'@': 316}), 103: (1, {'@': 316}), 95: (1, {'@': 316}), 102: (1, {'@': 316}), 2: (1, {'@': 316}), 88: (1, {'@': 316})}, 327: {51: (0, 583), 12: (0, 262), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 29: (0, 209), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 2: (0, 408), 68: (0, 250), 82: (0, 106), 48: (0, 495), 49: (0, 579), 32: (0, 422)}, 328: {90: (0, 16), 2: (0, 408), 87: (0, 265), 0: (0, 537)}, 329: {40: (1, {'@': 301}), 48: (1, {'@': 301}), 89: (1, {'@': 301}), 105: (1, {'@': 301}), 119: (1, {'@': 301}), 106: (1, {'@': 301}), 107: (1, {'@': 301}), 120: (1, {'@': 301}), 83: (1, {'@': 301}), 72: (1, {'@': 301}), 121: (1, {'@': 301}), 139: (1, {'@': 301}), 122: (1, {'@': 301}), 123: (1, {'@': 301}), 109: (1, {'@': 301}), 124: (1, {'@': 301}), 94: (1, {'@': 301}), 138: (1, {'@': 301}), 125: (1, {'@': 301}), 126: (1, {'@': 301}), 127: (1, {'@': 301}), 39: (1, {'@': 301}), 64: (1, {'@': 301}), 110: (1, {'@': 301}), 128: (1, {'@': 301}), 111: (1, {'@': 301}), 129: (1, {'@': 301}), 130: (1, {'@': 301}), 112: (1, {'@': 301}), 113: (1, {'@': 301}), 131: (1, {'@': 301}), 114: (1, {'@': 301}), 12: (1, {'@': 301}), 132: (1, {'@': 301}), 115: (1, {'@': 301}), 99: (1, {'@': 301}), 133: (1, {'@': 301}), 116: (1, {'@': 301}), 134: (1, {'@': 301}), 135: (1, {'@': 301}), 117: (1, {'@': 301}), 52: (1, {'@': 301}), 136: (1, {'@': 301}), 137: (1, {'@': 301}), 118: (1, {'@': 301}), 86: (1, {'@': 301}), 108: (1, {'@': 301}), 84: (1, {'@': 301}), 103: (1, {'@': 301}), 95: (1, {'@': 301}), 102: (1, {'@': 301}), 2: (1, {'@': 301}), 88: (1, {'@': 301})}, 330: {40: (1, {'@': 409}), 48: (1, {'@': 409}), 89: (1, {'@': 409}), 105: (1, {'@': 409}), 119: (1, {'@': 409}), 106: (1, {'@': 409}), 107: (1, {'@': 409}), 120: (1, {'@': 409}), 83: (1, {'@': 409}), 72: (1, {'@': 409}), 121: (1, {'@': 409}), 139: (1, {'@': 409}), 122: (1, {'@': 409}), 123: (1, {'@': 409}), 109: (1, {'@': 409}), 124: (1, {'@': 409}), 94: (1, {'@': 409}), 125: (1, {'@': 409}), 126: (1, {'@': 409}), 127: (1, {'@': 409}), 39: (1, {'@': 409}), 64: (1, {'@': 409}), 110: (1, {'@': 409}), 128: (1, {'@': 409}), 111: (1, {'@': 409}), 129: (1, {'@': 409}), 130: (1, {'@': 409}), 112: (1, {'@': 409}), 113: (1, {'@': 409}), 131: (1, {'@': 409}), 114: (1, {'@': 409}), 12: (1, {'@': 409}), 118: (1, {'@': 409}), 77: (1, {'@': 409}), 132: (1, {'@': 409}), 115: (1, {'@': 409}), 99: (1, {'@': 409}), 54: (1, {'@': 409}), 133: (1, {'@': 409}), 116: (1, {'@': 409}), 134: (1, {'@': 409}), 135: (1, {'@': 409}), 117: (1, {'@': 409}), 52: (1, {'@': 409}), 136: (1, {'@': 409}), 137: (1, {'@': 409}), 138: (1, {'@': 409}), 108: (1, {'@': 409}), 86: (1, {'@': 409}), 84: (1, {'@': 409}), 103: (1, {'@': 409}), 95: (1, {'@': 409}), 102: (1, {'@': 409}), 2: (1, {'@': 409}), 88: (1, {'@': 409})}, 331: {48: (1, {'@': 463}), 89: (1, {'@': 463}), 105: (1, {'@': 463}), 106: (1, {'@': 463}), 107: (1, {'@': 463}), 108: (1, {'@': 463}), 83: (1, {'@': 463}), 103: (1, {'@': 463}), 84: (1, {'@': 463}), 109: (1, {'@': 463}), 95: (1, {'@': 463}), 111: (1, {'@': 463}), 113: (1, {'@': 463}), 114: (1, {'@': 463}), 115: (1, {'@': 463}), 116: (1, {'@': 463}), 117: (1, {'@': 463}), 88: (1, {'@': 463}), 118: (1, {'@': 463}), 119: (1, {'@': 463}), 120: (1, {'@': 463}), 72: (1, {'@': 463}), 121: (1, {'@': 463}), 122: (1, {'@': 463}), 123: (1, {'@': 463}), 94: (1, {'@': 463}), 86: (1, {'@': 463}), 125: (1, {'@': 463}), 126: (1, {'@': 463}), 127: (1, {'@': 463}), 39: (1, {'@': 463}), 64: (1, {'@': 463}), 128: (1, {'@': 463}), 129: (1, {'@': 463}), 130: (1, {'@': 463}), 102: (1, {'@': 463}), 131: (1, {'@': 463}), 132: (1, {'@': 463}), 133: (1, {'@': 463}), 2: (1, {'@': 463}), 134: (1, {'@': 463}), 135: (1, {'@': 463}), 136: (1, {'@': 463}), 138: (1, {'@': 463})}, 332: {204: (0, 270), 198: (0, 391), 72: (0, 268), 48: (0, 407), 89: (1, {'@': 270}), 105: (1, {'@': 270}), 119: (1, {'@': 270}), 106: (1, {'@': 270}), 107: (1, {'@': 270}), 120: (1, {'@': 270}), 83: (1, {'@': 270}), 121: (1, {'@': 270}), 122: (1, {'@': 270}), 123: (1, {'@': 270}), 109: (1, {'@': 270}), 94: (1, {'@': 270}), 125: (1, {'@': 270}), 126: (1, {'@': 270}), 127: (1, {'@': 270}), 39: (1, {'@': 270}), 64: (1, {'@': 270}), 128: (1, {'@': 270}), 111: (1, {'@': 270}), 129: (1, {'@': 270}), 130: (1, {'@': 270}), 113: (1, {'@': 270}), 131: (1, {'@': 270}), 114: (1, {'@': 270}), 118: (1, {'@': 270}), 132: (1, {'@': 270}), 115: (1, {'@': 270}), 133: (1, {'@': 270}), 116: (1, {'@': 270}), 134: (1, {'@': 270}), 135: (1, {'@': 270}), 117: (1, {'@': 270}), 136: (1, {'@': 270}), 138: (1, {'@': 270}), 86: (1, {'@': 270}), 108: (1, {'@': 270}), 84: (1, {'@': 270}), 103: (1, {'@': 270}), 95: (1, {'@': 270}), 102: (1, {'@': 270}), 2: (1, {'@': 270}), 88: (1, {'@': 270})}, 333: {40: (0, 555)}, 334: {89: (1, {'@': 194}), 39: (1, {'@': 194})}, 335: {68: (1, {'@': 286}), 40: (1, {'@': 286}), 48: (1, {'@': 286}), 59: (1, {'@': 286}), 51: (1, {'@': 286}), 72: (1, {'@': 286}), 49: (1, {'@': 286}), 82: (1, {'@': 286}), 35: (1, {'@': 286}), 32: (1, {'@': 286}), 80: (1, {'@': 286}), 12: (1, {'@': 286}), 34: (1, {'@': 286}), 70: (1, {'@': 286}), 77: (1, {'@': 286}), 30: (1, {'@': 286}), 54: (1, {'@': 286}), 2: (1, {'@': 286}), 13: (1, {'@': 286})}, 336: {89: (1, {'@': 182}), 39: (1, {'@': 182})}, 337: {84: (0, 513)}, 338: {39: (1, {'@': 442}), 89: (1, {'@': 442}), 83: (1, {'@': 442})}, 339: {88: (1, {'@': 383})}, 340: {89: (1, {'@': 451}), 119: (1, {'@': 451}), 107: (1, {'@': 451}), 120: (1, {'@': 451}), 108: (1, {'@': 451}), 83: (1, {'@': 451}), 103: (1, {'@': 451}), 123: (1, {'@': 451}), 84: (1, {'@': 451}), 94: (1, {'@': 451}), 86: (1, {'@': 451}), 95: (1, {'@': 451}), 126: (1, {'@': 451}), 39: (1, {'@': 451}), 128: (1, {'@': 451}), 129: (1, {'@': 451}), 102: (1, {'@': 451}), 113: (1, {'@': 451}), 114: (1, {'@': 451}), 132: (1, {'@': 451}), 133: (1, {'@': 451}), 2: (1, {'@': 451}), 134: (1, {'@': 451}), 135: (1, {'@': 451}), 117: (1, {'@': 451}), 136: (1, {'@': 451}), 88: (1, {'@': 451}), 118: (1, {'@': 451})}, 341: {68: (1, {'@': 219}), 40: (1, {'@': 219}), 21: (1, {'@': 219}), 48: (1, {'@': 219}), 59: (1, {'@': 219}), 51: (1, {'@': 219}), 91: (1, {'@': 219}), 92: (1, {'@': 219}), 72: (1, {'@': 219}), 49: (1, {'@': 219}), 8: (1, {'@': 219}), 50: (1, {'@': 219}), 82: (1, {'@': 219}), 93: (1, {'@': 219}), 94: (1, {'@': 219}), 95: (1, {'@': 219}), 41: (1, {'@': 219}), 35: (1, {'@': 219}), 20: (1, {'@': 219}), 32: (1, {'@': 219}), 64: (1, {'@': 219}), 80: (1, {'@': 219}), 25: (1, {'@': 219}), 96: (1, {'@': 219}), 47: (1, {'@': 219}), 12: (1, {'@': 219}), 34: (1, {'@': 219}), 70: (1, {'@': 219}), 77: (1, {'@': 219}), 19: (1, {'@': 219}), 81: (1, {'@': 219}), 30: (1, {'@': 219}), 54: (1, {'@': 219}), 2: (1, {'@': 219}), 37: (1, {'@': 219}), 52: (1, {'@': 219}), 97: (1, {'@': 219}), 9: (1, {'@': 219}), 13: (1, {'@': 219}), 98: (1, {'@': 219}), 39: (1, {'@': 219})}, 342: {51: (0, 583), 12: (0, 262), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 2: (0, 408), 29: (0, 280), 68: (0, 250), 82: (0, 106), 48: (0, 495), 49: (0, 579), 32: (0, 422)}, 343: {83: (0, 550), 89: (1, {'@': 215}), 39: (1, {'@': 215})}, 344: {84: (1, {'@': 413})}, 345: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 43: (0, 511), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579), 89: (1, {'@': 356}), 39: (1, {'@': 356}), 86: (1, {'@': 356})}, 346: {88: (1, {'@': 385})}, 347: {102: (0, 253)}, 348: {108: (0, 286), 89: (1, {'@': 204}), 83: (1, {'@': 204}), 39: (1, {'@': 204})}, 349: {51: (0, 583), 4: (0, 289), 38: (0, 459), 43: (0, 281), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 350: {47: (0, 208)}, 351: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 16: (0, 229), 14: (0, 204), 30: (0, 519), 17: (0, 215), 59: (0, 428), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 352: {51: (0, 583), 154: (0, 37), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 14: (0, 47), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 21: (0, 54), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 155: (0, 55), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 353: {89: (1, {'@': 186}), 39: (1, {'@': 186})}, 354: {89: (1, {'@': 190}), 39: (1, {'@': 190})}, 355: {2: (1, {'@': 149}), 40: (1, {'@': 149})}, 356: {40: (1, {'@': 311}), 48: (1, {'@': 311}), 89: (1, {'@': 311}), 105: (1, {'@': 311}), 119: (1, {'@': 311}), 106: (1, {'@': 311}), 107: (1, {'@': 311}), 120: (1, {'@': 311}), 83: (1, {'@': 311}), 72: (1, {'@': 311}), 121: (1, {'@': 311}), 139: (1, {'@': 311}), 122: (1, {'@': 311}), 123: (1, {'@': 311}), 109: (1, {'@': 311}), 124: (1, {'@': 311}), 94: (1, {'@': 311}), 138: (1, {'@': 311}), 125: (1, {'@': 311}), 126: (1, {'@': 311}), 127: (1, {'@': 311}), 39: (1, {'@': 311}), 64: (1, {'@': 311}), 110: (1, {'@': 311}), 128: (1, {'@': 311}), 111: (1, {'@': 311}), 129: (1, {'@': 311}), 130: (1, {'@': 311}), 112: (1, {'@': 311}), 113: (1, {'@': 311}), 131: (1, {'@': 311}), 114: (1, {'@': 311}), 12: (1, {'@': 311}), 132: (1, {'@': 311}), 115: (1, {'@': 311}), 99: (1, {'@': 311}), 133: (1, {'@': 311}), 116: (1, {'@': 311}), 134: (1, {'@': 311}), 135: (1, {'@': 311}), 117: (1, {'@': 311}), 52: (1, {'@': 311}), 136: (1, {'@': 311}), 137: (1, {'@': 311}), 118: (1, {'@': 311}), 86: (1, {'@': 311}), 108: (1, {'@': 311}), 84: (1, {'@': 311}), 103: (1, {'@': 311}), 95: (1, {'@': 311}), 102: (1, {'@': 311}), 2: (1, {'@': 311}), 88: (1, {'@': 311})}, 357: {188: (0, 199), 94: (0, 352), 88: (1, {'@': 416}), 84: (1, {'@': 416})}, 358: {51: (0, 583), 4: (0, 289), 38: (0, 459), 43: (0, 57), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 141: (0, 114), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 359: {86: (0, 568)}, 360: {84: (0, 582)}, 361: {177: (0, 312), 86: (0, 423), 95: (0, 533), 179: (0, 371), 178: (0, 357), 83: (1, {'@': 327}), 84: (1, {'@': 327})}, 362: {89: (1, {'@': 461}), 105: (1, {'@': 461}), 106: (1, {'@': 461}), 107: (1, {'@': 461}), 108: (1, {'@': 461}), 83: (1, {'@': 461}), 103: (1, {'@': 461}), 84: (1, {'@': 461}), 109: (1, {'@': 461}), 95: (1, {'@': 461}), 111: (1, {'@': 461}), 113: (1, {'@': 461}), 114: (1, {'@': 461}), 115: (1, {'@': 461}), 116: (1, {'@': 461}), 117: (1, {'@': 461}), 88: (1, {'@': 461}), 118: (1, {'@': 461}), 119: (1, {'@': 461}), 120: (1, {'@': 461}), 121: (1, {'@': 461}), 122: (1, {'@': 461}), 123: (1, {'@': 461}), 94: (1, {'@': 461}), 86: (1, {'@': 461}), 125: (1, {'@': 461}), 126: (1, {'@': 461}), 127: (1, {'@': 461}), 39: (1, {'@': 461}), 64: (1, {'@': 461}), 128: (1, {'@': 461}), 129: (1, {'@': 461}), 130: (1, {'@': 461}), 102: (1, {'@': 461}), 131: (1, {'@': 461}), 132: (1, {'@': 461}), 133: (1, {'@': 461}), 2: (1, {'@': 461}), 134: (1, {'@': 461}), 135: (1, {'@': 461}), 136: (1, {'@': 461}), 138: (1, {'@': 461})}, 363: {88: (0, 40)}, 364: {51: (0, 583), 12: (0, 262), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 56: (0, 368), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 61: (0, 326), 42: (0, 364), 2: (0, 408), 68: (0, 250), 82: (0, 106), 48: (0, 495), 49: (0, 579), 32: (0, 422)}, 365: {89: (1, {'@': 201}), 83: (1, {'@': 201}), 88: (1, {'@': 201}), 39: (1, {'@': 201})}, 366: {47: (0, 25), 1: (0, 160), 0: (0, 401), 2: (0, 408)}, 367: {84: (0, 526)}, 368: {48: (1, {'@': 273}), 89: (1, {'@': 273}), 105: (1, {'@': 273}), 119: (1, {'@': 273}), 106: (1, {'@': 273}), 107: (1, {'@': 273}), 120: (1, {'@': 273}), 83: (1, {'@': 273}), 72: (1, {'@': 273}), 121: (1, {'@': 273}), 122: (1, {'@': 273}), 123: (1, {'@': 273}), 109: (1, {'@': 273}), 124: (1, {'@': 273}), 94: (1, {'@': 273}), 125: (1, {'@': 273}), 126: (1, {'@': 273}), 127: (1, {'@': 273}), 39: (1, {'@': 273}), 64: (1, {'@': 273}), 110: (1, {'@': 273}), 128: (1, {'@': 273}), 111: (1, {'@': 273}), 129: (1, {'@': 273}), 130: (1, {'@': 273}), 112: (1, {'@': 273}), 113: (1, {'@': 273}), 131: (1, {'@': 273}), 114: (1, {'@': 273}), 118: (1, {'@': 273}), 132: (1, {'@': 273}), 115: (1, {'@': 273}), 133: (1, {'@': 273}), 116: (1, {'@': 273}), 134: (1, {'@': 273}), 135: (1, {'@': 273}), 117: (1, {'@': 273}), 52: (1, {'@': 273}), 136: (1, {'@': 273}), 137: (1, {'@': 273}), 138: (1, {'@': 273}), 86: (1, {'@': 273}), 108: (1, {'@': 273}), 84: (1, {'@': 273}), 103: (1, {'@': 273}), 95: (1, {'@': 273}), 102: (1, {'@': 273}), 2: (1, {'@': 273}), 88: (1, {'@': 273})}, 369: {40: (1, {'@': 318}), 48: (1, {'@': 318}), 89: (1, {'@': 318}), 105: (1, {'@': 318}), 119: (1, {'@': 318}), 106: (1, {'@': 318}), 107: (1, {'@': 318}), 120: (1, {'@': 318}), 83: (1, {'@': 318}), 72: (1, {'@': 318}), 121: (1, {'@': 318}), 139: (1, {'@': 318}), 122: (1, {'@': 318}), 123: (1, {'@': 318}), 109: (1, {'@': 318}), 124: (1, {'@': 318}), 94: (1, {'@': 318}), 138: (1, {'@': 318}), 125: (1, {'@': 318}), 126: (1, {'@': 318}), 127: (1, {'@': 318}), 39: (1, {'@': 318}), 64: (1, {'@': 318}), 110: (1, {'@': 318}), 128: (1, {'@': 318}), 111: (1, {'@': 318}), 129: (1, {'@': 318}), 130: (1, {'@': 318}), 112: (1, {'@': 318}), 113: (1, {'@': 318}), 131: (1, {'@': 318}), 114: (1, {'@': 318}), 12: (1, {'@': 318}), 132: (1, {'@': 318}), 115: (1, {'@': 318}), 99: (1, {'@': 318}), 133: (1, {'@': 318}), 116: (1, {'@': 318}), 134: (1, {'@': 318}), 135: (1, {'@': 318}), 117: (1, {'@': 318}), 52: (1, {'@': 318}), 136: (1, {'@': 318}), 137: (1, {'@': 318}), 118: (1, {'@': 318}), 86: (1, {'@': 318}), 108: (1, {'@': 318}), 84: (1, {'@': 318}), 103: (1, {'@': 318}), 95: (1, {'@': 318}), 102: (1, {'@': 318}), 2: (1, {'@': 318}), 88: (1, {'@': 318})}, 370: {102: (1, {'@': 411}), 88: (1, {'@': 411})}, 371: {88: (1, {'@': 485}), 94: (1, {'@': 485}), 95: (1, {'@': 485}), 84: (1, {'@': 485}), 102: (1, {'@': 485})}, 372: {89: (1, {'@': 136}), 39: (1, {'@': 136})}, 373: {51: (0, 583), 12: (0, 262), 29: (0, 411), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 4: (0, 186), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 2: (0, 408), 68: (0, 250), 82: (0, 106), 48: (0, 495), 49: (0, 579), 32: (0, 422)}, 374: {130: (0, 327), 138: (1, {'@': 263}), 125: (1, {'@': 263}), 126: (1, {'@': 263}), 105: (1, {'@': 263}), 39: (1, {'@': 263}), 89: (1, {'@': 263}), 64: (1, {'@': 263}), 128: (1, {'@': 263}), 129: (1, {'@': 263}), 119: (1, {'@': 263}), 107: (1, {'@': 263}), 120: (1, {'@': 263}), 113: (1, {'@': 263}), 131: (1, {'@': 263}), 114: (1, {'@': 263}), 83: (1, {'@': 263}), 132: (1, {'@': 263}), 115: (1, {'@': 263}), 133: (1, {'@': 263}), 116: (1, {'@': 263}), 121: (1, {'@': 263}), 122: (1, {'@': 263}), 123: (1, {'@': 263}), 109: (1, {'@': 263}), 134: (1, {'@': 263}), 135: (1, {'@': 263}), 117: (1, {'@': 263}), 136: (1, {'@': 263}), 94: (1, {'@': 263}), 118: (1, {'@': 263}), 86: (1, {'@': 263}), 108: (1, {'@': 263}), 84: (1, {'@': 263}), 103: (1, {'@': 263}), 95: (1, {'@': 263}), 102: (1, {'@': 263}), 2: (1, {'@': 263}), 88: (1, {'@': 263})}, 375: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 43: (0, 559), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 376: {109: (0, 271), 125: (1, {'@': 261}), 126: (1, {'@': 261}), 105: (1, {'@': 261}), 39: (1, {'@': 261}), 89: (1, {'@': 261}), 64: (1, {'@': 261}), 128: (1, {'@': 261}), 129: (1, {'@': 261}), 119: (1, {'@': 261}), 107: (1, {'@': 261}), 120: (1, {'@': 261}), 113: (1, {'@': 261}), 131: (1, {'@': 261}), 114: (1, {'@': 261}), 83: (1, {'@': 261}), 118: (1, {'@': 261}), 132: (1, {'@': 261}), 115: (1, {'@': 261}), 133: (1, {'@': 261}), 116: (1, {'@': 261}), 121: (1, {'@': 261}), 122: (1, {'@': 261}), 123: (1, {'@': 261}), 134: (1, {'@': 261}), 135: (1, {'@': 261}), 117: (1, {'@': 261}), 136: (1, {'@': 261}), 94: (1, {'@': 261}), 138: (1, {'@': 261}), 86: (1, {'@': 261}), 108: (1, {'@': 261}), 84: (1, {'@': 261}), 103: (1, {'@': 261}), 95: (1, {'@': 261}), 102: (1, {'@': 261}), 2: (1, {'@': 261}), 88: (1, {'@': 261})}, 377: {40: (1, {'@': 307}), 48: (1, {'@': 307}), 89: (1, {'@': 307}), 105: (1, {'@': 307}), 119: (1, {'@': 307}), 106: (1, {'@': 307}), 107: (1, {'@': 307}), 120: (1, {'@': 307}), 83: (1, {'@': 307}), 72: (1, {'@': 307}), 121: (1, {'@': 307}), 139: (1, {'@': 307}), 122: (1, {'@': 307}), 123: (1, {'@': 307}), 109: (1, {'@': 307}), 124: (1, {'@': 307}), 94: (1, {'@': 307}), 138: (1, {'@': 307}), 125: (1, {'@': 307}), 126: (1, {'@': 307}), 127: (1, {'@': 307}), 39: (1, {'@': 307}), 64: (1, {'@': 307}), 110: (1, {'@': 307}), 128: (1, {'@': 307}), 111: (1, {'@': 307}), 129: (1, {'@': 307}), 130: (1, {'@': 307}), 112: (1, {'@': 307}), 113: (1, {'@': 307}), 131: (1, {'@': 307}), 114: (1, {'@': 307}), 12: (1, {'@': 307}), 132: (1, {'@': 307}), 115: (1, {'@': 307}), 99: (1, {'@': 307}), 133: (1, {'@': 307}), 116: (1, {'@': 307}), 134: (1, {'@': 307}), 135: (1, {'@': 307}), 117: (1, {'@': 307}), 52: (1, {'@': 307}), 136: (1, {'@': 307}), 137: (1, {'@': 307}), 118: (1, {'@': 307}), 86: (1, {'@': 307}), 108: (1, {'@': 307}), 84: (1, {'@': 307}), 103: (1, {'@': 307}), 95: (1, {'@': 307}), 102: (1, {'@': 307}), 2: (1, {'@': 307}), 88: (1, {'@': 307})}, 378: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 43: (0, 319), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 379: {68: (1, {'@': 167}), 40: (1, {'@': 167}), 21: (1, {'@': 167}), 48: (1, {'@': 167}), 59: (1, {'@': 167}), 51: (1, {'@': 167}), 72: (1, {'@': 167}), 49: (1, {'@': 167}), 82: (1, {'@': 167}), 64: (1, {'@': 167}), 35: (1, {'@': 167}), 32: (1, {'@': 167}), 80: (1, {'@': 167}), 12: (1, {'@': 167}), 34: (1, {'@': 167}), 70: (1, {'@': 167}), 77: (1, {'@': 167}), 30: (1, {'@': 167}), 54: (1, {'@': 167}), 2: (1, {'@': 167}), 13: (1, {'@': 167})}, 380: {51: (0, 583), 52: (0, 515), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 27: (0, 317), 28: (0, 201), 29: (0, 411), 32: (0, 422), 31: (0, 136), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 43: (0, 531), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579), 133: (1, {'@': 177}), 39: (1, {'@': 177}), 89: (1, {'@': 177}), 123: (1, {'@': 177}), 128: (1, {'@': 177}), 134: (1, {'@': 177}), 129: (1, {'@': 177}), 119: (1, {'@': 177}), 107: (1, {'@': 177}), 136: (1, {'@': 177}), 117: (1, {'@': 177}), 120: (1, {'@': 177}), 135: (1, {'@': 177}), 113: (1, {'@': 177}), 114: (1, {'@': 177}), 118: (1, {'@': 177})}, 381: {89: (1, {'@': 454}), 105: (1, {'@': 454}), 119: (1, {'@': 454}), 107: (1, {'@': 454}), 120: (1, {'@': 454}), 108: (1, {'@': 454}), 83: (1, {'@': 454}), 103: (1, {'@': 454}), 121: (1, {'@': 454}), 122: (1, {'@': 454}), 123: (1, {'@': 454}), 84: (1, {'@': 454}), 94: (1, {'@': 454}), 86: (1, {'@': 454}), 95: (1, {'@': 454}), 125: (1, {'@': 454}), 126: (1, {'@': 454}), 39: (1, {'@': 454}), 64: (1, {'@': 454}), 128: (1, {'@': 454}), 129: (1, {'@': 454}), 102: (1, {'@': 454}), 113: (1, {'@': 454}), 131: (1, {'@': 454}), 114: (1, {'@': 454}), 118: (1, {'@': 454}), 132: (1, {'@': 454}), 115: (1, {'@': 454}), 133: (1, {'@': 454}), 116: (1, {'@': 454}), 2: (1, {'@': 454}), 134: (1, {'@': 454}), 135: (1, {'@': 454}), 88: (1, {'@': 454}), 117: (1, {'@': 454}), 136: (1, {'@': 454}), 138: (1, {'@': 454})}, 382: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 99: (0, 86), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 157: (0, 152), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 43: (0, 4), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579), 84: (1, {'@': 361})}, 383: {51: (0, 583), 12: (0, 262), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 61: (0, 326), 42: (0, 364), 56: (0, 440), 2: (0, 408), 68: (0, 250), 82: (0, 106), 48: (0, 495), 49: (0, 579), 32: (0, 422)}, 384: {40: (1, {'@': 468}), 48: (1, {'@': 468}), 89: (1, {'@': 468}), 105: (1, {'@': 468}), 119: (1, {'@': 468}), 106: (1, {'@': 468}), 107: (1, {'@': 468}), 120: (1, {'@': 468}), 83: (1, {'@': 468}), 72: (1, {'@': 468}), 121: (1, {'@': 468}), 139: (1, {'@': 468}), 122: (1, {'@': 468}), 123: (1, {'@': 468}), 109: (1, {'@': 468}), 124: (1, {'@': 468}), 94: (1, {'@': 468}), 125: (1, {'@': 468}), 126: (1, {'@': 468}), 127: (1, {'@': 468}), 39: (1, {'@': 468}), 64: (1, {'@': 468}), 110: (1, {'@': 468}), 128: (1, {'@': 468}), 111: (1, {'@': 468}), 129: (1, {'@': 468}), 130: (1, {'@': 468}), 112: (1, {'@': 468}), 113: (1, {'@': 468}), 131: (1, {'@': 468}), 114: (1, {'@': 468}), 12: (1, {'@': 468}), 118: (1, {'@': 468}), 77: (1, {'@': 468}), 132: (1, {'@': 468}), 115: (1, {'@': 468}), 99: (1, {'@': 468}), 54: (1, {'@': 468}), 133: (1, {'@': 468}), 116: (1, {'@': 468}), 134: (1, {'@': 468}), 135: (1, {'@': 468}), 117: (1, {'@': 468}), 52: (1, {'@': 468}), 136: (1, {'@': 468}), 137: (1, {'@': 468}), 138: (1, {'@': 468}), 108: (1, {'@': 468}), 86: (1, {'@': 468}), 84: (1, {'@': 468}), 103: (1, {'@': 468}), 95: (1, {'@': 468}), 102: (1, {'@': 468}), 2: (1, {'@': 468}), 88: (1, {'@': 468})}, 385: {68: (1, {'@': 420}), 40: (1, {'@': 420}), 21: (1, {'@': 420}), 48: (1, {'@': 420}), 59: (1, {'@': 420}), 51: (1, {'@': 420}), 98: (1, {'@': 420}), 92: (1, {'@': 420}), 72: (1, {'@': 420}), 49: (1, {'@': 420}), 8: (1, {'@': 420}), 50: (1, {'@': 420}), 82: (1, {'@': 420}), 93: (1, {'@': 420}), 94: (1, {'@': 420}), 95: (1, {'@': 420}), 39: (1, {'@': 420}), 41: (1, {'@': 420}), 35: (1, {'@': 420}), 20: (1, {'@': 420}), 32: (1, {'@': 420}), 64: (1, {'@': 420}), 80: (1, {'@': 420}), 25: (1, {'@': 420}), 96: (1, {'@': 420}), 47: (1, {'@': 420}), 12: (1, {'@': 420}), 34: (1, {'@': 420}), 70: (1, {'@': 420}), 77: (1, {'@': 420}), 19: (1, {'@': 420}), 81: (1, {'@': 420}), 30: (1, {'@': 420}), 54: (1, {'@': 420}), 2: (1, {'@': 420}), 37: (1, {'@': 420}), 52: (1, {'@': 420}), 97: (1, {'@': 420}), 9: (1, {'@': 420}), 13: (1, {'@': 420})}, 386: {94: (0, 352), 188: (0, 370), 102: (1, {'@': 412}), 88: (1, {'@': 412})}, 387: {132: (0, 303), 205: (0, 314), 39: (1, {'@': 252}), 89: (1, {'@': 252}), 128: (1, {'@': 252}), 129: (1, {'@': 252}), 119: (1, {'@': 252}), 107: (1, {'@': 252}), 120: (1, {'@': 252}), 113: (1, {'@': 252}), 114: (1, {'@': 252}), 83: (1, {'@': 252}), 133: (1, {'@': 252}), 123: (1, {'@': 252}), 134: (1, {'@': 252}), 135: (1, {'@': 252}), 117: (1, {'@': 252}), 136: (1, {'@': 252}), 94: (1, {'@': 252}), 118: (1, {'@': 252}), 86: (1, {'@': 252}), 108: (1, {'@': 252}), 88: (1, {'@': 252}), 2: (1, {'@': 252}), 102: (1, {'@': 252}), 84: (1, {'@': 252}), 95: (1, {'@': 252}), 103: (1, {'@': 252})}, 388: {68: (1, {'@': 135}), 40: (1, {'@': 135}), 48: (1, {'@': 135}), 21: (1, {'@': 135}), 59: (1, {'@': 135}), 51: (1, {'@': 135}), 98: (1, {'@': 135}), 91: (1, {'@': 135}), 92: (1, {'@': 135}), 72: (1, {'@': 135}), 49: (1, {'@': 135}), 8: (1, {'@': 135}), 50: (1, {'@': 135}), 82: (1, {'@': 135}), 93: (1, {'@': 135}), 94: (1, {'@': 135}), 95: (1, {'@': 135}), 39: (1, {'@': 135}), 41: (1, {'@': 135}), 35: (1, {'@': 135}), 20: (1, {'@': 135}), 32: (1, {'@': 135}), 80: (1, {'@': 135}), 64: (1, {'@': 135}), 25: (1, {'@': 135}), 96: (1, {'@': 135}), 47: (1, {'@': 135}), 12: (1, {'@': 135}), 34: (1, {'@': 135}), 77: (1, {'@': 135}), 70: (1, {'@': 135}), 19: (1, {'@': 135}), 81: (1, {'@': 135}), 30: (1, {'@': 135}), 54: (1, {'@': 135}), 2: (1, {'@': 135}), 37: (1, {'@': 135}), 52: (1, {'@': 135}), 97: (1, {'@': 135}), 9: (1, {'@': 135}), 13: (1, {'@': 135}), 103: (1, {'@': 135}), 104: (1, {'@': 135})}, 389: {107: (0, 512), 86: (1, {'@': 115}), 83: (1, {'@': 115})}, 390: {186: (0, 207), 127: (0, 225), 206: (0, 203), 111: (0, 218), 89: (1, {'@': 268}), 105: (1, {'@': 268}), 119: (1, {'@': 268}), 106: (1, {'@': 268}), 107: (1, {'@': 268}), 120: (1, {'@': 268}), 83: (1, {'@': 268}), 121: (1, {'@': 268}), 122: (1, {'@': 268}), 123: (1, {'@': 268}), 109: (1, {'@': 268}), 94: (1, {'@': 268}), 138: (1, {'@': 268}), 125: (1, {'@': 268}), 126: (1, {'@': 268}), 39: (1, {'@': 268}), 64: (1, {'@': 268}), 128: (1, {'@': 268}), 129: (1, {'@': 268}), 130: (1, {'@': 268}), 113: (1, {'@': 268}), 131: (1, {'@': 268}), 114: (1, {'@': 268}), 132: (1, {'@': 268}), 115: (1, {'@': 268}), 133: (1, {'@': 268}), 116: (1, {'@': 268}), 134: (1, {'@': 268}), 135: (1, {'@': 268}), 117: (1, {'@': 268}), 136: (1, {'@': 268}), 118: (1, {'@': 268}), 86: (1, {'@': 268}), 108: (1, {'@': 268}), 84: (1, {'@': 268}), 103: (1, {'@': 268}), 95: (1, {'@': 268}), 102: (1, {'@': 268}), 2: (1, {'@': 268}), 88: (1, {'@': 268})}, 391: {51: (0, 583), 12: (0, 262), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 56: (0, 224), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 61: (0, 326), 42: (0, 364), 2: (0, 408), 68: (0, 250), 82: (0, 106), 48: (0, 495), 49: (0, 579), 23: (0, 331), 32: (0, 422)}, 392: {86: (1, {'@': 308}), 40: (1, {'@': 308}), 48: (1, {'@': 308}), 125: (1, {'@': 308}), 126: (1, {'@': 308}), 127: (1, {'@': 308}), 105: (1, {'@': 308}), 64: (1, {'@': 308}), 110: (1, {'@': 308}), 111: (1, {'@': 308}), 130: (1, {'@': 308}), 106: (1, {'@': 308}), 112: (1, {'@': 308}), 108: (1, {'@': 308}), 131: (1, {'@': 308}), 83: (1, {'@': 308}), 12: (1, {'@': 308}), 72: (1, {'@': 308}), 132: (1, {'@': 308}), 115: (1, {'@': 308}), 99: (1, {'@': 308}), 116: (1, {'@': 308}), 121: (1, {'@': 308}), 139: (1, {'@': 308}), 122: (1, {'@': 308}), 109: (1, {'@': 308}), 52: (1, {'@': 308}), 137: (1, {'@': 308}), 124: (1, {'@': 308}), 94: (1, {'@': 308}), 138: (1, {'@': 308}), 84: (1, {'@': 308}), 89: (1, {'@': 308}), 119: (1, {'@': 308}), 107: (1, {'@': 308}), 120: (1, {'@': 308}), 103: (1, {'@': 308}), 123: (1, {'@': 308}), 95: (1, {'@': 308}), 39: (1, {'@': 308}), 128: (1, {'@': 308}), 129: (1, {'@': 308}), 102: (1, {'@': 308}), 113: (1, {'@': 308}), 114: (1, {'@': 308}), 133: (1, {'@': 308}), 2: (1, {'@': 308}), 134: (1, {'@': 308}), 135: (1, {'@': 308}), 88: (1, {'@': 308}), 117: (1, {'@': 308}), 136: (1, {'@': 308}), 118: (1, {'@': 308})}, 393: {83: (0, 380), 133: (1, {'@': 178}), 39: (1, {'@': 178}), 89: (1, {'@': 178}), 123: (1, {'@': 178}), 128: (1, {'@': 178}), 134: (1, {'@': 178}), 129: (1, {'@': 178}), 119: (1, {'@': 178}), 107: (1, {'@': 178}), 136: (1, {'@': 178}), 117: (1, {'@': 178}), 120: (1, {'@': 178}), 135: (1, {'@': 178}), 113: (1, {'@': 178}), 114: (1, {'@': 178}), 118: (1, {'@': 178})}, 394: {68: (1, {'@': 172}), 40: (1, {'@': 172}), 21: (1, {'@': 172}), 48: (1, {'@': 172}), 59: (1, {'@': 172}), 51: (1, {'@': 172}), 72: (1, {'@': 172}), 49: (1, {'@': 172}), 82: (1, {'@': 172}), 64: (1, {'@': 172}), 35: (1, {'@': 172}), 32: (1, {'@': 172}), 80: (1, {'@': 172}), 12: (1, {'@': 172}), 34: (1, {'@': 172}), 70: (1, {'@': 172}), 77: (1, {'@': 172}), 30: (1, {'@': 172}), 54: (1, {'@': 172}), 2: (1, {'@': 172}), 13: (1, {'@': 172})}, 395: {83: (0, 572), 207: (0, 434), 86: (1, {'@': 239})}, 396: {51: (0, 583), 12: (0, 262), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 35: (0, 461), 38: (0, 148), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 2: (0, 408), 68: (0, 250), 82: (0, 106), 48: (0, 495), 49: (0, 579), 32: (0, 422)}, 397: {51: (0, 583), 52: (0, 515), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 27: (0, 317), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 43: (0, 531), 44: (0, 543), 2: (0, 408), 31: (0, 418), 82: (0, 106), 48: (0, 495), 49: (0, 579), 102: (1, {'@': 368}), 84: (1, {'@': 368})}, 398: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 43: (0, 205), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 399: {51: (0, 583), 52: (0, 515), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 27: (0, 317), 28: (0, 201), 29: (0, 411), 32: (0, 422), 31: (0, 136), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 43: (0, 531), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579), 102: (1, {'@': 366}), 84: (1, {'@': 366})}, 400: {83: (0, 500), 88: (1, {'@': 378})}, 401: {208: (0, 83), 139: (0, 14), 89: (1, {'@': 212}), 108: (1, {'@': 212}), 83: (1, {'@': 212}), 39: (1, {'@': 212}), 47: (1, {'@': 212})}, 402: {89: (1, {'@': 196}), 39: (1, {'@': 196})}, 403: {51: (0, 583), 12: (0, 262), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 61: (0, 326), 56: (0, 453), 42: (0, 364), 2: (0, 408), 68: (0, 250), 82: (0, 106), 48: (0, 495), 49: (0, 579), 32: (0, 422)}, 404: {140: (0, 316)}, 405: {51: (0, 583), 12: (0, 262), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 56: (0, 224), 23: (0, 246), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 61: (0, 326), 42: (0, 364), 2: (0, 408), 68: (0, 250), 82: (0, 106), 48: (0, 495), 49: (0, 579), 32: (0, 422)}, 406: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 43: (0, 7), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 407: {68: (1, {'@': 279}), 40: (1, {'@': 279}), 48: (1, {'@': 279}), 59: (1, {'@': 279}), 51: (1, {'@': 279}), 72: (1, {'@': 279}), 49: (1, {'@': 279}), 82: (1, {'@': 279}), 35: (1, {'@': 279}), 32: (1, {'@': 279}), 80: (1, {'@': 279}), 12: (1, {'@': 279}), 34: (1, {'@': 279}), 70: (1, {'@': 279}), 77: (1, {'@': 279}), 30: (1, {'@': 279}), 54: (1, {'@': 279}), 2: (1, {'@': 279}), 13: (1, {'@': 279})}, 408: {39: (1, {'@': 410}), 89: (1, {'@': 410}), 108: (1, {'@': 410}), 83: (1, {'@': 410}), 139: (1, {'@': 410}), 40: (1, {'@': 410}), 48: (1, {'@': 410}), 105: (1, {'@': 410}), 119: (1, {'@': 410}), 106: (1, {'@': 410}), 107: (1, {'@': 410}), 120: (1, {'@': 410}), 72: (1, {'@': 410}), 121: (1, {'@': 410}), 122: (1, {'@': 410}), 123: (1, {'@': 410}), 109: (1, {'@': 410}), 124: (1, {'@': 410}), 94: (1, {'@': 410}), 125: (1, {'@': 410}), 126: (1, {'@': 410}), 127: (1, {'@': 410}), 64: (1, {'@': 410}), 110: (1, {'@': 410}), 128: (1, {'@': 410}), 111: (1, {'@': 410}), 129: (1, {'@': 410}), 187: (1, {'@': 410}), 130: (1, {'@': 410}), 112: (1, {'@': 410}), 113: (1, {'@': 410}), 131: (1, {'@': 410}), 114: (1, {'@': 410}), 12: (1, {'@': 410}), 118: (1, {'@': 410}), 132: (1, {'@': 410}), 115: (1, {'@': 410}), 99: (1, {'@': 410}), 133: (1, {'@': 410}), 116: (1, {'@': 410}), 2: (1, {'@': 410}), 134: (1, {'@': 410}), 135: (1, {'@': 410}), 117: (1, {'@': 410}), 52: (1, {'@': 410}), 136: (1, {'@': 410}), 137: (1, {'@': 410}), 138: (1, {'@': 410}), 86: (1, {'@': 410}), 84: (1, {'@': 410}), 88: (1, {'@': 410}), 47: (1, {'@': 410}), 103: (1, {'@': 410}), 95: (1, {'@': 410}), 102: (1, {'@': 410}), 68: (1, {'@': 410}), 59: (1, {'@': 410}), 98: (1, {'@': 410}), 50: (1, {'@': 410}), 35: (1, {'@': 410}), 20: (1, {'@': 410}), 32: (1, {'@': 410}), 80: (1, {'@': 410}), 25: (1, {'@': 410}), 96: (1, {'@': 410}), 34: (1, {'@': 410}), 77: (1, {'@': 410}), 19: (1, {'@': 410}), 97: (1, {'@': 410}), 21: (1, {'@': 410}), 51: (1, {'@': 410}), 91: (1, {'@': 410}), 92: (1, {'@': 410}), 49: (1, {'@': 410}), 8: (1, {'@': 410}), 82: (1, {'@': 410}), 93: (1, {'@': 410}), 41: (1, {'@': 410}), 70: (1, {'@': 410}), 81: (1, {'@': 410}), 30: (1, {'@': 410}), 54: (1, {'@': 410}), 37: (1, {'@': 410}), 9: (1, {'@': 410}), 13: (1, {'@': 410})}, 409: {68: (1, {'@': 166}), 40: (1, {'@': 166}), 21: (1, {'@': 166}), 48: (1, {'@': 166}), 59: (1, {'@': 166}), 51: (1, {'@': 166}), 72: (1, {'@': 166}), 49: (1, {'@': 166}), 82: (1, {'@': 166}), 64: (1, {'@': 166}), 35: (1, {'@': 166}), 32: (1, {'@': 166}), 80: (1, {'@': 166}), 12: (1, {'@': 166}), 34: (1, {'@': 166}), 70: (1, {'@': 166}), 77: (1, {'@': 166}), 30: (1, {'@': 166}), 54: (1, {'@': 166}), 2: (1, {'@': 166}), 13: (1, {'@': 166})}, 410: {40: (1, {'@': 159}), 2: (1, {'@': 159})}, 411: {209: (0, 374), 130: (0, 342), 138: (1, {'@': 264}), 125: (1, {'@': 264}), 126: (1, {'@': 264}), 105: (1, {'@': 264}), 39: (1, {'@': 264}), 89: (1, {'@': 264}), 64: (1, {'@': 264}), 128: (1, {'@': 264}), 129: (1, {'@': 264}), 119: (1, {'@': 264}), 107: (1, {'@': 264}), 120: (1, {'@': 264}), 113: (1, {'@': 264}), 131: (1, {'@': 264}), 114: (1, {'@': 264}), 83: (1, {'@': 264}), 132: (1, {'@': 264}), 115: (1, {'@': 264}), 133: (1, {'@': 264}), 116: (1, {'@': 264}), 121: (1, {'@': 264}), 122: (1, {'@': 264}), 123: (1, {'@': 264}), 109: (1, {'@': 264}), 134: (1, {'@': 264}), 135: (1, {'@': 264}), 117: (1, {'@': 264}), 136: (1, {'@': 264}), 94: (1, {'@': 264}), 118: (1, {'@': 264}), 86: (1, {'@': 264}), 108: (1, {'@': 264}), 84: (1, {'@': 264}), 103: (1, {'@': 264}), 95: (1, {'@': 264}), 102: (1, {'@': 264}), 2: (1, {'@': 264}), 88: (1, {'@': 264})}, 412: {88: (0, 522)}, 413: {40: (1, {'@': 302}), 48: (1, {'@': 302}), 89: (1, {'@': 302}), 105: (1, {'@': 302}), 119: (1, {'@': 302}), 106: (1, {'@': 302}), 107: (1, {'@': 302}), 120: (1, {'@': 302}), 83: (1, {'@': 302}), 72: (1, {'@': 302}), 121: (1, {'@': 302}), 139: (1, {'@': 302}), 122: (1, {'@': 302}), 123: (1, {'@': 302}), 109: (1, {'@': 302}), 124: (1, {'@': 302}), 94: (1, {'@': 302}), 138: (1, {'@': 302}), 125: (1, {'@': 302}), 126: (1, {'@': 302}), 127: (1, {'@': 302}), 39: (1, {'@': 302}), 64: (1, {'@': 302}), 110: (1, {'@': 302}), 128: (1, {'@': 302}), 111: (1, {'@': 302}), 129: (1, {'@': 302}), 130: (1, {'@': 302}), 112: (1, {'@': 302}), 113: (1, {'@': 302}), 131: (1, {'@': 302}), 114: (1, {'@': 302}), 12: (1, {'@': 302}), 132: (1, {'@': 302}), 115: (1, {'@': 302}), 99: (1, {'@': 302}), 133: (1, {'@': 302}), 116: (1, {'@': 302}), 134: (1, {'@': 302}), 135: (1, {'@': 302}), 117: (1, {'@': 302}), 52: (1, {'@': 302}), 136: (1, {'@': 302}), 137: (1, {'@': 302}), 118: (1, {'@': 302}), 86: (1, {'@': 302}), 108: (1, {'@': 302}), 84: (1, {'@': 302}), 103: (1, {'@': 302}), 95: (1, {'@': 302}), 102: (1, {'@': 302}), 2: (1, {'@': 302}), 88: (1, {'@': 302})}, 414: {210: (0, 222), 125: (0, 300), 116: (0, 226), 131: (0, 307), 138: (0, 290), 105: (0, 176), 64: (0, 287), 115: (0, 51), 121: (0, 104), 122: (0, 58), 189: (0, 24), 126: (1, {'@': 258}), 39: (1, {'@': 258}), 89: (1, {'@': 258}), 128: (1, {'@': 258}), 129: (1, {'@': 258}), 119: (1, {'@': 258}), 107: (1, {'@': 258}), 120: (1, {'@': 258}), 113: (1, {'@': 258}), 114: (1, {'@': 258}), 83: (1, {'@': 258}), 132: (1, {'@': 258}), 133: (1, {'@': 258}), 123: (1, {'@': 258}), 134: (1, {'@': 258}), 135: (1, {'@': 258}), 117: (1, {'@': 258}), 136: (1, {'@': 258}), 94: (1, {'@': 258}), 118: (1, {'@': 258}), 86: (1, {'@': 258}), 108: (1, {'@': 258}), 88: (1, {'@': 258}), 95: (1, {'@': 258}), 102: (1, {'@': 258}), 103: (1, {'@': 258}), 84: (1, {'@': 258}), 2: (1, {'@': 258})}, 415: {40: (1, {'@': 309}), 48: (1, {'@': 309}), 89: (1, {'@': 309}), 105: (1, {'@': 309}), 119: (1, {'@': 309}), 106: (1, {'@': 309}), 107: (1, {'@': 309}), 120: (1, {'@': 309}), 83: (1, {'@': 309}), 72: (1, {'@': 309}), 121: (1, {'@': 309}), 139: (1, {'@': 309}), 122: (1, {'@': 309}), 123: (1, {'@': 309}), 109: (1, {'@': 309}), 124: (1, {'@': 309}), 94: (1, {'@': 309}), 138: (1, {'@': 309}), 125: (1, {'@': 309}), 126: (1, {'@': 309}), 127: (1, {'@': 309}), 39: (1, {'@': 309}), 64: (1, {'@': 309}), 110: (1, {'@': 309}), 128: (1, {'@': 309}), 111: (1, {'@': 309}), 129: (1, {'@': 309}), 130: (1, {'@': 309}), 112: (1, {'@': 309}), 113: (1, {'@': 309}), 131: (1, {'@': 309}), 114: (1, {'@': 309}), 12: (1, {'@': 309}), 132: (1, {'@': 309}), 115: (1, {'@': 309}), 99: (1, {'@': 309}), 133: (1, {'@': 309}), 116: (1, {'@': 309}), 134: (1, {'@': 309}), 135: (1, {'@': 309}), 117: (1, {'@': 309}), 52: (1, {'@': 309}), 136: (1, {'@': 309}), 137: (1, {'@': 309}), 118: (1, {'@': 309}), 86: (1, {'@': 309}), 108: (1, {'@': 309}), 84: (1, {'@': 309}), 103: (1, {'@': 309}), 95: (1, {'@': 309}), 102: (1, {'@': 309}), 2: (1, {'@': 309}), 88: (1, {'@': 309})}, 416: {126: (1, {'@': 255}), 39: (1, {'@': 255}), 89: (1, {'@': 255}), 128: (1, {'@': 255}), 129: (1, {'@': 255}), 119: (1, {'@': 255}), 107: (1, {'@': 255}), 120: (1, {'@': 255}), 113: (1, {'@': 255}), 114: (1, {'@': 255}), 83: (1, {'@': 255}), 132: (1, {'@': 255}), 133: (1, {'@': 255}), 123: (1, {'@': 255}), 134: (1, {'@': 255}), 135: (1, {'@': 255}), 117: (1, {'@': 255}), 136: (1, {'@': 255}), 94: (1, {'@': 255}), 118: (1, {'@': 255}), 86: (1, {'@': 255}), 108: (1, {'@': 255}), 88: (1, {'@': 255}), 95: (1, {'@': 255}), 102: (1, {'@': 255}), 103: (1, {'@': 255}), 84: (1, {'@': 255}), 2: (1, {'@': 255})}, 417: {51: (0, 583), 12: (0, 262), 4: (0, 289), 29: (0, 411), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 2: (0, 408), 22: (0, 381), 68: (0, 250), 28: (0, 201), 48: (0, 495), 82: (0, 106), 49: (0, 579), 32: (0, 422)}, 418: {83: (1, {'@': 431}), 88: (1, {'@': 431}), 39: (1, {'@': 431}), 89: (1, {'@': 431}), 128: (1, {'@': 431}), 129: (1, {'@': 431}), 119: (1, {'@': 431}), 107: (1, {'@': 431}), 120: (1, {'@': 431}), 113: (1, {'@': 431}), 114: (1, {'@': 431}), 133: (1, {'@': 431}), 123: (1, {'@': 431}), 134: (1, {'@': 431}), 135: (1, {'@': 431}), 117: (1, {'@': 431}), 136: (1, {'@': 431}), 118: (1, {'@': 431}), 102: (1, {'@': 431}), 84: (1, {'@': 431})}, 419: {40: (0, 264)}, 420: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 43: (0, 95), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 421: {101: (0, 435), 52: (0, 525), 0: (0, 389), 148: (0, 231), 100: (0, 489), 86: (0, 425), 149: (0, 257), 2: (0, 408), 99: (0, 23)}, 422: {40: (1, {'@': 402}), 48: (1, {'@': 402}), 89: (1, {'@': 402}), 105: (1, {'@': 402}), 119: (1, {'@': 402}), 106: (1, {'@': 402}), 107: (1, {'@': 402}), 120: (1, {'@': 402}), 83: (1, {'@': 402}), 72: (1, {'@': 402}), 121: (1, {'@': 402}), 139: (1, {'@': 402}), 122: (1, {'@': 402}), 123: (1, {'@': 402}), 109: (1, {'@': 402}), 124: (1, {'@': 402}), 94: (1, {'@': 402}), 138: (1, {'@': 402}), 125: (1, {'@': 402}), 126: (1, {'@': 402}), 127: (1, {'@': 402}), 39: (1, {'@': 402}), 64: (1, {'@': 402}), 110: (1, {'@': 402}), 128: (1, {'@': 402}), 111: (1, {'@': 402}), 129: (1, {'@': 402}), 130: (1, {'@': 402}), 112: (1, {'@': 402}), 113: (1, {'@': 402}), 131: (1, {'@': 402}), 114: (1, {'@': 402}), 12: (1, {'@': 402}), 132: (1, {'@': 402}), 115: (1, {'@': 402}), 99: (1, {'@': 402}), 133: (1, {'@': 402}), 116: (1, {'@': 402}), 134: (1, {'@': 402}), 135: (1, {'@': 402}), 117: (1, {'@': 402}), 52: (1, {'@': 402}), 136: (1, {'@': 402}), 137: (1, {'@': 402}), 118: (1, {'@': 402}), 86: (1, {'@': 402}), 108: (1, {'@': 402}), 84: (1, {'@': 402}), 103: (1, {'@': 402}), 95: (1, {'@': 402}), 102: (1, {'@': 402}), 2: (1, {'@': 402}), 88: (1, {'@': 402})}, 423: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 43: (0, 38), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 424: {0: (0, 573), 2: (0, 408)}, 425: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 43: (0, 503), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 426: {68: (1, {'@': 282}), 40: (1, {'@': 282}), 48: (1, {'@': 282}), 59: (1, {'@': 282}), 51: (1, {'@': 282}), 72: (1, {'@': 282}), 49: (1, {'@': 282}), 82: (1, {'@': 282}), 35: (1, {'@': 282}), 32: (1, {'@': 282}), 80: (1, {'@': 282}), 12: (1, {'@': 282}), 34: (1, {'@': 282}), 70: (1, {'@': 282}), 77: (1, {'@': 282}), 30: (1, {'@': 282}), 54: (1, {'@': 282}), 2: (1, {'@': 282}), 13: (1, {'@': 282})}, 427: {11: (0, 137), 4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 12: (0, 534), 13: (0, 541), 14: (0, 587), 15: (0, 183), 16: (0, 229), 17: (0, 215), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 22: (0, 414), 23: (0, 332), 24: (0, 445), 25: (0, 442), 26: (0, 546), 27: (0, 317), 28: (0, 201), 29: (0, 411), 30: (0, 519), 31: (0, 574), 32: (0, 422), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 37: (0, 212), 38: (0, 459), 39: (0, 404), 0: (0, 493), 40: (0, 508), 41: (0, 378), 42: (0, 364), 43: (0, 531), 44: (0, 543), 45: (0, 336), 46: (0, 538), 2: (0, 408), 47: (0, 576), 48: (0, 495), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 60: (0, 586), 61: (0, 326), 62: (0, 372), 63: (0, 536), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 69: (0, 219), 70: (0, 296), 71: (0, 282), 72: (0, 242), 73: (0, 235), 74: (0, 206), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 81: (0, 96), 82: (0, 106)}, 428: {40: (1, {'@': 320}), 48: (1, {'@': 320}), 89: (1, {'@': 320}), 105: (1, {'@': 320}), 119: (1, {'@': 320}), 106: (1, {'@': 320}), 107: (1, {'@': 320}), 120: (1, {'@': 320}), 83: (1, {'@': 320}), 72: (1, {'@': 320}), 121: (1, {'@': 320}), 139: (1, {'@': 320}), 122: (1, {'@': 320}), 123: (1, {'@': 320}), 109: (1, {'@': 320}), 124: (1, {'@': 320}), 94: (1, {'@': 320}), 138: (1, {'@': 320}), 125: (1, {'@': 320}), 126: (1, {'@': 320}), 127: (1, {'@': 320}), 39: (1, {'@': 320}), 64: (1, {'@': 320}), 110: (1, {'@': 320}), 128: (1, {'@': 320}), 111: (1, {'@': 320}), 129: (1, {'@': 320}), 130: (1, {'@': 320}), 112: (1, {'@': 320}), 113: (1, {'@': 320}), 131: (1, {'@': 320}), 114: (1, {'@': 320}), 12: (1, {'@': 320}), 132: (1, {'@': 320}), 115: (1, {'@': 320}), 99: (1, {'@': 320}), 133: (1, {'@': 320}), 116: (1, {'@': 320}), 134: (1, {'@': 320}), 135: (1, {'@': 320}), 117: (1, {'@': 320}), 52: (1, {'@': 320}), 136: (1, {'@': 320}), 137: (1, {'@': 320}), 118: (1, {'@': 320}), 86: (1, {'@': 320}), 108: (1, {'@': 320}), 84: (1, {'@': 320}), 103: (1, {'@': 320}), 95: (1, {'@': 320}), 102: (1, {'@': 320}), 2: (1, {'@': 320}), 88: (1, {'@': 320})}, 429: {0: (0, 439), 2: (0, 408)}, 430: {68: (1, {'@': 174}), 40: (1, {'@': 174}), 21: (1, {'@': 174}), 48: (1, {'@': 174}), 59: (1, {'@': 174}), 51: (1, {'@': 174}), 72: (1, {'@': 174}), 49: (1, {'@': 174}), 82: (1, {'@': 174}), 64: (1, {'@': 174}), 35: (1, {'@': 174}), 32: (1, {'@': 174}), 80: (1, {'@': 174}), 12: (1, {'@': 174}), 34: (1, {'@': 174}), 70: (1, {'@': 174}), 77: (1, {'@': 174}), 30: (1, {'@': 174}), 54: (1, {'@': 174}), 2: (1, {'@': 174}), 13: (1, {'@': 174})}, 431: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 14: (0, 158), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 432: {4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 162: (0, 560), 12: (0, 534), 13: (0, 541), 14: (0, 587), 16: (0, 229), 17: (0, 215), 163: (0, 247), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 22: (0, 414), 23: (0, 332), 24: (0, 445), 25: (0, 442), 26: (0, 546), 27: (0, 317), 164: (0, 255), 28: (0, 201), 95: (0, 193), 37: (0, 187), 29: (0, 411), 31: (0, 454), 94: (0, 443), 32: (0, 422), 33: (0, 484), 34: (0, 483), 35: (0, 461), 93: (0, 472), 36: (0, 477), 30: (0, 519), 38: (0, 459), 165: (0, 499), 0: (0, 493), 40: (0, 508), 41: (0, 378), 166: (0, 341), 171: (0, 385), 167: (0, 571), 42: (0, 364), 43: (0, 531), 44: (0, 543), 47: (0, 576), 45: (0, 336), 46: (0, 538), 2: (0, 408), 15: (0, 516), 48: (0, 495), 168: (0, 175), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 97: (0, 184), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 63: (0, 245), 60: (0, 586), 61: (0, 326), 62: (0, 372), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 69: (0, 219), 169: (0, 302), 92: (0, 298), 70: (0, 296), 71: (0, 282), 170: (0, 274), 72: (0, 242), 73: (0, 235), 74: (0, 206), 39: (0, 478), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 172: (0, 141), 81: (0, 96), 82: (0, 106), 96: (0, 124), 98: (1, {'@': 87})}, 433: {86: (0, 195)}, 434: {83: (0, 3), 86: (1, {'@': 238})}, 435: {211: (0, 565), 83: (0, 306), 86: (1, {'@': 111})}, 436: {107: (0, 505), 89: (1, {'@': 161}), 39: (1, {'@': 161})}, 437: {89: (1, {'@': 138}), 39: (1, {'@': 138})}, 438: {139: (0, 528), 47: (1, {'@': 200}), 2: (1, {'@': 200})}, 439: {83: (0, 584), 212: (0, 343), 89: (1, {'@': 216}), 39: (1, {'@': 216})}, 440: {48: (1, {'@': 297}), 89: (1, {'@': 297}), 105: (1, {'@': 297}), 119: (1, {'@': 297}), 106: (1, {'@': 297}), 107: (1, {'@': 297}), 120: (1, {'@': 297}), 83: (1, {'@': 297}), 72: (1, {'@': 297}), 121: (1, {'@': 297}), 122: (1, {'@': 297}), 123: (1, {'@': 297}), 109: (1, {'@': 297}), 124: (1, {'@': 297}), 94: (1, {'@': 297}), 125: (1, {'@': 297}), 126: (1, {'@': 297}), 127: (1, {'@': 297}), 39: (1, {'@': 297}), 64: (1, {'@': 297}), 110: (1, {'@': 297}), 128: (1, {'@': 297}), 111: (1, {'@': 297}), 129: (1, {'@': 297}), 130: (1, {'@': 297}), 112: (1, {'@': 297}), 113: (1, {'@': 297}), 131: (1, {'@': 297}), 114: (1, {'@': 297}), 118: (1, {'@': 297}), 132: (1, {'@': 297}), 115: (1, {'@': 297}), 133: (1, {'@': 297}), 116: (1, {'@': 297}), 134: (1, {'@': 297}), 135: (1, {'@': 297}), 117: (1, {'@': 297}), 52: (1, {'@': 297}), 136: (1, {'@': 297}), 137: (1, {'@': 297}), 138: (1, {'@': 297}), 86: (1, {'@': 297}), 108: (1, {'@': 297}), 84: (1, {'@': 297}), 103: (1, {'@': 297}), 95: (1, {'@': 297}), 102: (1, {'@': 297}), 2: (1, {'@': 297}), 88: (1, {'@': 297})}, 441: {89: (1, {'@': 203}), 83: (1, {'@': 203}), 39: (1, {'@': 203})}, 442: {2: (0, 408), 0: (0, 497)}, 443: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 43: (0, 520), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 444: {118: (0, 379), 123: (0, 211), 193: (0, 240), 119: (0, 243), 128: (0, 232), 107: (0, 239), 129: (0, 233), 134: (0, 491), 136: (0, 394), 120: (0, 409), 114: (0, 532), 133: (0, 529), 117: (0, 462), 135: (0, 468), 213: (0, 455), 113: (0, 430), 89: (1, {'@': 144}), 39: (1, {'@': 144})}, 445: {89: (0, 471), 39: (0, 388), 214: (0, 446)}, 446: {89: (0, 94), 39: (0, 20)}, 447: {4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 12: (0, 534), 13: (0, 541), 14: (0, 587), 15: (0, 183), 16: (0, 229), 17: (0, 215), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 22: (0, 414), 23: (0, 332), 11: (0, 103), 24: (0, 445), 25: (0, 442), 26: (0, 546), 27: (0, 317), 28: (0, 201), 29: (0, 411), 30: (0, 519), 31: (0, 574), 32: (0, 422), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 37: (0, 212), 38: (0, 459), 39: (0, 404), 0: (0, 493), 40: (0, 508), 41: (0, 378), 42: (0, 364), 43: (0, 531), 44: (0, 543), 45: (0, 336), 46: (0, 538), 2: (0, 408), 47: (0, 576), 48: (0, 495), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 60: (0, 586), 61: (0, 326), 62: (0, 372), 63: (0, 536), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 69: (0, 219), 70: (0, 296), 71: (0, 282), 72: (0, 242), 73: (0, 235), 74: (0, 206), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 81: (0, 96), 82: (0, 106)}, 448: {215: (0, 438), 0: (0, 401), 1: (0, 350), 2: (0, 408), 216: (0, 366), 139: (0, 320)}, 449: {39: (1, {'@': 248}), 89: (1, {'@': 248}), 128: (1, {'@': 248}), 129: (1, {'@': 248}), 119: (1, {'@': 248}), 107: (1, {'@': 248}), 120: (1, {'@': 248}), 113: (1, {'@': 248}), 114: (1, {'@': 248}), 83: (1, {'@': 248}), 133: (1, {'@': 248}), 123: (1, {'@': 248}), 134: (1, {'@': 248}), 135: (1, {'@': 248}), 117: (1, {'@': 248}), 136: (1, {'@': 248}), 118: (1, {'@': 248}), 86: (1, {'@': 248}), 108: (1, {'@': 248}), 88: (1, {'@': 248}), 2: (1, {'@': 248}), 102: (1, {'@': 248}), 95: (1, {'@': 248}), 84: (1, {'@': 248})}, 450: {177: (0, 312), 217: (0, 530), 83: (0, 547), 95: (0, 533), 178: (0, 221), 179: (0, 371), 84: (1, {'@': 360})}, 451: {88: (0, 523)}, 452: {51: (0, 583), 12: (0, 262), 4: (0, 289), 29: (0, 411), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 22: (0, 414), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 64: (0, 564), 44: (0, 543), 2: (0, 408), 68: (0, 250), 28: (0, 201), 48: (0, 495), 82: (0, 106), 57: (0, 340), 49: (0, 579), 32: (0, 422)}, 453: {48: (1, {'@': 465}), 89: (1, {'@': 465}), 105: (1, {'@': 465}), 106: (1, {'@': 465}), 107: (1, {'@': 465}), 108: (1, {'@': 465}), 83: (1, {'@': 465}), 103: (1, {'@': 465}), 84: (1, {'@': 465}), 109: (1, {'@': 465}), 95: (1, {'@': 465}), 110: (1, {'@': 465}), 111: (1, {'@': 465}), 112: (1, {'@': 465}), 113: (1, {'@': 465}), 114: (1, {'@': 465}), 115: (1, {'@': 465}), 116: (1, {'@': 465}), 117: (1, {'@': 465}), 52: (1, {'@': 465}), 88: (1, {'@': 465}), 118: (1, {'@': 465}), 119: (1, {'@': 465}), 120: (1, {'@': 465}), 72: (1, {'@': 465}), 121: (1, {'@': 465}), 122: (1, {'@': 465}), 123: (1, {'@': 465}), 124: (1, {'@': 465}), 94: (1, {'@': 465}), 86: (1, {'@': 465}), 125: (1, {'@': 465}), 126: (1, {'@': 465}), 127: (1, {'@': 465}), 39: (1, {'@': 465}), 64: (1, {'@': 465}), 128: (1, {'@': 465}), 129: (1, {'@': 465}), 130: (1, {'@': 465}), 102: (1, {'@': 465}), 131: (1, {'@': 465}), 132: (1, {'@': 465}), 133: (1, {'@': 465}), 2: (1, {'@': 465}), 134: (1, {'@': 465}), 135: (1, {'@': 465}), 136: (1, {'@': 465}), 137: (1, {'@': 465}), 138: (1, {'@': 465})}, 454: {176: (0, 393), 83: (0, 466), 86: (0, 480), 133: (1, {'@': 176}), 39: (1, {'@': 176}), 89: (1, {'@': 176}), 123: (1, {'@': 176}), 128: (1, {'@': 176}), 134: (1, {'@': 176}), 129: (1, {'@': 176}), 119: (1, {'@': 176}), 107: (1, {'@': 176}), 136: (1, {'@': 176}), 117: (1, {'@': 176}), 120: (1, {'@': 176}), 135: (1, {'@': 176}), 113: (1, {'@': 176}), 114: (1, {'@': 176}), 118: (1, {'@': 176})}, 455: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 43: (0, 189), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 218: (0, 291), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 219: (0, 236), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 456: {88: (1, {'@': 436}), 39: (1, {'@': 436}), 89: (1, {'@': 436}), 83: (1, {'@': 436})}, 457: {0: (0, 557), 2: (0, 408)}, 458: {107: (0, 349), 83: (1, {'@': 98}), 88: (1, {'@': 98})}, 459: {106: (0, 496), 220: (0, 562), 125: (1, {'@': 266}), 126: (1, {'@': 266}), 105: (1, {'@': 266}), 39: (1, {'@': 266}), 89: (1, {'@': 266}), 64: (1, {'@': 266}), 128: (1, {'@': 266}), 129: (1, {'@': 266}), 130: (1, {'@': 266}), 119: (1, {'@': 266}), 107: (1, {'@': 266}), 120: (1, {'@': 266}), 113: (1, {'@': 266}), 131: (1, {'@': 266}), 114: (1, {'@': 266}), 83: (1, {'@': 266}), 118: (1, {'@': 266}), 132: (1, {'@': 266}), 115: (1, {'@': 266}), 133: (1, {'@': 266}), 116: (1, {'@': 266}), 121: (1, {'@': 266}), 122: (1, {'@': 266}), 123: (1, {'@': 266}), 109: (1, {'@': 266}), 134: (1, {'@': 266}), 135: (1, {'@': 266}), 117: (1, {'@': 266}), 136: (1, {'@': 266}), 94: (1, {'@': 266}), 138: (1, {'@': 266}), 86: (1, {'@': 266}), 108: (1, {'@': 266}), 84: (1, {'@': 266}), 103: (1, {'@': 266}), 95: (1, {'@': 266}), 102: (1, {'@': 266}), 2: (1, {'@': 266}), 88: (1, {'@': 266})}, 460: {83: (0, 358), 88: (1, {'@': 395})}, 461: {40: (1, {'@': 404}), 48: (1, {'@': 404}), 89: (1, {'@': 404}), 105: (1, {'@': 404}), 119: (1, {'@': 404}), 106: (1, {'@': 404}), 107: (1, {'@': 404}), 120: (1, {'@': 404}), 83: (1, {'@': 404}), 72: (1, {'@': 404}), 121: (1, {'@': 404}), 139: (1, {'@': 404}), 122: (1, {'@': 404}), 123: (1, {'@': 404}), 109: (1, {'@': 404}), 124: (1, {'@': 404}), 94: (1, {'@': 404}), 138: (1, {'@': 404}), 125: (1, {'@': 404}), 126: (1, {'@': 404}), 127: (1, {'@': 404}), 39: (1, {'@': 404}), 64: (1, {'@': 404}), 110: (1, {'@': 404}), 128: (1, {'@': 404}), 111: (1, {'@': 404}), 129: (1, {'@': 404}), 130: (1, {'@': 404}), 112: (1, {'@': 404}), 113: (1, {'@': 404}), 131: (1, {'@': 404}), 114: (1, {'@': 404}), 12: (1, {'@': 404}), 132: (1, {'@': 404}), 115: (1, {'@': 404}), 99: (1, {'@': 404}), 133: (1, {'@': 404}), 116: (1, {'@': 404}), 134: (1, {'@': 404}), 135: (1, {'@': 404}), 117: (1, {'@': 404}), 52: (1, {'@': 404}), 136: (1, {'@': 404}), 137: (1, {'@': 404}), 118: (1, {'@': 404}), 86: (1, {'@': 404}), 108: (1, {'@': 404}), 84: (1, {'@': 404}), 103: (1, {'@': 404}), 95: (1, {'@': 404}), 102: (1, {'@': 404}), 2: (1, {'@': 404}), 88: (1, {'@': 404})}, 462: {68: (1, {'@': 175}), 40: (1, {'@': 175}), 21: (1, {'@': 175}), 48: (1, {'@': 175}), 59: (1, {'@': 175}), 51: (1, {'@': 175}), 72: (1, {'@': 175}), 49: (1, {'@': 175}), 82: (1, {'@': 175}), 64: (1, {'@': 175}), 35: (1, {'@': 175}), 32: (1, {'@': 175}), 80: (1, {'@': 175}), 12: (1, {'@': 175}), 34: (1, {'@': 175}), 70: (1, {'@': 175}), 77: (1, {'@': 175}), 30: (1, {'@': 175}), 54: (1, {'@': 175}), 2: (1, {'@': 175}), 13: (1, {'@': 175})}, 463: {0: (0, 389), 2: (0, 408), 99: (0, 23), 100: (0, 128), 101: (0, 569), 86: (1, {'@': 126})}, 464: {88: (0, 214)}, 465: {176: (0, 285), 177: (0, 312), 178: (0, 386), 83: (0, 397), 95: (0, 533), 179: (0, 371), 102: (1, {'@': 369})}, 466: {51: (0, 583), 52: (0, 515), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 27: (0, 317), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 43: (0, 531), 44: (0, 543), 2: (0, 408), 31: (0, 418), 82: (0, 106), 48: (0, 495), 49: (0, 579), 133: (1, {'@': 179}), 39: (1, {'@': 179}), 89: (1, {'@': 179}), 123: (1, {'@': 179}), 128: (1, {'@': 179}), 134: (1, {'@': 179}), 129: (1, {'@': 179}), 119: (1, {'@': 179}), 107: (1, {'@': 179}), 136: (1, {'@': 179}), 117: (1, {'@': 179}), 120: (1, {'@': 179}), 135: (1, {'@': 179}), 113: (1, {'@': 179}), 114: (1, {'@': 179}), 118: (1, {'@': 179})}, 467: {40: (1, {'@': 299}), 48: (1, {'@': 299}), 89: (1, {'@': 299}), 105: (1, {'@': 299}), 119: (1, {'@': 299}), 106: (1, {'@': 299}), 107: (1, {'@': 299}), 120: (1, {'@': 299}), 83: (1, {'@': 299}), 72: (1, {'@': 299}), 121: (1, {'@': 299}), 139: (1, {'@': 299}), 122: (1, {'@': 299}), 123: (1, {'@': 299}), 109: (1, {'@': 299}), 124: (1, {'@': 299}), 94: (1, {'@': 299}), 138: (1, {'@': 299}), 125: (1, {'@': 299}), 126: (1, {'@': 299}), 127: (1, {'@': 299}), 39: (1, {'@': 299}), 64: (1, {'@': 299}), 110: (1, {'@': 299}), 128: (1, {'@': 299}), 111: (1, {'@': 299}), 129: (1, {'@': 299}), 130: (1, {'@': 299}), 112: (1, {'@': 299}), 113: (1, {'@': 299}), 131: (1, {'@': 299}), 114: (1, {'@': 299}), 12: (1, {'@': 299}), 132: (1, {'@': 299}), 115: (1, {'@': 299}), 99: (1, {'@': 299}), 133: (1, {'@': 299}), 116: (1, {'@': 299}), 134: (1, {'@': 299}), 135: (1, {'@': 299}), 117: (1, {'@': 299}), 52: (1, {'@': 299}), 136: (1, {'@': 299}), 137: (1, {'@': 299}), 118: (1, {'@': 299}), 86: (1, {'@': 299}), 108: (1, {'@': 299}), 84: (1, {'@': 299}), 103: (1, {'@': 299}), 95: (1, {'@': 299}), 102: (1, {'@': 299}), 2: (1, {'@': 299}), 88: (1, {'@': 299})}, 468: {68: (1, {'@': 165}), 40: (1, {'@': 165}), 21: (1, {'@': 165}), 48: (1, {'@': 165}), 59: (1, {'@': 165}), 51: (1, {'@': 165}), 72: (1, {'@': 165}), 49: (1, {'@': 165}), 82: (1, {'@': 165}), 64: (1, {'@': 165}), 35: (1, {'@': 165}), 32: (1, {'@': 165}), 80: (1, {'@': 165}), 12: (1, {'@': 165}), 34: (1, {'@': 165}), 70: (1, {'@': 165}), 77: (1, {'@': 165}), 30: (1, {'@': 165}), 54: (1, {'@': 165}), 2: (1, {'@': 165}), 13: (1, {'@': 165})}, 469: {39: (1, {'@': 441}), 89: (1, {'@': 441}), 83: (1, {'@': 441})}, 470: {11: (0, 75), 4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 12: (0, 534), 13: (0, 541), 14: (0, 587), 15: (0, 183), 16: (0, 229), 17: (0, 215), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 22: (0, 414), 23: (0, 332), 24: (0, 445), 25: (0, 442), 26: (0, 546), 27: (0, 317), 28: (0, 201), 29: (0, 411), 30: (0, 519), 31: (0, 574), 32: (0, 422), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 37: (0, 212), 38: (0, 459), 39: (0, 404), 0: (0, 493), 40: (0, 508), 41: (0, 378), 42: (0, 364), 43: (0, 531), 44: (0, 543), 45: (0, 336), 46: (0, 538), 2: (0, 408), 47: (0, 576), 48: (0, 495), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 60: (0, 586), 61: (0, 326), 62: (0, 372), 63: (0, 536), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 69: (0, 219), 70: (0, 296), 71: (0, 282), 72: (0, 242), 73: (0, 235), 74: (0, 206), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 81: (0, 96), 82: (0, 106)}, 471: {4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 12: (0, 534), 13: (0, 541), 14: (0, 587), 16: (0, 229), 17: (0, 215), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 22: (0, 414), 23: (0, 332), 25: (0, 442), 26: (0, 546), 27: (0, 317), 28: (0, 201), 30: (0, 519), 29: (0, 411), 31: (0, 574), 32: (0, 422), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 37: (0, 212), 38: (0, 459), 0: (0, 493), 40: (0, 508), 41: (0, 378), 42: (0, 364), 24: (0, 22), 43: (0, 531), 44: (0, 543), 45: (0, 336), 46: (0, 538), 47: (0, 576), 2: (0, 408), 48: (0, 495), 39: (0, 486), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 60: (0, 586), 61: (0, 326), 62: (0, 372), 63: (0, 536), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 69: (0, 219), 70: (0, 296), 71: (0, 282), 72: (0, 242), 73: (0, 235), 74: (0, 206), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 81: (0, 96), 82: (0, 106)}, 472: {43: (0, 509), 51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 473: {51: (0, 583), 12: (0, 262), 4: (0, 289), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 22: (0, 540), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 72: (0, 242), 13: (0, 541), 30: (0, 519), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 23: (0, 332), 61: (0, 326), 29: (0, 411), 42: (0, 364), 2: (0, 408), 48: (0, 495), 68: (0, 250), 28: (0, 201), 82: (0, 106), 49: (0, 579), 32: (0, 422)}, 474: {88: (1, {'@': 486}), 94: (1, {'@': 486}), 95: (1, {'@': 486}), 84: (1, {'@': 486}), 102: (1, {'@': 486})}, 475: {83: (0, 382), 84: (1, {'@': 362})}, 476: {83: (0, 41), 156: (0, 43), 88: (1, {'@': 389})}, 477: {78: (0, 384), 54: (0, 330), 77: (0, 260), 40: (1, {'@': 323}), 48: (1, {'@': 323}), 89: (1, {'@': 323}), 105: (1, {'@': 323}), 119: (1, {'@': 323}), 106: (1, {'@': 323}), 107: (1, {'@': 323}), 120: (1, {'@': 323}), 83: (1, {'@': 323}), 72: (1, {'@': 323}), 121: (1, {'@': 323}), 139: (1, {'@': 323}), 122: (1, {'@': 323}), 123: (1, {'@': 323}), 109: (1, {'@': 323}), 124: (1, {'@': 323}), 94: (1, {'@': 323}), 138: (1, {'@': 323}), 125: (1, {'@': 323}), 126: (1, {'@': 323}), 127: (1, {'@': 323}), 39: (1, {'@': 323}), 64: (1, {'@': 323}), 110: (1, {'@': 323}), 128: (1, {'@': 323}), 111: (1, {'@': 323}), 129: (1, {'@': 323}), 130: (1, {'@': 323}), 112: (1, {'@': 323}), 113: (1, {'@': 323}), 131: (1, {'@': 323}), 114: (1, {'@': 323}), 12: (1, {'@': 323}), 132: (1, {'@': 323}), 115: (1, {'@': 323}), 99: (1, {'@': 323}), 133: (1, {'@': 323}), 116: (1, {'@': 323}), 134: (1, {'@': 323}), 135: (1, {'@': 323}), 117: (1, {'@': 323}), 52: (1, {'@': 323}), 136: (1, {'@': 323}), 137: (1, {'@': 323}), 118: (1, {'@': 323}), 86: (1, {'@': 323}), 108: (1, {'@': 323}), 84: (1, {'@': 323}), 103: (1, {'@': 323}), 95: (1, {'@': 323}), 102: (1, {'@': 323}), 2: (1, {'@': 323}), 88: (1, {'@': 323})}, 478: {68: (1, {'@': 419}), 40: (1, {'@': 419}), 21: (1, {'@': 419}), 48: (1, {'@': 419}), 59: (1, {'@': 419}), 51: (1, {'@': 419}), 98: (1, {'@': 419}), 92: (1, {'@': 419}), 72: (1, {'@': 419}), 49: (1, {'@': 419}), 8: (1, {'@': 419}), 50: (1, {'@': 419}), 82: (1, {'@': 419}), 93: (1, {'@': 419}), 94: (1, {'@': 419}), 95: (1, {'@': 419}), 39: (1, {'@': 419}), 41: (1, {'@': 419}), 35: (1, {'@': 419}), 20: (1, {'@': 419}), 32: (1, {'@': 419}), 64: (1, {'@': 419}), 80: (1, {'@': 419}), 25: (1, {'@': 419}), 96: (1, {'@': 419}), 47: (1, {'@': 419}), 12: (1, {'@': 419}), 34: (1, {'@': 419}), 70: (1, {'@': 419}), 77: (1, {'@': 419}), 19: (1, {'@': 419}), 81: (1, {'@': 419}), 30: (1, {'@': 419}), 54: (1, {'@': 419}), 2: (1, {'@': 419}), 37: (1, {'@': 419}), 52: (1, {'@': 419}), 97: (1, {'@': 419}), 9: (1, {'@': 419}), 13: (1, {'@': 419})}, 479: {103: (0, 223), 68: (1, {'@': 234}), 40: (1, {'@': 234}), 21: (1, {'@': 234}), 48: (1, {'@': 234}), 59: (1, {'@': 234}), 51: (1, {'@': 234}), 91: (1, {'@': 234}), 92: (1, {'@': 234}), 72: (1, {'@': 234}), 49: (1, {'@': 234}), 8: (1, {'@': 234}), 50: (1, {'@': 234}), 82: (1, {'@': 234}), 93: (1, {'@': 234}), 94: (1, {'@': 234}), 95: (1, {'@': 234}), 41: (1, {'@': 234}), 35: (1, {'@': 234}), 20: (1, {'@': 234}), 32: (1, {'@': 234}), 64: (1, {'@': 234}), 80: (1, {'@': 234}), 25: (1, {'@': 234}), 96: (1, {'@': 234}), 47: (1, {'@': 234}), 12: (1, {'@': 234}), 34: (1, {'@': 234}), 70: (1, {'@': 234}), 77: (1, {'@': 234}), 19: (1, {'@': 234}), 81: (1, {'@': 234}), 30: (1, {'@': 234}), 54: (1, {'@': 234}), 2: (1, {'@': 234}), 37: (1, {'@': 234}), 52: (1, {'@': 234}), 97: (1, {'@': 234}), 9: (1, {'@': 234}), 13: (1, {'@': 234}), 98: (1, {'@': 234}), 39: (1, {'@': 234})}, 480: {4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 12: (0, 534), 13: (0, 541), 11: (0, 521), 14: (0, 587), 15: (0, 183), 16: (0, 229), 17: (0, 215), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 22: (0, 414), 23: (0, 332), 24: (0, 445), 25: (0, 442), 26: (0, 546), 27: (0, 317), 28: (0, 201), 29: (0, 411), 30: (0, 519), 31: (0, 574), 32: (0, 422), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 37: (0, 212), 38: (0, 459), 39: (0, 404), 0: (0, 493), 40: (0, 508), 41: (0, 378), 42: (0, 364), 43: (0, 531), 44: (0, 543), 45: (0, 336), 46: (0, 538), 2: (0, 408), 47: (0, 576), 48: (0, 495), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 60: (0, 586), 61: (0, 326), 62: (0, 372), 63: (0, 536), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 69: (0, 219), 70: (0, 296), 71: (0, 282), 72: (0, 242), 73: (0, 235), 74: (0, 206), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 81: (0, 96), 82: (0, 106)}, 481: {83: (0, 550), 89: (1, {'@': 213}), 39: (1, {'@': 213})}, 482: {40: (1, {'@': 300}), 48: (1, {'@': 300}), 89: (1, {'@': 300}), 105: (1, {'@': 300}), 119: (1, {'@': 300}), 106: (1, {'@': 300}), 107: (1, {'@': 300}), 120: (1, {'@': 300}), 83: (1, {'@': 300}), 72: (1, {'@': 300}), 121: (1, {'@': 300}), 139: (1, {'@': 300}), 122: (1, {'@': 300}), 123: (1, {'@': 300}), 109: (1, {'@': 300}), 124: (1, {'@': 300}), 94: (1, {'@': 300}), 138: (1, {'@': 300}), 125: (1, {'@': 300}), 126: (1, {'@': 300}), 127: (1, {'@': 300}), 39: (1, {'@': 300}), 64: (1, {'@': 300}), 110: (1, {'@': 300}), 128: (1, {'@': 300}), 111: (1, {'@': 300}), 129: (1, {'@': 300}), 130: (1, {'@': 300}), 112: (1, {'@': 300}), 113: (1, {'@': 300}), 131: (1, {'@': 300}), 114: (1, {'@': 300}), 12: (1, {'@': 300}), 132: (1, {'@': 300}), 115: (1, {'@': 300}), 99: (1, {'@': 300}), 133: (1, {'@': 300}), 116: (1, {'@': 300}), 134: (1, {'@': 300}), 135: (1, {'@': 300}), 117: (1, {'@': 300}), 52: (1, {'@': 300}), 136: (1, {'@': 300}), 137: (1, {'@': 300}), 118: (1, {'@': 300}), 86: (1, {'@': 300}), 108: (1, {'@': 300}), 84: (1, {'@': 300}), 103: (1, {'@': 300}), 95: (1, {'@': 300}), 102: (1, {'@': 300}), 2: (1, {'@': 300}), 88: (1, {'@': 300})}, 483: {40: (1, {'@': 406}), 48: (1, {'@': 406}), 89: (1, {'@': 406}), 105: (1, {'@': 406}), 119: (1, {'@': 406}), 106: (1, {'@': 406}), 107: (1, {'@': 406}), 120: (1, {'@': 406}), 83: (1, {'@': 406}), 72: (1, {'@': 406}), 121: (1, {'@': 406}), 139: (1, {'@': 406}), 122: (1, {'@': 406}), 123: (1, {'@': 406}), 109: (1, {'@': 406}), 124: (1, {'@': 406}), 94: (1, {'@': 406}), 138: (1, {'@': 406}), 125: (1, {'@': 406}), 126: (1, {'@': 406}), 127: (1, {'@': 406}), 39: (1, {'@': 406}), 64: (1, {'@': 406}), 110: (1, {'@': 406}), 128: (1, {'@': 406}), 111: (1, {'@': 406}), 129: (1, {'@': 406}), 130: (1, {'@': 406}), 112: (1, {'@': 406}), 113: (1, {'@': 406}), 131: (1, {'@': 406}), 114: (1, {'@': 406}), 12: (1, {'@': 406}), 132: (1, {'@': 406}), 115: (1, {'@': 406}), 99: (1, {'@': 406}), 133: (1, {'@': 406}), 116: (1, {'@': 406}), 134: (1, {'@': 406}), 135: (1, {'@': 406}), 117: (1, {'@': 406}), 52: (1, {'@': 406}), 136: (1, {'@': 406}), 137: (1, {'@': 406}), 118: (1, {'@': 406}), 86: (1, {'@': 406}), 108: (1, {'@': 406}), 84: (1, {'@': 406}), 103: (1, {'@': 406}), 95: (1, {'@': 406}), 102: (1, {'@': 406}), 2: (1, {'@': 406}), 88: (1, {'@': 406})}, 484: {48: (1, {'@': 274}), 89: (1, {'@': 274}), 105: (1, {'@': 274}), 119: (1, {'@': 274}), 106: (1, {'@': 274}), 107: (1, {'@': 274}), 120: (1, {'@': 274}), 83: (1, {'@': 274}), 72: (1, {'@': 274}), 121: (1, {'@': 274}), 122: (1, {'@': 274}), 123: (1, {'@': 274}), 109: (1, {'@': 274}), 124: (1, {'@': 274}), 94: (1, {'@': 274}), 125: (1, {'@': 274}), 126: (1, {'@': 274}), 127: (1, {'@': 274}), 39: (1, {'@': 274}), 64: (1, {'@': 274}), 110: (1, {'@': 274}), 128: (1, {'@': 274}), 111: (1, {'@': 274}), 129: (1, {'@': 274}), 130: (1, {'@': 274}), 112: (1, {'@': 274}), 113: (1, {'@': 274}), 131: (1, {'@': 274}), 114: (1, {'@': 274}), 118: (1, {'@': 274}), 132: (1, {'@': 274}), 115: (1, {'@': 274}), 133: (1, {'@': 274}), 116: (1, {'@': 274}), 134: (1, {'@': 274}), 135: (1, {'@': 274}), 117: (1, {'@': 274}), 52: (1, {'@': 274}), 136: (1, {'@': 274}), 137: (1, {'@': 274}), 138: (1, {'@': 274}), 86: (1, {'@': 274}), 108: (1, {'@': 274}), 84: (1, {'@': 274}), 103: (1, {'@': 274}), 95: (1, {'@': 274}), 102: (1, {'@': 274}), 2: (1, {'@': 274}), 88: (1, {'@': 274})}, 485: {68: (1, {'@': 294}), 40: (1, {'@': 294}), 48: (1, {'@': 294}), 59: (1, {'@': 294}), 51: (1, {'@': 294}), 72: (1, {'@': 294}), 49: (1, {'@': 294}), 82: (1, {'@': 294}), 35: (1, {'@': 294}), 32: (1, {'@': 294}), 80: (1, {'@': 294}), 12: (1, {'@': 294}), 34: (1, {'@': 294}), 70: (1, {'@': 294}), 77: (1, {'@': 294}), 30: (1, {'@': 294}), 54: (1, {'@': 294}), 2: (1, {'@': 294}), 13: (1, {'@': 294})}, 486: {68: (1, {'@': 134}), 40: (1, {'@': 134}), 48: (1, {'@': 134}), 21: (1, {'@': 134}), 59: (1, {'@': 134}), 51: (1, {'@': 134}), 98: (1, {'@': 134}), 91: (1, {'@': 134}), 92: (1, {'@': 134}), 72: (1, {'@': 134}), 49: (1, {'@': 134}), 8: (1, {'@': 134}), 50: (1, {'@': 134}), 82: (1, {'@': 134}), 93: (1, {'@': 134}), 94: (1, {'@': 134}), 95: (1, {'@': 134}), 39: (1, {'@': 134}), 41: (1, {'@': 134}), 35: (1, {'@': 134}), 20: (1, {'@': 134}), 32: (1, {'@': 134}), 80: (1, {'@': 134}), 64: (1, {'@': 134}), 25: (1, {'@': 134}), 96: (1, {'@': 134}), 47: (1, {'@': 134}), 12: (1, {'@': 134}), 34: (1, {'@': 134}), 77: (1, {'@': 134}), 70: (1, {'@': 134}), 19: (1, {'@': 134}), 81: (1, {'@': 134}), 30: (1, {'@': 134}), 54: (1, {'@': 134}), 2: (1, {'@': 134}), 37: (1, {'@': 134}), 52: (1, {'@': 134}), 97: (1, {'@': 134}), 9: (1, {'@': 134}), 13: (1, {'@': 134}), 103: (1, {'@': 134}), 104: (1, {'@': 134})}, 487: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 86: (0, 131), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 43: (0, 126), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 151: (0, 153), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579), 102: (1, {'@': 341}), 83: (1, {'@': 341})}, 488: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 43: (0, 53), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 489: {86: (1, {'@': 113})}, 490: {83: (0, 252), 221: (0, 552), 89: (1, {'@': 210}), 39: (1, {'@': 210})}, 491: {68: (1, {'@': 173}), 40: (1, {'@': 173}), 21: (1, {'@': 173}), 48: (1, {'@': 173}), 59: (1, {'@': 173}), 51: (1, {'@': 173}), 72: (1, {'@': 173}), 49: (1, {'@': 173}), 82: (1, {'@': 173}), 64: (1, {'@': 173}), 35: (1, {'@': 173}), 32: (1, {'@': 173}), 80: (1, {'@': 173}), 12: (1, {'@': 173}), 34: (1, {'@': 173}), 70: (1, {'@': 173}), 77: (1, {'@': 173}), 30: (1, {'@': 173}), 54: (1, {'@': 173}), 2: (1, {'@': 173}), 13: (1, {'@': 173})}, 492: {51: (0, 583), 12: (0, 262), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 56: (0, 28), 80: (0, 167), 61: (0, 326), 42: (0, 364), 2: (0, 408), 68: (0, 250), 82: (0, 106), 48: (0, 495), 49: (0, 579), 32: (0, 422)}, 493: {187: (1, {'@': 153}), 2: (1, {'@': 153}), 40: (1, {'@': 315}), 48: (1, {'@': 315}), 89: (1, {'@': 315}), 105: (1, {'@': 315}), 119: (1, {'@': 315}), 106: (1, {'@': 315}), 107: (1, {'@': 315}), 120: (1, {'@': 315}), 83: (1, {'@': 315}), 72: (1, {'@': 315}), 121: (1, {'@': 315}), 139: (1, {'@': 315}), 122: (1, {'@': 315}), 123: (1, {'@': 315}), 109: (1, {'@': 315}), 124: (1, {'@': 315}), 94: (1, {'@': 315}), 138: (1, {'@': 315}), 125: (1, {'@': 315}), 126: (1, {'@': 315}), 127: (1, {'@': 315}), 39: (1, {'@': 315}), 64: (1, {'@': 315}), 110: (1, {'@': 315}), 128: (1, {'@': 315}), 111: (1, {'@': 315}), 129: (1, {'@': 315}), 130: (1, {'@': 315}), 112: (1, {'@': 315}), 113: (1, {'@': 315}), 131: (1, {'@': 315}), 114: (1, {'@': 315}), 12: (1, {'@': 315}), 132: (1, {'@': 315}), 115: (1, {'@': 315}), 99: (1, {'@': 315}), 133: (1, {'@': 315}), 116: (1, {'@': 315}), 134: (1, {'@': 315}), 135: (1, {'@': 315}), 117: (1, {'@': 315}), 52: (1, {'@': 315}), 136: (1, {'@': 315}), 137: (1, {'@': 315}), 118: (1, {'@': 315}), 86: (1, {'@': 315})}, 494: {40: (0, 277), 187: (1, {'@': 153}), 2: (1, {'@': 153})}, 495: {68: (1, {'@': 276}), 40: (1, {'@': 276}), 48: (1, {'@': 276}), 59: (1, {'@': 276}), 51: (1, {'@': 276}), 72: (1, {'@': 276}), 49: (1, {'@': 276}), 82: (1, {'@': 276}), 35: (1, {'@': 276}), 32: (1, {'@': 276}), 80: (1, {'@': 276}), 12: (1, {'@': 276}), 34: (1, {'@': 276}), 70: (1, {'@': 276}), 77: (1, {'@': 276}), 30: (1, {'@': 276}), 54: (1, {'@': 276}), 2: (1, {'@': 276}), 13: (1, {'@': 276})}, 496: {51: (0, 583), 12: (0, 262), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 38: (0, 259), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 2: (0, 408), 68: (0, 250), 82: (0, 106), 48: (0, 495), 49: (0, 579), 32: (0, 422)}, 497: {212: (0, 481), 83: (0, 584), 89: (1, {'@': 214}), 39: (1, {'@': 214})}, 498: {176: (0, 285), 83: (0, 397), 84: (1, {'@': 369})}, 499: {68: (1, {'@': 221}), 40: (1, {'@': 221}), 21: (1, {'@': 221}), 48: (1, {'@': 221}), 59: (1, {'@': 221}), 51: (1, {'@': 221}), 91: (1, {'@': 221}), 92: (1, {'@': 221}), 72: (1, {'@': 221}), 49: (1, {'@': 221}), 8: (1, {'@': 221}), 50: (1, {'@': 221}), 82: (1, {'@': 221}), 93: (1, {'@': 221}), 94: (1, {'@': 221}), 95: (1, {'@': 221}), 41: (1, {'@': 221}), 35: (1, {'@': 221}), 20: (1, {'@': 221}), 32: (1, {'@': 221}), 64: (1, {'@': 221}), 80: (1, {'@': 221}), 25: (1, {'@': 221}), 96: (1, {'@': 221}), 47: (1, {'@': 221}), 12: (1, {'@': 221}), 34: (1, {'@': 221}), 70: (1, {'@': 221}), 77: (1, {'@': 221}), 19: (1, {'@': 221}), 81: (1, {'@': 221}), 30: (1, {'@': 221}), 54: (1, {'@': 221}), 2: (1, {'@': 221}), 37: (1, {'@': 221}), 52: (1, {'@': 221}), 97: (1, {'@': 221}), 9: (1, {'@': 221}), 13: (1, {'@': 221}), 98: (1, {'@': 221}), 39: (1, {'@': 221})}, 500: {142: (0, 294), 51: (0, 583), 4: (0, 289), 38: (0, 459), 99: (0, 98), 43: (0, 57), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 143: (0, 266), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 141: (0, 114), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 52: (0, 375), 78: (0, 34), 80: (0, 167), 144: (0, 249), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579), 88: (1, {'@': 377})}, 501: {68: (1, {'@': 285}), 40: (1, {'@': 285}), 48: (1, {'@': 285}), 59: (1, {'@': 285}), 51: (1, {'@': 285}), 72: (1, {'@': 285}), 49: (1, {'@': 285}), 82: (1, {'@': 285}), 35: (1, {'@': 285}), 32: (1, {'@': 285}), 80: (1, {'@': 285}), 12: (1, {'@': 285}), 34: (1, {'@': 285}), 70: (1, {'@': 285}), 77: (1, {'@': 285}), 30: (1, {'@': 285}), 54: (1, {'@': 285}), 2: (1, {'@': 285}), 13: (1, {'@': 285})}, 502: {51: (0, 583), 12: (0, 262), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 56: (0, 224), 35: (0, 461), 36: (0, 477), 6: (0, 216), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 2: (0, 408), 68: (0, 250), 82: (0, 106), 48: (0, 495), 49: (0, 579), 32: (0, 422)}, 503: {39: (1, {'@': 101}), 89: (1, {'@': 101}), 128: (1, {'@': 101}), 129: (1, {'@': 101}), 119: (1, {'@': 101}), 107: (1, {'@': 101}), 120: (1, {'@': 101}), 113: (1, {'@': 101}), 114: (1, {'@': 101}), 83: (1, {'@': 101}), 133: (1, {'@': 101}), 123: (1, {'@': 101}), 134: (1, {'@': 101}), 135: (1, {'@': 101}), 117: (1, {'@': 101}), 136: (1, {'@': 101}), 118: (1, {'@': 101}), 86: (1, {'@': 101}), 108: (1, {'@': 101}), 88: (1, {'@': 101}), 2: (1, {'@': 101}), 102: (1, {'@': 101}), 95: (1, {'@': 101}), 84: (1, {'@': 101})}, 504: {68: (1, {'@': 284}), 40: (1, {'@': 284}), 48: (1, {'@': 284}), 59: (1, {'@': 284}), 51: (1, {'@': 284}), 72: (1, {'@': 284}), 49: (1, {'@': 284}), 82: (1, {'@': 284}), 35: (1, {'@': 284}), 32: (1, {'@': 284}), 80: (1, {'@': 284}), 12: (1, {'@': 284}), 34: (1, {'@': 284}), 70: (1, {'@': 284}), 77: (1, {'@': 284}), 30: (1, {'@': 284}), 54: (1, {'@': 284}), 2: (1, {'@': 284}), 13: (1, {'@': 284})}, 505: {51: (0, 583), 52: (0, 515), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 27: (0, 317), 28: (0, 201), 29: (0, 411), 31: (0, 574), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 7: (0, 244), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 43: (0, 531), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 506: {39: (1, {'@': 439}), 89: (1, {'@': 439}), 139: (1, {'@': 439}), 47: (1, {'@': 439}), 108: (1, {'@': 439}), 83: (1, {'@': 439})}, 507: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 43: (0, 189), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 218: (0, 353), 34: (0, 483), 219: (0, 236), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579), 89: (1, {'@': 187}), 39: (1, {'@': 187})}, 508: {51: (0, 583), 52: (0, 515), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 88: (0, 200), 6: (0, 390), 194: (0, 451), 222: (0, 412), 56: (0, 224), 13: (0, 541), 57: (0, 230), 31: (0, 185), 43: (0, 182), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 27: (0, 317), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 509: {86: (0, 237)}, 510: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 99: (0, 5), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 157: (0, 2), 35: (0, 461), 43: (0, 4), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579), 84: (1, {'@': 363})}, 511: {86: (1, {'@': 427}), 39: (1, {'@': 427}), 89: (1, {'@': 427}), 83: (1, {'@': 427}), 88: (1, {'@': 427})}, 512: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 43: (0, 196), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 513: {40: (1, {'@': 314}), 48: (1, {'@': 314}), 89: (1, {'@': 314}), 105: (1, {'@': 314}), 119: (1, {'@': 314}), 106: (1, {'@': 314}), 107: (1, {'@': 314}), 120: (1, {'@': 314}), 83: (1, {'@': 314}), 72: (1, {'@': 314}), 121: (1, {'@': 314}), 139: (1, {'@': 314}), 122: (1, {'@': 314}), 123: (1, {'@': 314}), 109: (1, {'@': 314}), 124: (1, {'@': 314}), 94: (1, {'@': 314}), 138: (1, {'@': 314}), 125: (1, {'@': 314}), 126: (1, {'@': 314}), 127: (1, {'@': 314}), 39: (1, {'@': 314}), 64: (1, {'@': 314}), 110: (1, {'@': 314}), 128: (1, {'@': 314}), 111: (1, {'@': 314}), 129: (1, {'@': 314}), 130: (1, {'@': 314}), 112: (1, {'@': 314}), 113: (1, {'@': 314}), 131: (1, {'@': 314}), 114: (1, {'@': 314}), 12: (1, {'@': 314}), 132: (1, {'@': 314}), 115: (1, {'@': 314}), 99: (1, {'@': 314}), 133: (1, {'@': 314}), 116: (1, {'@': 314}), 134: (1, {'@': 314}), 135: (1, {'@': 314}), 117: (1, {'@': 314}), 52: (1, {'@': 314}), 136: (1, {'@': 314}), 137: (1, {'@': 314}), 118: (1, {'@': 314}), 86: (1, {'@': 314}), 108: (1, {'@': 314}), 84: (1, {'@': 314}), 103: (1, {'@': 314}), 95: (1, {'@': 314}), 102: (1, {'@': 314}), 2: (1, {'@': 314}), 88: (1, {'@': 314})}, 514: {89: (1, {'@': 450}), 119: (1, {'@': 450}), 107: (1, {'@': 450}), 120: (1, {'@': 450}), 108: (1, {'@': 450}), 83: (1, {'@': 450}), 103: (1, {'@': 450}), 123: (1, {'@': 450}), 84: (1, {'@': 450}), 94: (1, {'@': 450}), 86: (1, {'@': 450}), 95: (1, {'@': 450}), 39: (1, {'@': 450}), 128: (1, {'@': 450}), 129: (1, {'@': 450}), 102: (1, {'@': 450}), 113: (1, {'@': 450}), 114: (1, {'@': 450}), 132: (1, {'@': 450}), 133: (1, {'@': 450}), 2: (1, {'@': 450}), 134: (1, {'@': 450}), 135: (1, {'@': 450}), 117: (1, {'@': 450}), 136: (1, {'@': 450}), 88: (1, {'@': 450}), 118: (1, {'@': 450})}, 515: {51: (0, 583), 12: (0, 262), 4: (0, 289), 29: (0, 411), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 22: (0, 544), 2: (0, 408), 68: (0, 250), 28: (0, 201), 48: (0, 495), 82: (0, 106), 49: (0, 579), 32: (0, 422)}, 516: {68: (1, {'@': 131}), 40: (1, {'@': 131}), 21: (1, {'@': 131}), 48: (1, {'@': 131}), 59: (1, {'@': 131}), 51: (1, {'@': 131}), 91: (1, {'@': 131}), 92: (1, {'@': 131}), 72: (1, {'@': 131}), 49: (1, {'@': 131}), 8: (1, {'@': 131}), 50: (1, {'@': 131}), 82: (1, {'@': 131}), 93: (1, {'@': 131}), 94: (1, {'@': 131}), 95: (1, {'@': 131}), 41: (1, {'@': 131}), 35: (1, {'@': 131}), 20: (1, {'@': 131}), 32: (1, {'@': 131}), 64: (1, {'@': 131}), 80: (1, {'@': 131}), 25: (1, {'@': 131}), 96: (1, {'@': 131}), 47: (1, {'@': 131}), 12: (1, {'@': 131}), 34: (1, {'@': 131}), 70: (1, {'@': 131}), 77: (1, {'@': 131}), 19: (1, {'@': 131}), 81: (1, {'@': 131}), 30: (1, {'@': 131}), 54: (1, {'@': 131}), 2: (1, {'@': 131}), 37: (1, {'@': 131}), 52: (1, {'@': 131}), 97: (1, {'@': 131}), 9: (1, {'@': 131}), 13: (1, {'@': 131}), 98: (1, {'@': 131}), 39: (1, {'@': 131})}, 517: {51: (0, 583), 12: (0, 262), 22: (0, 99), 52: (0, 515), 4: (0, 289), 29: (0, 411), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 2: (0, 408), 68: (0, 250), 27: (0, 90), 28: (0, 201), 48: (0, 495), 82: (0, 106), 49: (0, 579), 32: (0, 422), 122: (1, {'@': 349})}, 518: {83: (0, 56), 102: (1, {'@': 331})}, 519: {51: (0, 583), 184: (0, 337), 84: (0, 356), 4: (0, 289), 52: (0, 515), 38: (0, 459), 54: (0, 330), 223: (0, 360), 224: (0, 188), 5: (0, 387), 6: (0, 390), 56: (0, 224), 31: (0, 498), 43: (0, 361), 157: (0, 450), 13: (0, 541), 57: (0, 230), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 99: (0, 473), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 27: (0, 317), 28: (0, 201), 29: (0, 411), 68: (0, 250), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 195: (0, 367), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 520: {86: (0, 427)}, 521: {68: (1, {'@': 242}), 40: (1, {'@': 242}), 21: (1, {'@': 242}), 48: (1, {'@': 242}), 59: (1, {'@': 242}), 51: (1, {'@': 242}), 91: (1, {'@': 242}), 92: (1, {'@': 242}), 72: (1, {'@': 242}), 49: (1, {'@': 242}), 8: (1, {'@': 242}), 50: (1, {'@': 242}), 82: (1, {'@': 242}), 93: (1, {'@': 242}), 94: (1, {'@': 242}), 95: (1, {'@': 242}), 41: (1, {'@': 242}), 35: (1, {'@': 242}), 20: (1, {'@': 242}), 32: (1, {'@': 242}), 64: (1, {'@': 242}), 80: (1, {'@': 242}), 25: (1, {'@': 242}), 96: (1, {'@': 242}), 47: (1, {'@': 242}), 12: (1, {'@': 242}), 34: (1, {'@': 242}), 70: (1, {'@': 242}), 77: (1, {'@': 242}), 19: (1, {'@': 242}), 81: (1, {'@': 242}), 30: (1, {'@': 242}), 54: (1, {'@': 242}), 2: (1, {'@': 242}), 37: (1, {'@': 242}), 52: (1, {'@': 242}), 97: (1, {'@': 242}), 9: (1, {'@': 242}), 13: (1, {'@': 242}), 98: (1, {'@': 242}), 39: (1, {'@': 242})}, 522: {40: (1, {'@': 304}), 48: (1, {'@': 304}), 89: (1, {'@': 304}), 105: (1, {'@': 304}), 119: (1, {'@': 304}), 106: (1, {'@': 304}), 107: (1, {'@': 304}), 120: (1, {'@': 304}), 83: (1, {'@': 304}), 72: (1, {'@': 304}), 121: (1, {'@': 304}), 139: (1, {'@': 304}), 122: (1, {'@': 304}), 123: (1, {'@': 304}), 109: (1, {'@': 304}), 124: (1, {'@': 304}), 94: (1, {'@': 304}), 138: (1, {'@': 304}), 125: (1, {'@': 304}), 126: (1, {'@': 304}), 127: (1, {'@': 304}), 39: (1, {'@': 304}), 64: (1, {'@': 304}), 110: (1, {'@': 304}), 128: (1, {'@': 304}), 111: (1, {'@': 304}), 129: (1, {'@': 304}), 130: (1, {'@': 304}), 112: (1, {'@': 304}), 113: (1, {'@': 304}), 131: (1, {'@': 304}), 114: (1, {'@': 304}), 12: (1, {'@': 304}), 132: (1, {'@': 304}), 115: (1, {'@': 304}), 99: (1, {'@': 304}), 133: (1, {'@': 304}), 116: (1, {'@': 304}), 134: (1, {'@': 304}), 135: (1, {'@': 304}), 117: (1, {'@': 304}), 52: (1, {'@': 304}), 136: (1, {'@': 304}), 137: (1, {'@': 304}), 118: (1, {'@': 304}), 86: (1, {'@': 304}), 108: (1, {'@': 304}), 84: (1, {'@': 304}), 103: (1, {'@': 304}), 95: (1, {'@': 304}), 102: (1, {'@': 304}), 2: (1, {'@': 304}), 88: (1, {'@': 304})}, 523: {40: (1, {'@': 306}), 48: (1, {'@': 306}), 89: (1, {'@': 306}), 105: (1, {'@': 306}), 119: (1, {'@': 306}), 106: (1, {'@': 306}), 107: (1, {'@': 306}), 120: (1, {'@': 306}), 83: (1, {'@': 306}), 72: (1, {'@': 306}), 121: (1, {'@': 306}), 139: (1, {'@': 306}), 122: (1, {'@': 306}), 123: (1, {'@': 306}), 109: (1, {'@': 306}), 124: (1, {'@': 306}), 94: (1, {'@': 306}), 138: (1, {'@': 306}), 125: (1, {'@': 306}), 126: (1, {'@': 306}), 127: (1, {'@': 306}), 39: (1, {'@': 306}), 64: (1, {'@': 306}), 110: (1, {'@': 306}), 128: (1, {'@': 306}), 111: (1, {'@': 306}), 129: (1, {'@': 306}), 130: (1, {'@': 306}), 112: (1, {'@': 306}), 113: (1, {'@': 306}), 131: (1, {'@': 306}), 114: (1, {'@': 306}), 12: (1, {'@': 306}), 132: (1, {'@': 306}), 115: (1, {'@': 306}), 99: (1, {'@': 306}), 133: (1, {'@': 306}), 116: (1, {'@': 306}), 134: (1, {'@': 306}), 135: (1, {'@': 306}), 117: (1, {'@': 306}), 52: (1, {'@': 306}), 136: (1, {'@': 306}), 137: (1, {'@': 306}), 118: (1, {'@': 306}), 86: (1, {'@': 306}), 108: (1, {'@': 306}), 84: (1, {'@': 306}), 103: (1, {'@': 306}), 95: (1, {'@': 306}), 102: (1, {'@': 306}), 2: (1, {'@': 306}), 88: (1, {'@': 306})}, 524: {86: (1, {'@': 128})}, 525: {0: (0, 575), 83: (0, 463), 211: (0, 292), 2: (0, 408), 86: (1, {'@': 127})}, 526: {40: (1, {'@': 313}), 48: (1, {'@': 313}), 89: (1, {'@': 313}), 105: (1, {'@': 313}), 119: (1, {'@': 313}), 106: (1, {'@': 313}), 107: (1, {'@': 313}), 120: (1, {'@': 313}), 83: (1, {'@': 313}), 72: (1, {'@': 313}), 121: (1, {'@': 313}), 139: (1, {'@': 313}), 122: (1, {'@': 313}), 123: (1, {'@': 313}), 109: (1, {'@': 313}), 124: (1, {'@': 313}), 94: (1, {'@': 313}), 138: (1, {'@': 313}), 125: (1, {'@': 313}), 126: (1, {'@': 313}), 127: (1, {'@': 313}), 39: (1, {'@': 313}), 64: (1, {'@': 313}), 110: (1, {'@': 313}), 128: (1, {'@': 313}), 111: (1, {'@': 313}), 129: (1, {'@': 313}), 130: (1, {'@': 313}), 112: (1, {'@': 313}), 113: (1, {'@': 313}), 131: (1, {'@': 313}), 114: (1, {'@': 313}), 12: (1, {'@': 313}), 132: (1, {'@': 313}), 115: (1, {'@': 313}), 99: (1, {'@': 313}), 133: (1, {'@': 313}), 116: (1, {'@': 313}), 134: (1, {'@': 313}), 135: (1, {'@': 313}), 117: (1, {'@': 313}), 52: (1, {'@': 313}), 136: (1, {'@': 313}), 137: (1, {'@': 313}), 118: (1, {'@': 313}), 86: (1, {'@': 313}), 108: (1, {'@': 313}), 84: (1, {'@': 313}), 103: (1, {'@': 313}), 95: (1, {'@': 313}), 102: (1, {'@': 313}), 2: (1, {'@': 313}), 88: (1, {'@': 313})}, 527: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 43: (0, 52), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579), 89: (1, {'@': 354}), 39: (1, {'@': 354}), 86: (1, {'@': 354})}, 528: {2: (1, {'@': 434}), 47: (1, {'@': 434}), 139: (1, {'@': 434})}, 529: {68: (1, {'@': 168}), 40: (1, {'@': 168}), 21: (1, {'@': 168}), 48: (1, {'@': 168}), 59: (1, {'@': 168}), 51: (1, {'@': 168}), 72: (1, {'@': 168}), 49: (1, {'@': 168}), 82: (1, {'@': 168}), 64: (1, {'@': 168}), 35: (1, {'@': 168}), 32: (1, {'@': 168}), 80: (1, {'@': 168}), 12: (1, {'@': 168}), 34: (1, {'@': 168}), 70: (1, {'@': 168}), 77: (1, {'@': 168}), 30: (1, {'@': 168}), 54: (1, {'@': 168}), 2: (1, {'@': 168}), 13: (1, {'@': 168})}, 530: {83: (0, 118), 84: (1, {'@': 358})}, 531: {39: (1, {'@': 327}), 89: (1, {'@': 327}), 128: (1, {'@': 327}), 129: (1, {'@': 327}), 119: (1, {'@': 327}), 107: (1, {'@': 327}), 120: (1, {'@': 327}), 113: (1, {'@': 327}), 114: (1, {'@': 327}), 83: (1, {'@': 327}), 133: (1, {'@': 327}), 123: (1, {'@': 327}), 134: (1, {'@': 327}), 135: (1, {'@': 327}), 117: (1, {'@': 327}), 136: (1, {'@': 327}), 118: (1, {'@': 327}), 86: (1, {'@': 327}), 102: (1, {'@': 327}), 95: (1, {'@': 327}), 88: (1, {'@': 327}), 84: (1, {'@': 327})}, 532: {68: (1, {'@': 164}), 40: (1, {'@': 164}), 21: (1, {'@': 164}), 48: (1, {'@': 164}), 59: (1, {'@': 164}), 51: (1, {'@': 164}), 72: (1, {'@': 164}), 49: (1, {'@': 164}), 82: (1, {'@': 164}), 64: (1, {'@': 164}), 35: (1, {'@': 164}), 32: (1, {'@': 164}), 80: (1, {'@': 164}), 12: (1, {'@': 164}), 34: (1, {'@': 164}), 70: (1, {'@': 164}), 77: (1, {'@': 164}), 30: (1, {'@': 164}), 54: (1, {'@': 164}), 2: (1, {'@': 164}), 13: (1, {'@': 164})}, 533: {51: (0, 583), 52: (0, 515), 4: (0, 289), 38: (0, 459), 54: (0, 330), 6: (0, 390), 56: (0, 224), 13: (0, 541), 22: (0, 325), 27: (0, 308), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 23: (0, 332), 61: (0, 326), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 183: (0, 150), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 534: {51: (0, 583), 52: (0, 515), 4: (0, 289), 38: (0, 459), 194: (0, 549), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 31: (0, 465), 13: (0, 541), 57: (0, 230), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 283), 64: (0, 564), 12: (0, 262), 27: (0, 317), 28: (0, 201), 29: (0, 411), 68: (0, 250), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 102: (0, 324), 80: (0, 167), 42: (0, 364), 195: (0, 293), 43: (0, 531), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 535: {68: (1, {'@': 132}), 40: (1, {'@': 132}), 48: (1, {'@': 132}), 21: (1, {'@': 132}), 59: (1, {'@': 132}), 51: (1, {'@': 132}), 98: (1, {'@': 132}), 91: (1, {'@': 132}), 92: (1, {'@': 132}), 72: (1, {'@': 132}), 49: (1, {'@': 132}), 8: (1, {'@': 132}), 50: (1, {'@': 132}), 82: (1, {'@': 132}), 93: (1, {'@': 132}), 94: (1, {'@': 132}), 95: (1, {'@': 132}), 39: (1, {'@': 132}), 41: (1, {'@': 132}), 35: (1, {'@': 132}), 20: (1, {'@': 132}), 32: (1, {'@': 132}), 80: (1, {'@': 132}), 64: (1, {'@': 132}), 25: (1, {'@': 132}), 96: (1, {'@': 132}), 47: (1, {'@': 132}), 12: (1, {'@': 132}), 34: (1, {'@': 132}), 77: (1, {'@': 132}), 70: (1, {'@': 132}), 19: (1, {'@': 132}), 81: (1, {'@': 132}), 30: (1, {'@': 132}), 54: (1, {'@': 132}), 2: (1, {'@': 132}), 37: (1, {'@': 132}), 52: (1, {'@': 132}), 97: (1, {'@': 132}), 9: (1, {'@': 132}), 13: (1, {'@': 132}), 103: (1, {'@': 132}), 104: (1, {'@': 132})}, 536: {193: (0, 436), 107: (0, 239)}, 537: {108: (0, 27), 89: (1, {'@': 202}), 83: (1, {'@': 202}), 88: (1, {'@': 202}), 39: (1, {'@': 202})}, 538: {89: (1, {'@': 189}), 39: (1, {'@': 189})}, 539: {225: (0, 63), 83: (0, 50), 88: (1, {'@': 96})}, 540: {217: (0, 475), 83: (0, 510), 84: (1, {'@': 364})}, 541: {40: (1, {'@': 319}), 48: (1, {'@': 319}), 89: (1, {'@': 319}), 105: (1, {'@': 319}), 119: (1, {'@': 319}), 106: (1, {'@': 319}), 107: (1, {'@': 319}), 120: (1, {'@': 319}), 83: (1, {'@': 319}), 72: (1, {'@': 319}), 121: (1, {'@': 319}), 139: (1, {'@': 319}), 122: (1, {'@': 319}), 123: (1, {'@': 319}), 109: (1, {'@': 319}), 124: (1, {'@': 319}), 94: (1, {'@': 319}), 138: (1, {'@': 319}), 125: (1, {'@': 319}), 126: (1, {'@': 319}), 127: (1, {'@': 319}), 39: (1, {'@': 319}), 64: (1, {'@': 319}), 110: (1, {'@': 319}), 128: (1, {'@': 319}), 111: (1, {'@': 319}), 129: (1, {'@': 319}), 130: (1, {'@': 319}), 112: (1, {'@': 319}), 113: (1, {'@': 319}), 131: (1, {'@': 319}), 114: (1, {'@': 319}), 12: (1, {'@': 319}), 132: (1, {'@': 319}), 115: (1, {'@': 319}), 99: (1, {'@': 319}), 133: (1, {'@': 319}), 116: (1, {'@': 319}), 134: (1, {'@': 319}), 135: (1, {'@': 319}), 117: (1, {'@': 319}), 52: (1, {'@': 319}), 136: (1, {'@': 319}), 137: (1, {'@': 319}), 118: (1, {'@': 319}), 86: (1, {'@': 319}), 108: (1, {'@': 319}), 84: (1, {'@': 319}), 103: (1, {'@': 319}), 95: (1, {'@': 319}), 102: (1, {'@': 319}), 2: (1, {'@': 319}), 88: (1, {'@': 319})}, 542: {51: (0, 583), 52: (0, 515), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 27: (0, 317), 28: (0, 201), 29: (0, 411), 32: (0, 422), 31: (0, 136), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 43: (0, 531), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579), 88: (1, {'@': 324})}, 543: {126: (1, {'@': 256}), 39: (1, {'@': 256}), 89: (1, {'@': 256}), 128: (1, {'@': 256}), 129: (1, {'@': 256}), 119: (1, {'@': 256}), 107: (1, {'@': 256}), 120: (1, {'@': 256}), 113: (1, {'@': 256}), 114: (1, {'@': 256}), 83: (1, {'@': 256}), 132: (1, {'@': 256}), 133: (1, {'@': 256}), 123: (1, {'@': 256}), 134: (1, {'@': 256}), 135: (1, {'@': 256}), 117: (1, {'@': 256}), 136: (1, {'@': 256}), 94: (1, {'@': 256}), 118: (1, {'@': 256}), 86: (1, {'@': 256}), 108: (1, {'@': 256}), 88: (1, {'@': 256}), 95: (1, {'@': 256}), 102: (1, {'@': 256}), 103: (1, {'@': 256}), 84: (1, {'@': 256}), 2: (1, {'@': 256})}, 544: {39: (1, {'@': 259}), 89: (1, {'@': 259}), 128: (1, {'@': 259}), 129: (1, {'@': 259}), 119: (1, {'@': 259}), 107: (1, {'@': 259}), 120: (1, {'@': 259}), 113: (1, {'@': 259}), 114: (1, {'@': 259}), 83: (1, {'@': 259}), 133: (1, {'@': 259}), 123: (1, {'@': 259}), 134: (1, {'@': 259}), 135: (1, {'@': 259}), 117: (1, {'@': 259}), 136: (1, {'@': 259}), 118: (1, {'@': 259}), 122: (1, {'@': 259}), 86: (1, {'@': 259}), 102: (1, {'@': 259}), 95: (1, {'@': 259}), 88: (1, {'@': 259}), 84: (1, {'@': 259})}, 545: {88: (1, {'@': 384})}, 546: {89: (1, {'@': 141}), 39: (1, {'@': 141})}, 547: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 99: (0, 5), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 157: (0, 2), 35: (0, 461), 43: (0, 4), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 48: (0, 495), 82: (0, 106), 49: (0, 579), 84: (1, {'@': 359})}, 548: {86: (0, 109)}, 549: {102: (0, 415)}, 550: {2: (0, 408), 0: (0, 338)}, 551: {89: (1, {'@': 181}), 39: (1, {'@': 181})}, 552: {83: (0, 0), 89: (1, {'@': 209}), 39: (1, {'@': 209})}, 553: {89: (1, {'@': 143}), 39: (1, {'@': 143})}, 554: {2: (1, {'@': 150}), 40: (1, {'@': 150})}, 555: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 147: (0, 539), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 88: (0, 127), 23: (0, 332), 61: (0, 326), 146: (0, 458), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 43: (0, 19), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 199: (0, 129), 48: (0, 495), 49: (0, 579)}, 556: {}, 557: {187: (1, {'@': 152}), 2: (1, {'@': 152}), 40: (1, {'@': 152})}, 558: {51: (0, 583), 12: (0, 262), 4: (0, 289), 29: (0, 411), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 76: (0, 179), 16: (0, 229), 57: (0, 32), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 22: (0, 414), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 64: (0, 564), 44: (0, 543), 2: (0, 408), 68: (0, 250), 28: (0, 201), 48: (0, 495), 82: (0, 106), 49: (0, 579), 32: (0, 422)}, 559: {83: (1, {'@': 394}), 88: (1, {'@': 394})}, 560: {68: (1, {'@': 224}), 40: (1, {'@': 224}), 21: (1, {'@': 224}), 48: (1, {'@': 224}), 59: (1, {'@': 224}), 51: (1, {'@': 224}), 91: (1, {'@': 224}), 92: (1, {'@': 224}), 72: (1, {'@': 224}), 49: (1, {'@': 224}), 8: (1, {'@': 224}), 50: (1, {'@': 224}), 82: (1, {'@': 224}), 93: (1, {'@': 224}), 94: (1, {'@': 224}), 95: (1, {'@': 224}), 41: (1, {'@': 224}), 35: (1, {'@': 224}), 20: (1, {'@': 224}), 32: (1, {'@': 224}), 64: (1, {'@': 224}), 80: (1, {'@': 224}), 25: (1, {'@': 224}), 96: (1, {'@': 224}), 47: (1, {'@': 224}), 12: (1, {'@': 224}), 34: (1, {'@': 224}), 70: (1, {'@': 224}), 77: (1, {'@': 224}), 19: (1, {'@': 224}), 81: (1, {'@': 224}), 30: (1, {'@': 224}), 54: (1, {'@': 224}), 2: (1, {'@': 224}), 37: (1, {'@': 224}), 52: (1, {'@': 224}), 97: (1, {'@': 224}), 9: (1, {'@': 224}), 13: (1, {'@': 224}), 98: (1, {'@': 224}), 39: (1, {'@': 224})}, 561: {35: (0, 461), 102: (0, 198), 68: (0, 250), 82: (0, 106), 34: (0, 483), 61: (0, 347), 49: (0, 579), 32: (0, 422)}, 562: {106: (0, 396), 125: (1, {'@': 265}), 126: (1, {'@': 265}), 105: (1, {'@': 265}), 39: (1, {'@': 265}), 89: (1, {'@': 265}), 64: (1, {'@': 265}), 128: (1, {'@': 265}), 129: (1, {'@': 265}), 130: (1, {'@': 265}), 119: (1, {'@': 265}), 107: (1, {'@': 265}), 120: (1, {'@': 265}), 113: (1, {'@': 265}), 131: (1, {'@': 265}), 114: (1, {'@': 265}), 83: (1, {'@': 265}), 118: (1, {'@': 265}), 132: (1, {'@': 265}), 115: (1, {'@': 265}), 133: (1, {'@': 265}), 116: (1, {'@': 265}), 121: (1, {'@': 265}), 122: (1, {'@': 265}), 123: (1, {'@': 265}), 109: (1, {'@': 265}), 134: (1, {'@': 265}), 135: (1, {'@': 265}), 117: (1, {'@': 265}), 136: (1, {'@': 265}), 94: (1, {'@': 265}), 138: (1, {'@': 265}), 86: (1, {'@': 265}), 108: (1, {'@': 265}), 84: (1, {'@': 265}), 103: (1, {'@': 265}), 95: (1, {'@': 265}), 102: (1, {'@': 265}), 2: (1, {'@': 265}), 88: (1, {'@': 265})}, 563: {107: (1, {'@': 429}), 39: (1, {'@': 429}), 89: (1, {'@': 429})}, 564: {51: (0, 583), 12: (0, 262), 4: (0, 289), 29: (0, 411), 38: (0, 459), 70: (0, 296), 33: (0, 484), 54: (0, 330), 34: (0, 483), 6: (0, 390), 56: (0, 224), 35: (0, 461), 36: (0, 477), 72: (0, 242), 30: (0, 519), 13: (0, 541), 57: (0, 416), 76: (0, 179), 16: (0, 229), 0: (0, 241), 77: (0, 260), 40: (0, 508), 17: (0, 215), 78: (0, 34), 59: (0, 428), 22: (0, 414), 80: (0, 167), 23: (0, 332), 61: (0, 326), 42: (0, 364), 64: (0, 564), 44: (0, 543), 2: (0, 408), 68: (0, 250), 28: (0, 201), 48: (0, 495), 82: (0, 106), 49: (0, 579), 32: (0, 422)}, 565: {83: (0, 119), 86: (1, {'@': 107})}, 566: {89: (1, {'@': 199}), 39: (1, {'@': 199})}, 567: {51: (0, 583), 4: (0, 289), 38: (0, 459), 54: (0, 330), 5: (0, 387), 6: (0, 390), 43: (0, 189), 56: (0, 224), 49: (0, 579), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 219: (0, 236), 35: (0, 461), 36: (0, 477), 218: (0, 548), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495)}, 568: {4: (0, 289), 5: (0, 387), 6: (0, 390), 7: (0, 444), 8: (0, 448), 9: (0, 507), 10: (0, 553), 12: (0, 534), 13: (0, 541), 14: (0, 587), 15: (0, 183), 16: (0, 229), 17: (0, 215), 18: (0, 310), 19: (0, 273), 20: (0, 429), 21: (0, 421), 22: (0, 414), 23: (0, 332), 24: (0, 445), 25: (0, 442), 26: (0, 546), 27: (0, 317), 28: (0, 201), 29: (0, 411), 30: (0, 519), 31: (0, 574), 32: (0, 422), 33: (0, 484), 11: (0, 36), 34: (0, 483), 35: (0, 461), 36: (0, 477), 37: (0, 212), 38: (0, 459), 39: (0, 404), 0: (0, 493), 40: (0, 508), 41: (0, 378), 42: (0, 364), 43: (0, 531), 44: (0, 543), 45: (0, 336), 46: (0, 538), 2: (0, 408), 47: (0, 576), 48: (0, 495), 49: (0, 579), 50: (0, 191), 51: (0, 583), 52: (0, 299), 53: (0, 437), 54: (0, 330), 55: (0, 267), 56: (0, 224), 57: (0, 230), 58: (0, 449), 59: (0, 428), 60: (0, 586), 61: (0, 326), 62: (0, 372), 63: (0, 536), 64: (0, 564), 65: (0, 318), 66: (0, 551), 67: (0, 210), 68: (0, 250), 69: (0, 219), 70: (0, 296), 71: (0, 282), 72: (0, 242), 73: (0, 235), 74: (0, 206), 75: (0, 202), 76: (0, 179), 77: (0, 260), 78: (0, 34), 79: (0, 69), 80: (0, 167), 81: (0, 96), 82: (0, 106)}, 569: {86: (1, {'@': 423}), 83: (1, {'@': 423})}, 570: {83: (0, 17), 86: (1, {'@': 118})}, 571: {68: (1, {'@': 223}), 40: (1, {'@': 223}), 21: (1, {'@': 223}), 48: (1, {'@': 223}), 59: (1, {'@': 223}), 51: (1, {'@': 223}), 91: (1, {'@': 223}), 92: (1, {'@': 223}), 72: (1, {'@': 223}), 49: (1, {'@': 223}), 8: (1, {'@': 223}), 50: (1, {'@': 223}), 82: (1, {'@': 223}), 93: (1, {'@': 223}), 94: (1, {'@': 223}), 95: (1, {'@': 223}), 41: (1, {'@': 223}), 35: (1, {'@': 223}), 20: (1, {'@': 223}), 32: (1, {'@': 223}), 64: (1, {'@': 223}), 80: (1, {'@': 223}), 25: (1, {'@': 223}), 96: (1, {'@': 223}), 47: (1, {'@': 223}), 12: (1, {'@': 223}), 34: (1, {'@': 223}), 70: (1, {'@': 223}), 77: (1, {'@': 223}), 19: (1, {'@': 223}), 81: (1, {'@': 223}), 30: (1, {'@': 223}), 54: (1, {'@': 223}), 2: (1, {'@': 223}), 37: (1, {'@': 223}), 52: (1, {'@': 223}), 97: (1, {'@': 223}), 9: (1, {'@': 223}), 13: (1, {'@': 223}), 98: (1, {'@': 223}), 39: (1, {'@': 223})}, 572: {51: (0, 583), 4: (0, 289), 38: (0, 459), 43: (0, 258), 54: (0, 330), 5: (0, 387), 6: (0, 390), 56: (0, 224), 57: (0, 230), 13: (0, 541), 14: (0, 587), 58: (0, 449), 16: (0, 229), 30: (0, 519), 17: (0, 215), 59: (0, 428), 21: (0, 421), 22: (0, 414), 23: (0, 332), 61: (0, 326), 64: (0, 564), 12: (0, 262), 68: (0, 250), 28: (0, 201), 29: (0, 411), 32: (0, 422), 70: (0, 296), 33: (0, 484), 34: (0, 483), 35: (0, 461), 36: (0, 477), 72: (0, 242), 76: (0, 179), 0: (0, 241), 77: (0, 260), 40: (0, 508), 78: (0, 34), 80: (0, 167), 42: (0, 364), 85: (0, 26), 44: (0, 543), 2: (0, 408), 82: (0, 106), 48: (0, 495), 49: (0, 579)}, 573: {86: (1, {'@': 240}), 83: (1, {'@': 240})}, 574: {176: (0, 393), 83: (0, 466), 133: (1, {'@': 176}), 39: (1, {'@': 176}), 89: (1, {'@': 176}), 123: (1, {'@': 176}), 128: (1, {'@': 176}), 134: (1, {'@': 176}), 129: (1, {'@': 176}), 119: (1, {'@': 176}), 107: (1, {'@': 176}), 136: (1, {'@': 176}), 117: (1, {'@': 176}), 120: (1, {'@': 176}), 135: (1, {'@': 176}), 113: (1, {'@': 176}), 114: (1, {'@': 176}), 118: (1, {'@': 176})}, 575: {83: (0, 288), 211: (0, 570), 86: (1, {'@': 121})}, 576: {0: (0, 401), 3: (0, 490), 2: (0, 408), 1: (0, 348), 226: (0, 354)}, 577: {83: (0, 524), 86: (1, {'@': 129})}, 578: {89: (1, {'@': 197}), 39: (1, {'@': 197})}, 579: {40: (1, {'@': 405}), 48: (1, {'@': 405}), 89: (1, {'@': 405}), 105: (1, {'@': 405}), 119: (1, {'@': 405}), 106: (1, {'@': 405}), 107: (1, {'@': 405}), 120: (1, {'@': 405}), 83: (1, {'@': 405}), 72: (1, {'@': 405}), 121: (1, {'@': 405}), 139: (1, {'@': 405}), 122: (1, {'@': 405}), 123: (1, {'@': 405}), 109: (1, {'@': 405}), 124: (1, {'@': 405}), 94: (1, {'@': 405}), 138: (1, {'@': 405}), 125: (1, {'@': 405}), 126: (1, {'@': 405}), 127: (1, {'@': 405}), 39: (1, {'@': 405}), 64: (1, {'@': 405}), 110: (1, {'@': 405}), 128: (1, {'@': 405}), 111: (1, {'@': 405}), 129: (1, {'@': 405}), 130: (1, {'@': 405}), 112: (1, {'@': 405}), 113: (1, {'@': 405}), 131: (1, {'@': 405}), 114: (1, {'@': 405}), 12: (1, {'@': 405}), 132: (1, {'@': 405}), 115: (1, {'@': 405}), 99: (1, {'@': 405}), 133: (1, {'@': 405}), 116: (1, {'@': 405}), 134: (1, {'@': 405}), 135: (1, {'@': 405}), 117: (1, {'@': 405}), 52: (1, {'@': 405}), 136: (1, {'@': 405}), 137: (1, {'@': 405}), 118: (1, {'@': 405}), 86: (1, {'@': 405}), 108: (1, {'@': 405}), 84: (1, {'@': 405}), 103: (1, {'@': 405}), 95: (1, {'@': 405}), 102: (1, {'@': 405}), 2: (1, {'@': 405}), 88: (1, {'@': 405})}, 580: {86: (0, 64)}, 581: {89: (1, {'@': 453}), 105: (1, {'@': 453}), 119: (1, {'@': 453}), 107: (1, {'@': 453}), 120: (1, {'@': 453}), 108: (1, {'@': 453}), 83: (1, {'@': 453}), 103: (1, {'@': 453}), 121: (1, {'@': 453}), 122: (1, {'@': 453}), 123: (1, {'@': 453}), 84: (1, {'@': 453}), 94: (1, {'@': 453}), 86: (1, {'@': 453}), 95: (1, {'@': 453}), 125: (1, {'@': 453}), 126: (1, {'@': 453}), 39: (1, {'@': 453}), 64: (1, {'@': 453}), 128: (1, {'@': 453}), 129: (1, {'@': 453}), 102: (1, {'@': 453}), 113: (1, {'@': 453}), 131: (1, {'@': 453}), 114: (1, {'@': 453}), 118: (1, {'@': 453}), 132: (1, {'@': 453}), 115: (1, {'@': 453}), 133: (1, {'@': 453}), 116: (1, {'@': 453}), 2: (1, {'@': 453}), 134: (1, {'@': 453}), 135: (1, {'@': 453}), 88: (1, {'@': 453}), 117: (1, {'@': 453}), 136: (1, {'@': 453}), 138: (1, {'@': 453})}, 582: {40: (1, {'@': 312}), 48: (1, {'@': 312}), 89: (1, {'@': 312}), 105: (1, {'@': 312}), 119: (1, {'@': 312}), 106: (1, {'@': 312}), 107: (1, {'@': 312}), 120: (1, {'@': 312}), 83: (1, {'@': 312}), 72: (1, {'@': 312}), 121: (1, {'@': 312}), 139: (1, {'@': 312}), 122: (1, {'@': 312}), 123: (1, {'@': 312}), 109: (1, {'@': 312}), 124: (1, {'@': 312}), 94: (1, {'@': 312}), 138: (1, {'@': 312}), 125: (1, {'@': 312}), 126: (1, {'@': 312}), 127: (1, {'@': 312}), 39: (1, {'@': 312}), 64: (1, {'@': 312}), 110: (1, {'@': 312}), 128: (1, {'@': 312}), 111: (1, {'@': 312}), 129: (1, {'@': 312}), 130: (1, {'@': 312}), 112: (1, {'@': 312}), 113: (1, {'@': 312}), 131: (1, {'@': 312}), 114: (1, {'@': 312}), 12: (1, {'@': 312}), 132: (1, {'@': 312}), 115: (1, {'@': 312}), 99: (1, {'@': 312}), 133: (1, {'@': 312}), 116: (1, {'@': 312}), 134: (1, {'@': 312}), 135: (1, {'@': 312}), 117: (1, {'@': 312}), 52: (1, {'@': 312}), 136: (1, {'@': 312}), 137: (1, {'@': 312}), 118: (1, {'@': 312}), 86: (1, {'@': 312}), 108: (1, {'@': 312}), 84: (1, {'@': 312}), 103: (1, {'@': 312}), 95: (1, {'@': 312}), 102: (1, {'@': 312}), 2: (1, {'@': 312}), 88: (1, {'@': 312})}, 583: {68: (1, {'@': 277}), 40: (1, {'@': 277}), 48: (1, {'@': 277}), 59: (1, {'@': 277}), 51: (1, {'@': 277}), 72: (1, {'@': 277}), 49: (1, {'@': 277}), 82: (1, {'@': 277}), 35: (1, {'@': 277}), 32: (1, {'@': 277}), 80: (1, {'@': 277}), 12: (1, {'@': 277}), 34: (1, {'@': 277}), 70: (1, {'@': 277}), 77: (1, {'@': 277}), 30: (1, {'@': 277}), 54: (1, {'@': 277}), 2: (1, {'@': 277}), 13: (1, {'@': 277})}, 584: {2: (0, 408), 0: (0, 469)}, 585: {89: (1, {'@': 192}), 39: (1, {'@': 192})}, 586: {89: (1, {'@': 145}), 39: (1, {'@': 145})}, 587: {94: (0, 351), 39: (1, {'@': 247}), 89: (1, {'@': 247}), 128: (1, {'@': 247}), 129: (1, {'@': 247}), 119: (1, {'@': 247}), 107: (1, {'@': 247}), 120: (1, {'@': 247}), 113: (1, {'@': 247}), 114: (1, {'@': 247}), 83: (1, {'@': 247}), 133: (1, {'@': 247}), 123: (1, {'@': 247}), 134: (1, {'@': 247}), 135: (1, {'@': 247}), 117: (1, {'@': 247}), 136: (1, {'@': 247}), 118: (1, {'@': 247}), 86: (1, {'@': 247}), 108: (1, {'@': 247}), 88: (1, {'@': 247}), 2: (1, {'@': 247}), 102: (1, {'@': 247}), 95: (1, {'@': 247}), 84: (1, {'@': 247})}}, 'start_states': {'start': 177}, 'end_states': {'start': 556}}, '__type__': 'ParsingFrontend'}, 'rules': [{'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}, {'@': 220}, {'@': 221}, {'@': 222}, {'@': 223}, {'@': 224}, {'@': 225}, {'@': 226}, {'@': 227}, {'@': 228}, {'@': 229}, {'@': 230}, {'@': 231}, {'@': 232}, {'@': 233}, {'@': 234}, {'@': 235}, {'@': 236}, {'@': 237}, {'@': 238}, {'@': 239}, {'@': 240}, {'@': 241}, {'@': 242}, {'@': 243}, {'@': 244}, {'@': 245}, {'@': 246}, {'@': 247}, {'@': 248}, {'@': 249}, {'@': 250}, {'@': 251}, {'@': 252}, {'@': 253}, {'@': 254}, {'@': 255}, {'@': 256}, {'@': 257}, {'@': 258}, {'@': 259}, {'@': 260}, {'@': 261}, {'@': 262}, {'@': 263}, {'@': 264}, {'@': 265}, {'@': 266}, {'@': 267}, {'@': 268}, {'@': 269}, {'@': 270}, {'@': 271}, {'@': 272}, {'@': 273}, {'@': 274}, {'@': 275}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 337}, {'@': 338}, {'@': 339}, {'@': 340}, {'@': 341}, {'@': 342}, {'@': 343}, {'@': 344}, {'@': 345}, {'@': 346}, {'@': 347}, {'@': 348}, {'@': 349}, {'@': 350}, {'@': 351}, {'@': 352}, {'@': 353}, {'@': 354}, {'@': 355}, {'@': 356}, {'@': 357}, {'@': 358}, {'@': 359}, {'@': 360}, {'@': 361}, {'@': 362}, {'@': 363}, {'@': 364}, {'@': 365}, {'@': 366}, {'@': 367}, {'@': 368}, {'@': 369}, {'@': 370}, {'@': 371}, {'@': 372}, {'@': 373}, {'@': 374}, {'@': 375}, {'@': 376}, {'@': 377}, {'@': 378}, {'@': 379}, {'@': 380}, {'@': 381}, {'@': 382}, {'@': 383}, {'@': 384}, {'@': 385}, {'@': 386}, {'@': 387}, {'@': 388}, {'@': 389}, {'@': 390}, {'@': 391}, {'@': 392}, {'@': 393}, {'@': 394}, {'@': 395}, {'@': 396}, {'@': 397}, {'@': 398}, {'@': 399}, {'@': 400}, {'@': 401}, {'@': 402}, {'@': 403}, {'@': 404}, {'@': 405}, {'@': 406}, {'@': 407}, {'@': 408}, {'@': 409}, {'@': 410}, {'@': 411}, {'@': 412}, {'@': 413}, {'@': 414}, {'@': 415}, {'@': 416}, {'@': 417}, {'@': 418}, {'@': 419}, {'@': 420}, {'@': 421}, {'@': 422}, {'@': 423}, {'@': 424}, {'@': 425}, {'@': 426}, {'@': 427}, {'@': 428}, {'@': 429}, {'@': 430}, {'@': 431}, {'@': 432}, {'@': 433}, {'@': 434}, {'@': 435}, {'@': 436}, {'@': 437}, {'@': 438}, {'@': 439}, {'@': 440}, {'@': 441}, {'@': 442}, {'@': 443}, {'@': 444}, {'@': 445}, {'@': 446}, {'@': 447}, {'@': 448}, {'@': 449}, {'@': 450}, {'@': 451}, {'@': 452}, {'@': 453}, {'@': 454}, {'@': 455}, {'@': 456}, {'@': 457}, {'@': 458}, {'@': 459}, {'@': 460}, {'@': 461}, {'@': 462}, {'@': 463}, {'@': 464}, {'@': 465}, {'@': 466}, {'@': 467}, {'@': 468}, {'@': 469}, {'@': 470}, {'@': 471}, {'@': 472}, {'@': 473}, {'@': 474}, {'@': 475}, {'@': 476}, {'@': 477}, {'@': 478}, {'@': 479}, {'@': 480}, {'@': 481}, {'@': 482}, {'@': 483}, {'@': 484}, {'@': 485}, {'@': 486}], 'options': {'debug': False, 'strict': False, 'keep_all_tokens': False, 'tree_class': None, 'cache': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': 'normal', 'ambiguity': 'auto', 'regex': False, 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0, 'use_bytes': False, 'ordered_sets': True, 'import_paths': [], 'source_path': None, '_plugins': {}}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': '_NEWLINE', 'pattern': {'value': '(?:\r?\n[\t ]*)+', 'flags': [], 'raw': None, '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 1: {'name': '__IGNORE_0', 'pattern': {'value': '[\t \x0c]+', 'flags': [], 'raw': '/[\\t \\f]+/', '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 2: {'name': '__IGNORE_1', 'pattern': {'value': '\\\\[\t \x0c]*\r?\n', 'flags': [], 'raw': '/\\\\[\\t \\f]*\\r?\\n/', '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 3: {'name': 'NAME', 'pattern': {'value': '[^\\W\\d]\\w*', 'flags': [], 'raw': '/[^\\W\\d]\\w*/', '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 4: {'name': 'COMMENT', 'pattern': {'value': '\\/\\/[^\n]*', 'flags': [], 'raw': '/\\/\\/[^\\n]*/', '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 5: {'name': 'STRING', 'pattern': {'value': '([ubf]?r?|r[ubf])("(?!"").*?(?<!\\\\)(\\\\\\\\)*?"|\'(?!\'\').*?(?<!\\\\)(\\\\\\\\)*?\')', 'flags': ['i'], 'raw': '/([ubf]?r?|r[ubf])("(?!"").*?(?<!\\\\)(\\\\\\\\)*?"|\'(?!\'\').*?(?<!\\\\)(\\\\\\\\)*?\')/i', '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 6: {'name': 'LONG_STRING', 'pattern': {'value': '([ubf]?r?|r[ubf])(""".*?(?<!\\\\)(\\\\\\\\)*?"""|\'\'\'.*?(?<!\\\\)(\\\\\\\\)*?\'\'\')', 'flags': ['s', 'i'], 'raw': '/([ubf]?r?|r[ubf])(""".*?(?<!\\\\)(\\\\\\\\)*?"""|\'\'\'.*?(?<!\\\\)(\\\\\\\\)*?\'\'\')/is', '_width': [6, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 7: {'name': 'DEC_NUMBER', 'pattern': {'value': '(?:0(?:(?:_)?0)*(?![1-9])|[1-9](?:(?:_)?[0-9])*)', 'flags': [], 'raw': None, '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 8: {'name': 'HEX_NUMBER', 'pattern': {'value': '0(?:x|X)(?:(?:_)?(?:[0-9]|[a-f]|[A-F]))+', 'flags': [], 'raw': None, '_width': [3, 4294967295], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 9: {'name': 'OCT_NUMBER', 'pattern': {'value': '0(?:o|O)(?:(?:_)?[0-7])+', 'flags': [], 'raw': None, '_width': [3, 4294967295], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 10: {'name': 'BIN_NUMBER', 'pattern': {'value': '0(?:b|B)(?:(?:_)?[0-1])+', 'flags': [], 'raw': None, '_width': [3, 4294967295], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 11: {'name': 'FLOAT_NUMBER', 'pattern': {'value': '(?:[0-9](?:(?:_)?[0-9])*(?:e|E)(?:(?:\\+|\\-))?[0-9](?:(?:_)?[0-9])*|(?:[0-9](?:(?:_)?[0-9])*\\.(?:[0-9](?:(?:_)?[0-9])*)?|\\.[0-9](?:(?:_)?[0-9])*)(?:(?:e|E)(?:(?:\\+|\\-))?[0-9](?:(?:_)?[0-9])*)?)', 'flags': [], 'raw': None, '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 12: {'name': 'IMAG_NUMBER', 'pattern': {'value': '(?:(?:[0-9](?:(?:_)?[0-9])*(?:e|E)(?:(?:\\+|\\-))?[0-9](?:(?:_)?[0-9])*|(?:[0-9](?:(?:_)?[0-9])*\\.(?:[0-9](?:(?:_)?[0-9])*)?|\\.[0-9](?:(?:_)?[0-9])*)(?:(?:e|E)(?:(?:\\+|\\-))?[0-9](?:(?:_)?[0-9])*)?)|[0-9](?:(?:_)?[0-9])*)(?:J|j)', 'flags': [], 'raw': None, '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 13: {'name': 'DEF', 'pattern': {'value': 'def', 'flags': [], 'raw': '"def"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 14: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], 'raw': '"("', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 15: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], 'raw': '")"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 16: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], 'raw': '":"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 17: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], 'raw': '","', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 18: {'name': 'EQUAL', 'pattern': {'value': '=', 'flags': [], 'raw': '"="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 19: {'name': 'LAMBDA', 'pattern': {'value': 'lambda', 'flags': [], 'raw': '"lambda"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 20: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], 'raw': '"*"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 21: {'name': '__ANON_0', 'pattern': {'value': '**', 'flags': [], 'raw': '"**"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 22: {'name': 'SEMICOLON', 'pattern': {'value': ';', 'flags': [], 'raw': '";"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 23: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], 'raw': '"["', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 24: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], 'raw': '"]"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 25: {'name': '__ANON_1', 'pattern': {'value': '::', 'flags': [], 'raw': '"::"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 26: {'name': '__ANON_2', 'pattern': {'value': '+=', 'flags': [], 'raw': '"+="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 27: {'name': '__ANON_3', 'pattern': {'value': '-=', 'flags': [], 'raw': '"-="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 28: {'name': '__ANON_4', 'pattern': {'value': '*=', 'flags': [], 'raw': '"*="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 29: {'name': '__ANON_5', 'pattern': {'value': '@=', 'flags': [], 'raw': '"@="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 30: {'name': '__ANON_6', 'pattern': {'value': '/=', 'flags': [], 'raw': '"/="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 31: {'name': '__ANON_7', 'pattern': {'value': '%=', 'flags': [], 'raw': '"%="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 32: {'name': '__ANON_8', 'pattern': {'value': '&=', 'flags': [], 'raw': '"&="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 33: {'name': '__ANON_9', 'pattern': {'value': '|=', 'flags': [], 'raw': '"|="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 34: {'name': '__ANON_10', 'pattern': {'value': '^=', 'flags': [], 'raw': '"^="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 35: {'name': '__ANON_11', 'pattern': {'value': '<<=', 'flags': [], 'raw': '"<<="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 36: {'name': '__ANON_12', 'pattern': {'value': '>>=', 'flags': [], 'raw': '">>="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 37: {'name': '__ANON_13', 'pattern': {'value': '**=', 'flags': [], 'raw': '"**="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 38: {'name': '__ANON_14', 'pattern': {'value': '//=', 'flags': [], 'raw': '"//="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 39: {'name': 'PASS', 'pattern': {'value': 'pass', 'flags': [], 'raw': '"pass"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 40: {'name': 'BREAK', 'pattern': {'value': 'break', 'flags': [], 'raw': '"break"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 41: {'name': 'CONTINUE', 'pattern': {'value': 'continue', 'flags': [], 'raw': '"continue"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 42: {'name': 'RETURN', 'pattern': {'value': 'return', 'flags': [], 'raw': '"return"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 43: {'name': 'IMPORT', 'pattern': {'value': 'import', 'flags': [], 'raw': '"import"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 44: {'name': 'FROM', 'pattern': {'value': 'from', 'flags': [], 'raw': '"from"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 45: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], 'raw': '"."', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 46: {'name': 'AS', 'pattern': {'value': 'as', 'flags': [], 'raw': '"as"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 47: {'name': 'GLOBAL', 'pattern': {'value': 'global', 'flags': [], 'raw': '"global"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 48: {'name': 'NONLOCAL', 'pattern': {'value': 'nonlocal', 'flags': [], 'raw': '"nonlocal"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 49: {'name': 'ASSERT', 'pattern': {'value': 'assert', 'flags': [], 'raw': '"assert"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 50: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], 'raw': '"else"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 51: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], 'raw': '"if"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 52: {'name': 'ELIF', 'pattern': {'value': 'elif', 'flags': [], 'raw': '"elif"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 53: {'name': 'WHILE', 'pattern': {'value': 'while', 'flags': [], 'raw': '"while"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 54: {'name': 'FOR', 'pattern': {'value': 'for', 'flags': [], 'raw': '"for"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 55: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], 'raw': '"in"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 56: {'name': 'WITH', 'pattern': {'value': 'with', 'flags': [], 'raw': '"with"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 57: {'name': 'OR', 'pattern': {'value': 'or', 'flags': [], 'raw': '"or"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 58: {'name': 'AND', 'pattern': {'value': 'and', 'flags': [], 'raw': '"and"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 59: {'name': 'NOT', 'pattern': {'value': 'not', 'flags': [], 'raw': '"not"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 60: {'name': 'VBAR', 'pattern': {'value': '|', 'flags': [], 'raw': '"|"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 61: {'name': 'CIRCUMFLEX', 'pattern': {'value': '^', 'flags': [], 'raw': '"^"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 62: {'name': 'AMPERSAND', 'pattern': {'value': '&', 'flags': [], 'raw': '"&"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 63: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], 'raw': '"+"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 64: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], 'raw': '"-"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 65: {'name': 'TILDE', 'pattern': {'value': '~', 'flags': [], 'raw': '"~"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 66: {'name': '__ANON_15', 'pattern': {'value': '<<', 'flags': [], 'raw': '"<<"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 67: {'name': '__ANON_16', 'pattern': {'value': '>>', 'flags': [], 'raw': '">>"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 68: {'name': 'AT', 'pattern': {'value': '@', 'flags': [], 'raw': '"@"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 69: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], 'raw': '"/"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 70: {'name': 'PERCENT', 'pattern': {'value': '%', 'flags': [], 'raw': '"%"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 71: {'name': '__ANON_17', 'pattern': {'value': '//', 'flags': [], 'raw': '"//"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 72: {'name': 'LESSTHAN', 'pattern': {'value': '<', 'flags': [], 'raw': '"<"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 73: {'name': 'MORETHAN', 'pattern': {'value': '>', 'flags': [], 'raw': '">"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 74: {'name': '__ANON_18', 'pattern': {'value': '==', 'flags': [], 'raw': '"=="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 75: {'name': '__ANON_19', 'pattern': {'value': '>=', 'flags': [], 'raw': '">="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 76: {'name': '__ANON_20', 'pattern': {'value': '<=', 'flags': [], 'raw': '"<="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 77: {'name': '__ANON_21', 'pattern': {'value': '!=', 'flags': [], 'raw': '"!="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 78: {'name': 'IS', 'pattern': {'value': 'is', 'flags': [], 'raw': '"is"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 79: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], 'raw': '"{"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 80: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], 'raw': '"}"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 81: {'name': '__ANON_22', 'pattern': {'value': '...', 'flags': [], 'raw': '"..."', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 82: {'name': 'NULL', 'pattern': {'value': 'null', 'flags': [], 'raw': '"null"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 83: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], 'raw': '"true"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 84: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], 'raw': '"false"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 85: {'name': 'STRUCT', 'pattern': {'value': 'struct', 'flags': [], 'raw': '"struct"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 86: {'name': 'UNION', 'pattern': {'value': 'union', 'flags': [], 'raw': '"union"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 87: {'origin': {'name': Token('RULE', 'start'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': Token('RULE', 'start'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': Token('RULE', 'funcdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'returntype', '__type__': 'NonTerminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'parameters', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': Token('RULE', 'funcdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'returntype', '__type__': 'NonTerminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, False, True, False, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': Token('RULE', 'funcdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'parameters', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, False, False, False, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': Token('RULE', 'funcdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, False, True, False, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': Token('RULE', 'paramvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typedparam', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': Token('RULE', 'paramvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typedparam', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': Token('RULE', 'typedparam'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': Token('RULE', 'lambdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LAMBDA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_params', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': Token('RULE', 'lambdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LAMBDA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': Token('RULE', 'lambdef_nocond'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LAMBDA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_params', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test_nocond', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': Token('RULE', 'lambdef_nocond'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LAMBDA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test_nocond', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_starparams', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_starparams', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_starparams', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': Token('RULE', 'lambda_paramvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': Token('RULE', 'lambda_paramvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': Token('RULE', 'lambda_kwparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': Token('RULE', 'lambda_kwparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': Token('RULE', 'stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'compound_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': Token('RULE', 'stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'simple_stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': Token('RULE', 'simple_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'small_stmt', '__type__': 'NonTerminal'}, {'name': '__simple_stmt_star_3', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': Token('RULE', 'simple_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'small_stmt', '__type__': 'NonTerminal'}, {'name': '__simple_stmt_star_3', '__type__': 'NonTerminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': Token('RULE', 'simple_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'small_stmt', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': Token('RULE', 'simple_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'small_stmt', '__type__': 'NonTerminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assign_stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pass_stmt', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'flow_stmt', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_stmt', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'global_stmt', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'nonlocal_stmt', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assert_stmt', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': Token('RULE', 'expr_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'testlist_star_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'augassign', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assign', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': Token('RULE', 'var_decl_type'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name_with_package', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': Token('RULE', 'var_decl_type'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_decl_type', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'slice_decl', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': Token('RULE', 'var_decl_type'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'number', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_decl_type', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'fixed_array_decl', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': Token('RULE', 'var_decl_type'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var_decl_type', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'pointer_decl', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': Token('RULE', 'var_decl_type'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'funcdecl', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': Token('RULE', 'name_with_package'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name_with_package', '__type__': 'NonTerminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': Token('RULE', 'name_with_package'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'ident', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': Token('RULE', 'funcdecl'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'returntype', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'parameter_types', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': Token('RULE', 'funcdecl'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'returntype', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, True, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': Token('RULE', 'parameter_types'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': '__parameter_types_star_4', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': Token('RULE', 'parameter_types'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': Token('RULE', 'typed_var'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var_decl_type', '__type__': 'NonTerminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': Token('RULE', 'returntype'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var_decl_type', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': Token('RULE', 'assign'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'testlist_star_expr', '__type__': 'NonTerminal'}, {'name': '__assign_plus_5', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': Token('RULE', 'assign'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typed_var', '__type__': 'NonTerminal'}, {'name': '__assign_plus_5', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'var_decl_init', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': Token('RULE', 'augassign'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'testlist_star_expr', '__type__': 'NonTerminal'}, {'name': 'augassign_op', '__type__': 'NonTerminal'}, {'name': 'testlist', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_2', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_3', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_4', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_5', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_6', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_7', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_8', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_9', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_10', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_11', 'filter_out': False, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_13', 'filter_out': False, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': Token('RULE', 'testlist_star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': Token('RULE', 'testlist_star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': '__testlist_star_expr_plus_6', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': Token('RULE', 'testlist_star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': '__testlist_star_expr_plus_6', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': Token('RULE', 'testlist_star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': Token('RULE', 'pass_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PASS', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': Token('RULE', 'flow_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'break_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': Token('RULE', 'flow_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'continue_stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': Token('RULE', 'flow_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'return_stmt', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': Token('RULE', 'break_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BREAK', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': Token('RULE', 'continue_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONTINUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': Token('RULE', 'return_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'testlist', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': Token('RULE', 'return_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': Token('RULE', 'import_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': Token('RULE', 'import_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_from', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': Token('RULE', 'import_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_as_names', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dots', '__type__': 'NonTerminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dots', '__type__': 'NonTerminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_names', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dots', '__type__': 'NonTerminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_names', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_names', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_names', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dots', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dots', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_names', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dots', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_names', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': Token('RULE', 'dots'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__dots_plus_7', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': Token('RULE', 'import_as_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name', '__type__': 'NonTerminal'}, {'name': 'AS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': Token('RULE', 'import_as_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': Token('RULE', 'dotted_as_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'AS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': Token('RULE', 'dotted_as_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dotted_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': Token('RULE', 'import_as_names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_as_name', '__type__': 'NonTerminal'}, {'name': '__import_as_names_star_8', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': Token('RULE', 'import_as_names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_as_name', '__type__': 'NonTerminal'}, {'name': '__import_as_names_star_8', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': Token('RULE', 'import_as_names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_as_name', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': Token('RULE', 'import_as_names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_as_name', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': Token('RULE', 'dotted_as_names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dotted_as_name', '__type__': 'NonTerminal'}, {'name': '__dotted_as_names_star_9', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': Token('RULE', 'dotted_as_names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dotted_as_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': Token('RULE', 'dotted_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name', '__type__': 'NonTerminal'}, {'name': '__dotted_name_star_10', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': Token('RULE', 'dotted_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': Token('RULE', 'global_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GLOBAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': '__global_stmt_star_11', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': Token('RULE', 'global_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GLOBAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 215: {'origin': {'name': Token('RULE', 'nonlocal_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NONLOCAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': '__global_stmt_star_11', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': Token('RULE', 'nonlocal_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NONLOCAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': Token('RULE', 'assert_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ASSERT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': Token('RULE', 'assert_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ASSERT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'if_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 220: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'while_stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'for_stmt', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'macro_with_block_stmt', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 223: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'with_stmt', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 224: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'funcdef', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 225: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'structdef', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'uniondef', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'uninit_var_decl', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': Token('RULE', 'if_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'elifs', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 229: {'origin': {'name': Token('RULE', 'if_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'elifs', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': Token('RULE', 'elifs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__elifs_star_12', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': Token('RULE', 'elifs'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': Token('RULE', 'elif_'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': Token('RULE', 'while_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 234: {'origin': {'name': Token('RULE', 'while_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': Token('RULE', 'for_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exprlist', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'testlist', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': Token('RULE', 'for_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exprlist', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'testlist', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': Token('RULE', 'with_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WITH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'with_items', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': Token('RULE', 'with_items'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'with_item', '__type__': 'NonTerminal'}, {'name': '__with_items_star_13', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': Token('RULE', 'with_items'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'with_item', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': Token('RULE', 'with_item'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'AS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': Token('RULE', 'with_item'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': Token('RULE', 'macro_with_block_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 243: {'origin': {'name': Token('RULE', 'uninit_var_decl'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typed_var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': Token('RULE', 'suite'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'simple_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': Token('RULE', 'suite'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_INDENT', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__suite_plus_14', '__type__': 'NonTerminal'}, {'name': '_DEDENT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': Token('RULE', 'test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'or_test', '__type__': 'NonTerminal'}, {'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'or_test', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': Token('RULE', 'test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'or_test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': Token('RULE', 'test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambdef', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': Token('RULE', 'test_nocond'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'or_test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': Token('RULE', 'test_nocond'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambdef_nocond', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 251: {'origin': {'name': Token('RULE', 'or_test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'and_test', '__type__': 'NonTerminal'}, {'name': '__or_test_star_15', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': Token('RULE', 'or_test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'and_test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': Token('RULE', 'and_test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'not_test_', '__type__': 'NonTerminal'}, {'name': '__and_test_star_16', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 254: {'origin': {'name': Token('RULE', 'and_test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'not_test_', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 255: {'origin': {'name': Token('RULE', 'not_test_'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'not_test_', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'not_test', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 256: {'origin': {'name': Token('RULE', 'not_test_'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comparison', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 257: {'origin': {'name': Token('RULE', 'comparison'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__comparison_star_17', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 258: {'origin': {'name': Token('RULE', 'comparison'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 259: {'origin': {'name': Token('RULE', 'star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 260: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'or_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 261: {'origin': {'name': Token('RULE', 'or_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'xor_expr', '__type__': 'NonTerminal'}, {'name': '__or_expr_star_18', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 262: {'origin': {'name': Token('RULE', 'or_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'xor_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 263: {'origin': {'name': Token('RULE', 'xor_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'and_expr', '__type__': 'NonTerminal'}, {'name': '__xor_expr_star_19', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 264: {'origin': {'name': Token('RULE', 'xor_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'and_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 265: {'origin': {'name': Token('RULE', 'and_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'shift_expr', '__type__': 'NonTerminal'}, {'name': '__and_expr_star_20', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 266: {'origin': {'name': Token('RULE', 'and_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'shift_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': Token('RULE', 'shift_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arith_expr', '__type__': 'NonTerminal'}, {'name': '__shift_expr_star_21', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 268: {'origin': {'name': Token('RULE', 'shift_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arith_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 269: {'origin': {'name': Token('RULE', 'arith_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': '__arith_expr_star_22', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 270: {'origin': {'name': Token('RULE', 'arith_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 271: {'origin': {'name': Token('RULE', 'term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'factor', '__type__': 'NonTerminal'}, {'name': '__term_star_23', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 272: {'origin': {'name': Token('RULE', 'term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'factor', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 273: {'origin': {'name': Token('RULE', 'factor'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_unary_op', '__type__': 'NonTerminal'}, {'name': 'factor', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 274: {'origin': {'name': Token('RULE', 'factor'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'power', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 275: {'origin': {'name': Token('RULE', '_unary_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 276: {'origin': {'name': Token('RULE', '_unary_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 277: {'origin': {'name': Token('RULE', '_unary_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TILDE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 278: {'origin': {'name': Token('RULE', '_add_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 279: {'origin': {'name': Token('RULE', '_add_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 280: {'origin': {'name': Token('RULE', '_shift_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 281: {'origin': {'name': Token('RULE', '_shift_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_16', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 282: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 283: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 284: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 285: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 286: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_17', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 287: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LESSTHAN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 288: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MORETHAN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 289: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_18', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 290: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_19', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 291: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_20', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 292: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_21', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 293: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 294: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NOT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 295: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 296: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'NOT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 297: {'origin': {'name': Token('RULE', 'power'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'factor', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 298: {'origin': {'name': Token('RULE', 'power'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 299: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arguments', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'funccall', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 300: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'funccall', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 301: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'subscriptlist', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'getitem', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 302: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'getattr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 303: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 304: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_tuple_inner', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 305: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 306: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'comprehension{test_or_star_expr}', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'tuple_comprehension', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 307: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_exprlist', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 308: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 309: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'comprehension{test_or_star_expr}', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'list_comprehension', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 310: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_dict_exprlist', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'dict', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 311: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'dict', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 312: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'comprehension{key_value}', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'dict_comprehension', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 313: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_exprlist', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'set', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 314: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'comprehension{test}', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': 'set_comprehension', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 315: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'ident', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 316: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'number', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 317: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string_concat', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 318: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 319: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_22', 'filter_out': True, '__type__': 'Terminal'}], 'order': 15, 'alias': 'ellipsis', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 320: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NULL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 16, 'alias': 'const_null', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 321: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 17, 'alias': 'const_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 322: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 18, 'alias': 'const_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 323: {'origin': {'name': Token('RULE', 'string_concat'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__string_concat_plus_24', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 324: {'origin': {'name': Token('RULE', '_tuple_inner'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': '__testlist_star_expr_plus_6', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 325: {'origin': {'name': Token('RULE', '_tuple_inner'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': '__testlist_star_expr_plus_6', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 326: {'origin': {'name': Token('RULE', '_tuple_inner'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 327: {'origin': {'name': Token('RULE', 'test_or_star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 328: {'origin': {'name': Token('RULE', 'test_or_star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 329: {'origin': {'name': Token('RULE', 'subscriptlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'subscript', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 330: {'origin': {'name': Token('RULE', 'subscriptlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'subscript', '__type__': 'NonTerminal'}, {'name': '__subscriptlist_plus_25', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'subscript_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 331: {'origin': {'name': Token('RULE', 'subscriptlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'subscript', '__type__': 'NonTerminal'}, {'name': '__subscriptlist_plus_25', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'subscript_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 332: {'origin': {'name': Token('RULE', 'subscriptlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'subscript', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'subscript_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 333: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 334: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'sliceop', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 335: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 336: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'sliceop', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 337: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 338: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'sliceop', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (True, False, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 339: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (True, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 340: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'sliceop', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (True, False, True, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 341: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (True, False, True, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 342: {'origin': {'name': Token('RULE', 'sliceop'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 343: {'origin': {'name': Token('RULE', 'sliceop'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 344: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 345: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 346: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__exprlist_plus_26', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 347: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__exprlist_plus_26', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 348: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 349: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}, {'name': '__exprlist_plus_26', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 350: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}, {'name': '__exprlist_plus_26', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 351: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 352: {'origin': {'name': Token('RULE', 'testlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 353: {'origin': {'name': Token('RULE', 'testlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'testlist_tuple', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 354: {'origin': {'name': Token('RULE', 'testlist_tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': '__parameter_types_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 355: {'origin': {'name': Token('RULE', 'testlist_tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': '__parameter_types_star_4', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 356: {'origin': {'name': Token('RULE', 'testlist_tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 357: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key_value', '__type__': 'NonTerminal'}, {'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 358: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key_value', '__type__': 'NonTerminal'}, {'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 359: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key_value', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 360: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key_value', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 361: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 362: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 363: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 364: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 365: {'origin': {'name': Token('RULE', 'key_value'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 366: {'origin': {'name': Token('RULE', '_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': '__testlist_star_expr_plus_6', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 367: {'origin': {'name': Token('RULE', '_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': '__testlist_star_expr_plus_6', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 368: {'origin': {'name': Token('RULE', '_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 369: {'origin': {'name': Token('RULE', '_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 370: {'origin': {'name': Token('RULE', 'structdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'struct_union_types', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 371: {'origin': {'name': Token('RULE', 'uniondef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNION', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'struct_union_types', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 372: {'origin': {'name': Token('RULE', 'type_and_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 373: {'origin': {'name': Token('RULE', 'struct_union_types'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'type_and_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 374: {'origin': {'name': Token('RULE', 'struct_union_types'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_INDENT', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__struct_union_types_plus_28', '__type__': 'NonTerminal'}, {'name': '_DEDENT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 375: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': '__arguments_star_29', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'starargs', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 376: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': '__arguments_star_29', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 377: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': '__arguments_star_29', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 378: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': '__arguments_star_29', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 379: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'starargs', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 380: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 381: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 382: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 383: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'starargs', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 384: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 385: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comprehension{test}', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 386: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': '__starargs_star_30', '__type__': 'NonTerminal'}, {'name': '__arguments_star_29', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 387: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': '__starargs_star_30', '__type__': 'NonTerminal'}, {'name': '__arguments_star_29', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 388: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': '__starargs_star_30', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 389: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': '__starargs_star_30', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 390: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': '__arguments_star_29', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 391: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': '__arguments_star_29', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 392: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 393: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 394: {'origin': {'name': Token('RULE', 'stararg'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 395: {'origin': {'name': Token('RULE', 'kwargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': '__arguments_star_29', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 396: {'origin': {'name': Token('RULE', 'kwargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 397: {'origin': {'name': Token('RULE', 'argvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 398: {'origin': {'name': Token('RULE', 'argvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 399: {'origin': {'name': Token('RULE', 'comp_fors'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__comp_fors_plus_31', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 400: {'origin': {'name': Token('RULE', 'comp_for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exprlist', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'or_test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 401: {'origin': {'name': Token('RULE', 'comp_if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test_nocond', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 402: {'origin': {'name': Token('RULE', 'number'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEC_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 403: {'origin': {'name': Token('RULE', 'number'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HEX_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 404: {'origin': {'name': Token('RULE', 'number'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BIN_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 405: {'origin': {'name': Token('RULE', 'number'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'OCT_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 406: {'origin': {'name': Token('RULE', 'number'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FLOAT_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 407: {'origin': {'name': Token('RULE', 'number'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IMAG_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 408: {'origin': {'name': Token('RULE', 'string'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 409: {'origin': {'name': Token('RULE', 'string'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LONG_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 410: {'origin': {'name': Token('RULE', 'name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 411: {'origin': {'name': 'comprehension{test_or_star_expr}', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': 'comp_fors', '__type__': 'NonTerminal'}, {'name': 'comp_if', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': Token('RULE', 'comprehension'), 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 412: {'origin': {'name': 'comprehension{test_or_star_expr}', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': 'comp_fors', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': Token('RULE', 'comprehension'), 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 413: {'origin': {'name': 'comprehension{key_value}', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key_value', '__type__': 'NonTerminal'}, {'name': 'comp_fors', '__type__': 'NonTerminal'}, {'name': 'comp_if', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': Token('RULE', 'comprehension'), 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 414: {'origin': {'name': 'comprehension{key_value}', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key_value', '__type__': 'NonTerminal'}, {'name': 'comp_fors', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': Token('RULE', 'comprehension'), 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 415: {'origin': {'name': 'comprehension{test}', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'comp_fors', '__type__': 'NonTerminal'}, {'name': 'comp_if', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': Token('RULE', 'comprehension'), 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 416: {'origin': {'name': 'comprehension{test}', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'comp_fors', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': Token('RULE', 'comprehension'), 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 417: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 418: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 419: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 420: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'stmt', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 421: {'origin': {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'paramvalue', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 422: {'origin': {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'paramvalue', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 423: {'origin': {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 424: {'origin': {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 425: {'origin': {'name': '__simple_stmt_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'small_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 426: {'origin': {'name': '__simple_stmt_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__simple_stmt_star_3', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'small_stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 427: {'origin': {'name': '__parameter_types_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 428: {'origin': {'name': '__parameter_types_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__parameter_types_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 429: {'origin': {'name': '__assign_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'testlist_star_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 430: {'origin': {'name': '__assign_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__assign_plus_5', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'testlist_star_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 431: {'origin': {'name': '__testlist_star_expr_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test_or_star_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 432: {'origin': {'name': '__testlist_star_expr_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__testlist_star_expr_plus_6', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test_or_star_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 433: {'origin': {'name': '__dots_plus_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 434: {'origin': {'name': '__dots_plus_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__dots_plus_7', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 435: {'origin': {'name': '__import_as_names_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 436: {'origin': {'name': '__import_as_names_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__import_as_names_star_8', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 437: {'origin': {'name': '__dotted_as_names_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_as_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 438: {'origin': {'name': '__dotted_as_names_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__dotted_as_names_star_9', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_as_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 439: {'origin': {'name': '__dotted_name_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 440: {'origin': {'name': '__dotted_name_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__dotted_name_star_10', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 441: {'origin': {'name': '__global_stmt_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 442: {'origin': {'name': '__global_stmt_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__global_stmt_star_11', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 443: {'origin': {'name': '__elifs_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'elif_', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 444: {'origin': {'name': '__elifs_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__elifs_star_12', '__type__': 'NonTerminal'}, {'name': 'elif_', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 445: {'origin': {'name': '__with_items_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'with_item', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 446: {'origin': {'name': '__with_items_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__with_items_star_13', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'with_item', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 447: {'origin': {'name': '__suite_plus_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 448: {'origin': {'name': '__suite_plus_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__suite_plus_14', '__type__': 'NonTerminal'}, {'name': 'stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 449: {'origin': {'name': '__or_test_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'OR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'and_test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 450: {'origin': {'name': '__or_test_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__or_test_star_15', '__type__': 'NonTerminal'}, {'name': 'OR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'and_test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 451: {'origin': {'name': '__and_test_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'not_test_', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 452: {'origin': {'name': '__and_test_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__and_test_star_16', '__type__': 'NonTerminal'}, {'name': 'AND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'not_test_', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 453: {'origin': {'name': '__comparison_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comp_op', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 454: {'origin': {'name': '__comparison_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__comparison_star_17', '__type__': 'NonTerminal'}, {'name': 'comp_op', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 455: {'origin': {'name': '__or_expr_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VBAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'xor_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 456: {'origin': {'name': '__or_expr_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__or_expr_star_18', '__type__': 'NonTerminal'}, {'name': 'VBAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'xor_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 457: {'origin': {'name': '__xor_expr_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'and_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 458: {'origin': {'name': '__xor_expr_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__xor_expr_star_19', '__type__': 'NonTerminal'}, {'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'and_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 459: {'origin': {'name': '__and_expr_star_20', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMPERSAND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'shift_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 460: {'origin': {'name': '__and_expr_star_20', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__and_expr_star_20', '__type__': 'NonTerminal'}, {'name': 'AMPERSAND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'shift_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 461: {'origin': {'name': '__shift_expr_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_shift_op', '__type__': 'NonTerminal'}, {'name': 'arith_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 462: {'origin': {'name': '__shift_expr_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__shift_expr_star_21', '__type__': 'NonTerminal'}, {'name': '_shift_op', '__type__': 'NonTerminal'}, {'name': 'arith_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 463: {'origin': {'name': '__arith_expr_star_22', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_add_op', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 464: {'origin': {'name': '__arith_expr_star_22', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__arith_expr_star_22', '__type__': 'NonTerminal'}, {'name': '_add_op', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 465: {'origin': {'name': '__term_star_23', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_mul_op', '__type__': 'NonTerminal'}, {'name': 'factor', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 466: {'origin': {'name': '__term_star_23', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__term_star_23', '__type__': 'NonTerminal'}, {'name': '_mul_op', '__type__': 'NonTerminal'}, {'name': 'factor', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 467: {'origin': {'name': '__string_concat_plus_24', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 468: {'origin': {'name': '__string_concat_plus_24', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__string_concat_plus_24', '__type__': 'NonTerminal'}, {'name': 'string', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 469: {'origin': {'name': '__subscriptlist_plus_25', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'subscript', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 470: {'origin': {'name': '__subscriptlist_plus_25', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__subscriptlist_plus_25', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'subscript', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 471: {'origin': {'name': '__exprlist_plus_26', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 472: {'origin': {'name': '__exprlist_plus_26', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'star_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 473: {'origin': {'name': '__exprlist_plus_26', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__exprlist_plus_26', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 474: {'origin': {'name': '__exprlist_plus_26', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__exprlist_plus_26', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'star_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 475: {'origin': {'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'key_value', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 476: {'origin': {'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 477: {'origin': {'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}, 'expansion': [{'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'key_value', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 478: {'origin': {'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}, 'expansion': [{'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 479: {'origin': {'name': '__struct_union_types_plus_28', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'type_and_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 480: {'origin': {'name': '__struct_union_types_plus_28', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__struct_union_types_plus_28', '__type__': 'NonTerminal'}, {'name': 'type_and_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 481: {'origin': {'name': '__arguments_star_29', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'argvalue', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 482: {'origin': {'name': '__arguments_star_29', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__arguments_star_29', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'argvalue', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 483: {'origin': {'name': '__starargs_star_30', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'stararg', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 484: {'origin': {'name': '__starargs_star_30', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__starargs_star_30', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'stararg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 485: {'origin': {'name': '__comp_fors_plus_31', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comp_for', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 486: {'origin': {'name': '__comp_fors_plus_31', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__comp_fors_plus_31', '__type__': 'NonTerminal'}, {'name': 'comp_for', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(**kwargs):
  return Lark._load_from_dict(DATA, MEMO, **kwargs)
