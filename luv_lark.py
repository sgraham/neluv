# The file was automatically generated by Lark v1.1.8
__version__ = "1.1.8"

#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

from copy import deepcopy
from abc import ABC, abstractmethod
from types import ModuleType
from typing import (
    TypeVar, Generic, Type, Tuple, List, Dict, Iterator, Collection, Callable, Optional, FrozenSet, Any,
    Union, Iterable, IO, TYPE_CHECKING, overload, Sequence,
    Pattern as REPattern, ClassVar, Set, Mapping
)


class LarkError(Exception):
    pass


class ConfigurationError(LarkError, ValueError):
    pass


def assert_config(value, options: Collection, msg='Got %r, expected one of %s'):
    if value not in options:
        raise ConfigurationError(msg % (value, options))


class GrammarError(LarkError):
    pass


class ParseError(LarkError):
    pass


class LexError(LarkError):
    pass

T = TypeVar('T')

class UnexpectedInput(LarkError):
    #--
    line: int
    column: int
    pos_in_stream = None
    state: Any
    _terminals_by_name = None
    interactive_parser: 'InteractiveParser'

    def get_context(self, text: str, span: int=40) -> str:
        #--
        assert self.pos_in_stream is not None, self
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        if not isinstance(text, bytes):
            before = text[start:pos].rsplit('\n', 1)[-1]
            after = text[pos:end].split('\n', 1)[0]
            return before + after + '\n' + ' ' * len(before.expandtabs()) + '^\n'
        else:
            before = text[start:pos].rsplit(b'\n', 1)[-1]
            after = text[pos:end].split(b'\n', 1)[0]
            return (before + after + b'\n' + b' ' * len(before.expandtabs()) + b'^\n').decode("ascii", "backslashreplace")

    def match_examples(self, parse_fn: 'Callable[[str], Tree]',
                             examples: Union[Mapping[T, Iterable[str]], Iterable[Tuple[T, Iterable[str]]]],
                             token_type_match_fallback: bool=False,
                             use_accepts: bool=True
                         ) -> Optional[T]:
        #--
        assert self.state is not None, "Not supported for this exception"

        if isinstance(examples, Mapping):
            examples = examples.items()

        candidate = (None, False)
        for i, (label, example) in enumerate(examples):
            assert not isinstance(example, str), "Expecting a list"

            for j, malformed in enumerate(example):
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        if (
                            use_accepts
                            and isinstance(self, UnexpectedToken)
                            and isinstance(ut, UnexpectedToken)
                            and ut.accepts != self.accepts
                        ):
                            logger.debug("Different accepts with same state[%d]: %s != %s at example [%s][%s]" %
                                         (self.state, self.accepts, ut.accepts, i, j))
                            continue
                        if (
                            isinstance(self, (UnexpectedToken, UnexpectedEOF))
                            and isinstance(ut, (UnexpectedToken, UnexpectedEOF))
                        ):
                            if ut.token == self.token:  ##

                                logger.debug("Exact Match at example [%s][%s]" % (i, j))
                                return label

                            if token_type_match_fallback:
                                ##

                                if (ut.token.type == self.token.type) and not candidate[-1]:
                                    logger.debug("Token Type Fallback at example [%s][%s]" % (i, j))
                                    candidate = label, True

                        if candidate[0] is None:
                            logger.debug("Same State match at example [%s][%s]" % (i, j))
                            candidate = label, False

        return candidate[0]

    def _format_expected(self, expected):
        if self._terminals_by_name:
            d = self._terminals_by_name
            expected = [d[t_name].user_repr() if t_name in d else t_name for t_name in expected]
        return "Expected one of: \n\t* %s\n" % '\n\t* '.join(expected)


class UnexpectedEOF(ParseError, UnexpectedInput):
    #--
    expected: 'List[Token]'

    def __init__(self, expected, state=None, terminals_by_name=None):
        super(UnexpectedEOF, self).__init__()

        self.expected = expected
        self.state = state
        from .lexer import Token
        self.token = Token("<EOF>", "")  ##

        self.pos_in_stream = -1
        self.line = -1
        self.column = -1
        self._terminals_by_name = terminals_by_name


    def __str__(self):
        message = "Unexpected end-of-input. "
        message += self._format_expected(self.expected)
        return message


class UnexpectedCharacters(LexError, UnexpectedInput):
    #--

    allowed: Set[str]
    considered_tokens: Set[Any]

    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None,
                 terminals_by_name=None, considered_rules=None):
        super(UnexpectedCharacters, self).__init__()

        ##

        self.line = line
        self.column = column
        self.pos_in_stream = lex_pos
        self.state = state
        self._terminals_by_name = terminals_by_name

        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.considered_rules = considered_rules
        self.token_history = token_history

        if isinstance(seq, bytes):
            self.char = seq[lex_pos:lex_pos + 1].decode("ascii", "backslashreplace")
        else:
            self.char = seq[lex_pos]
        self._context = self.get_context(seq)


    def __str__(self):
        message = "No terminal matches '%s' in the current parser context, at line %d col %d" % (self.char, self.line, self.column)
        message += '\n\n' + self._context
        if self.allowed:
            message += self._format_expected(self.allowed)
        if self.token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in self.token_history)
        return message


class UnexpectedToken(ParseError, UnexpectedInput):
    #--

    expected: Set[str]
    considered_rules: Set[str]

    def __init__(self, token, expected, considered_rules=None, state=None, interactive_parser=None, terminals_by_name=None, token_history=None):
        super(UnexpectedToken, self).__init__()

        ##

        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.pos_in_stream = getattr(token, 'start_pos', None)
        self.state = state

        self.token = token
        self.expected = expected  ##

        self._accepts = NO_VALUE
        self.considered_rules = considered_rules
        self.interactive_parser = interactive_parser
        self._terminals_by_name = terminals_by_name
        self.token_history = token_history


    @property
    def accepts(self) -> Set[str]:
        if self._accepts is NO_VALUE:
            self._accepts = self.interactive_parser and self.interactive_parser.accepts()
        return self._accepts

    def __str__(self):
        message = ("Unexpected token %r at line %s, column %s.\n%s"
                   % (self.token, self.line, self.column, self._format_expected(self.accepts or self.expected)))
        if self.token_history:
            message += "Previous tokens: %r\n" % self.token_history

        return message



class VisitError(LarkError):
    #--

    obj: 'Union[Tree, Token]'
    orig_exc: Exception

    def __init__(self, rule, obj, orig_exc):
        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

        self.rule = rule
        self.obj = obj
        self.orig_exc = orig_exc


class MissingVariableError(LarkError):
    pass


import sys, re
import logging

logger: logging.Logger = logging.getLogger("lark")
logger.addHandler(logging.StreamHandler())
##

##

logger.setLevel(logging.CRITICAL)


NO_VALUE = object()

T = TypeVar("T")


def classify(seq: Iterable, key: Optional[Callable] = None, value: Optional[Callable] = None) -> Dict:
    d: Dict[Any, Any] = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        try:
            d[k].append(v)
        except KeyError:
            d[k] = [v]
    return d


def _deserialize(data: Any, namespace: Dict[str, Any], memo: Dict) -> Any:
    if isinstance(data, dict):
        if '__type__' in data:  ##

            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


_T = TypeVar("_T", bound="Serialize")

class Serialize:
    #--

    def memo_serialize(self, types_to_memoize: List) -> Any:
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo = None) -> Dict[str, Any]:
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        if hasattr(self, '_serialize'):
            self._serialize(res, memo)  ##

        return res

    @classmethod
    def deserialize(cls: Type[_T], data: Dict[str, Any], memo: Dict[int, Any]) -> _T:
        namespace = getattr(cls, '__serialize_namespace__', [])
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)

        if hasattr(inst, '_deserialize'):
            inst._deserialize()  ##


        return inst


class SerializeMemoizer(Serialize):
    #--

    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize: List) -> None:
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value: Serialize) -> bool:
        return isinstance(value, self.types_to_memoize)

    def serialize(self) -> Dict[int, Any]:  ##

        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data: Dict[int, Any], namespace: Dict[str, Any], memo: Dict[Any, Any]) -> Dict[int, Any]:  ##

        return _deserialize(data, namespace, memo)


try:
    import regex
    _has_regex = True
except ImportError:
    _has_regex = False

if sys.version_info >= (3, 11):
    import re._parser as sre_parse
    import re._constants as sre_constants
else:
    import sre_parse
    import sre_constants

categ_pattern = re.compile(r'\\p{[A-Za-z_]+}')

def get_regexp_width(expr: str) -> Union[Tuple[int, int], List[int]]:
    if _has_regex:
        ##

        ##

        ##

        regexp_final = re.sub(categ_pattern, 'A', expr)
    else:
        if re.search(categ_pattern, expr):
            raise ImportError('`regex` module must be installed in order to use Unicode categories.', expr)
        regexp_final = expr
    try:
        ##

        return [int(x) for x in sre_parse.parse(regexp_final).getwidth()]   ##

    except sre_constants.error:
        if not _has_regex:
            raise ValueError(expr)
        else:
            ##

            ##

            c = regex.compile(regexp_final)
            if c.match('') is None:
                ##

                return 1, int(sre_constants.MAXREPEAT)
            else:
                return 0, int(sre_constants.MAXREPEAT)


from collections import OrderedDict

class Meta:

    empty: bool
    line: int
    column: int
    start_pos: int
    end_line: int
    end_column: int
    end_pos: int
    orig_expansion: 'List[TerminalDef]'
    match_tree: bool

    def __init__(self):
        self.empty = True


_Leaf_T = TypeVar("_Leaf_T")
Branch = Union[_Leaf_T, 'Tree[_Leaf_T]']


class Tree(Generic[_Leaf_T]):
    #--

    data: str
    children: 'List[Branch[_Leaf_T]]'

    def __init__(self, data: str, children: 'List[Branch[_Leaf_T]]', meta: Optional[Meta]=None) -> None:
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self) -> Meta:
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%r, %r)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        yield f'{indent_str*level}{self._pretty_label()}'
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            yield f'\t{self.children[0]}\n'
        else:
            yield '\n'
            for n in self.children:
                if isinstance(n, Tree):
                    yield from n._pretty(level+1, indent_str)
                else:
                    yield f'{indent_str*(level+1)}{n}\n'

    def pretty(self, indent_str: str='  ') -> str:
        #--
        return ''.join(self._pretty(0, indent_str))

    def __rich__(self, parent:Optional['rich.tree.Tree']=None) -> 'rich.tree.Tree':
        #--
        return self._rich(parent)

    def _rich(self, parent):
        if parent:
            tree = parent.add(f'[bold]{self.data}[/bold]')
        else:
            import rich.tree
            tree = rich.tree.Tree(self.data)

        for c in self.children:
            if isinstance(c, Tree):
                c._rich(tree)
            else:
                tree.add(f'[green]{c}[/green]')

        return tree

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self) -> int:
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        queue = [self]
        subtrees = OrderedDict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            ##

            queue += [c for c in reversed(subtree.children)  ##

                      if isinstance(c, Tree) and id(c) not in subtrees]

        del queue
        return reversed(list(subtrees.values()))

    def iter_subtrees_topdown(self):
        #--
        stack = [self]
        stack_append = stack.append
        stack_pop = stack.pop
        while stack:
            node = stack_pop()
            if not isinstance(node, Tree):
                continue
            yield node
            for child in reversed(node.children):
                stack_append(child)

    def find_pred(self, pred: 'Callable[[Tree[_Leaf_T]], bool]') -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return filter(pred, self.iter_subtrees())

    def find_data(self, data: str) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return self.find_pred(lambda t: t.data == data)


from functools import wraps, update_wrapper
from inspect import getmembers, getmro

_Return_T = TypeVar('_Return_T')
_Return_V = TypeVar('_Return_V')
_Leaf_T = TypeVar('_Leaf_T')
_Leaf_U = TypeVar('_Leaf_U')
_R = TypeVar('_R')
_FUNC = Callable[..., _Return_T]
_DECORATED = Union[_FUNC, type]

class _DiscardType:
    #--

    def __repr__(self):
        return "lark.visitors.Discard"

Discard = _DiscardType()

##


class _Decoratable:
    #--

    @classmethod
    def _apply_v_args(cls, visit_wrapper):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            ##

            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(value):
                continue

            ##

            if isinstance(cls.__dict__[name], _VArgsWrapper):
                continue

            setattr(cls, name, _VArgsWrapper(cls.__dict__[name], visit_wrapper))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--
    __visit_tokens__ = True   ##


    def __init__(self,  visit_tokens: bool=True) -> None:
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)

    def _transform_children(self, children):
        for c in children:
            if isinstance(c, Tree):
                res = self._transform_tree(c)
            elif self.__visit_tokens__ and isinstance(c, Token):
                res = self._call_userfunc_token(c)
            else:
                res = c

            if res is not Discard:
                yield res

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        #--
        return self._transform_tree(tree)

    def __mul__(
            self: 'Transformer[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V,]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        #--
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        #--
        return Tree(data, children, meta)

    def __default_token__(self, token):
        #--
        return token


def merge_transformers(base_transformer=None, **transformers_to_merge):
    #--
    if base_transformer is None:
        base_transformer = Transformer()
    for prefix, transformer in transformers_to_merge.items():
        for method_name in dir(transformer):
            method = getattr(transformer, method_name)
            if not callable(method):
                continue
            if method_name.startswith("_") or method_name == "transform":
                continue
            prefixed_method = prefix + "__" + method_name
            if hasattr(base_transformer, prefixed_method):
                raise AttributeError("Cannot merge: method '%s' appears more than once" % prefixed_method)

            setattr(base_transformer, prefixed_method, method)

    return base_transformer


class InlineTransformer(Transformer):   ##

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(Generic[_Leaf_T, _Return_T]):

    transformers: 'Tuple[Union[Transformer, TransformerChain], ...]'

    def __init__(self, *transformers: 'Union[Transformer, TransformerChain]') -> None:
        self.transformers = transformers

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for t in self.transformers:
            tree = t.transform(tree)
        return cast(_Return_T, tree)

    def __mul__(
            self: 'TransformerChain[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer[_Leaf_T, _Return_T]):
    #--
    def _transform_tree(self, tree):           ##

        return self._call_userfunc(tree)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer[_Leaf_T, _Return_T]):
    #--

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        rev_postfix = []
        q: List[Branch[_Leaf_T]] = [tree]
        while q:
            t = q.pop()
            rev_postfix.append(t)
            if isinstance(t, Tree):
                q += t.children

        ##

        stack: List = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []

                res = self._call_userfunc(x, args)
                if res is not Discard:
                    stack.append(res)

            elif self.__visit_tokens__ and isinstance(x, Token):
                res = self._call_userfunc_token(x)
                if res is not Discard:
                    stack.append(res)
            else:
                stack.append(x)

        result, = stack  ##

        ##

        ##

        ##

        return cast(_Return_T, result)


class Transformer_InPlaceRecursive(Transformer):
    #--
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)


##


class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        #--
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase, ABC, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree


class Visitor_Recursive(VisitorBase, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree


class Interpreter(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        ##

        ##

        return self._visit_tree(tree)

    def _visit_tree(self, tree: Tree[_Leaf_T]):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree: Tree[_Leaf_T]) -> List:
        return [self._visit_tree(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)


_InterMethod = Callable[[Type[Interpreter], _Return_T], _R]

def visit_children_decor(func: _InterMethod) -> _InterMethod:
    #--
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner

##


def _apply_v_args(obj, visit_wrapper):
    try:
        _apply = obj._apply_v_args
    except AttributeError:
        return _VArgsWrapper(obj, visit_wrapper)
    else:
        return _apply(visit_wrapper)


class _VArgsWrapper:
    #--
    base_func: Callable

    def __init__(self, func: Callable, visit_wrapper: Callable[[Callable, str, list, Any], Any]):
        if isinstance(func, _VArgsWrapper):
            func = func.base_func
        ##

        self.base_func = func  ##

        self.visit_wrapper = visit_wrapper
        update_wrapper(self, func)

    def __call__(self, *args, **kwargs):
        return self.base_func(*args, **kwargs)

    def __get__(self, instance, owner=None):
        try:
            ##

            ##

            g = type(self.base_func).__get__
        except AttributeError:
            return self
        else:
            return _VArgsWrapper(g(self.base_func, instance, owner), self.visit_wrapper)

    def __set_name__(self, owner, name):
        try:
            f = type(self.base_func).__set_name__
        except AttributeError:
            return
        else:
            f(self.base_func, owner, name)


def _vargs_inline(f, _data, children, _meta):
    return f(*children)
def _vargs_meta_inline(f, _data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, _data, children, meta):
    return f(meta, children)
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))


def v_args(inline: bool = False, meta: bool = False, tree: bool = False, wrapper: Optional[Callable] = None) -> Callable[[_DECORATED], _DECORATED]:
    #--
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_v_args(obj, func)
    return _visitor_args_dec



TOKEN_DEFAULT_PRIORITY = 0


class Symbol(Serialize):
    __slots__ = ('name',)

    name: str
    is_term: ClassVar[bool] = NotImplemented

    def __init__(self, name: str) -> None:
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)

    def renamed(self, f):
        return type(self)(f(self.name))


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term: ClassVar[bool] = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)

    def renamed(self, f):
        return type(self)(f(self.name), self.filter_out)


class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term: ClassVar[bool] = False


class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'template_source', 'empty_indices'

    keep_all_tokens: bool
    expand1: bool
    priority: Optional[int]
    template_source: Optional[str]
    empty_indices: Tuple[bool, ...]

    def __init__(self, keep_all_tokens: bool=False, expand1: bool=False, priority: Optional[int]=None, template_source: Optional[str]=None, empty_indices: Tuple[bool, ...]=()) -> None:
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source
        )


class Rule(Serialize):
    #--
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    origin: NonTerminal
    expansion: Sequence[Symbol]
    order: int
    alias: Optional[str]
    options: RuleOptions
    _hash: int

    def __init__(self, origin: NonTerminal, expansion: Sequence[Symbol],
                 order: int=0, alias: Optional[str]=None, options: Optional[RuleOptions]=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion



from copy import copy

try:  ##

    has_interegular = bool(interegular)
except NameError:
    has_interegular = False

class Pattern(Serialize, ABC):
    #--

    value: str
    flags: Collection[str]
    raw: Optional[str]
    type: ClassVar[str]

    def __init__(self, value: str, flags: Collection[str] = (), raw: Optional[str] = None) -> None:
        self.value = value
        self.flags = frozenset(flags)
        self.raw = raw

    def __repr__(self):
        return repr(self.to_regexp())

    ##

    def __hash__(self):
        return hash((type(self), self.value, self.flags))

    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    @abstractmethod
    def to_regexp(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def min_width(self) -> int:
        raise NotImplementedError()

    @property
    @abstractmethod
    def max_width(self) -> int:
        raise NotImplementedError()

    def _get_flags(self, value):
        for f in self.flags:
            value = ('(?%s:%s)' % (f, value))
        return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags', 'raw'

    type: ClassVar[str] = "str"

    def to_regexp(self) -> str:
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self) -> int:
        return len(self.value)

    @property
    def max_width(self) -> int:
        return len(self.value)


class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', 'raw', '_width'

    type: ClassVar[str] = "re"

    def to_regexp(self) -> str:
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self) -> int:
        return self._get_width()[0]

    @property
    def max_width(self) -> int:
        return self._get_width()[1]


class TerminalDef(Serialize):
    #--
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    name: str
    pattern: Pattern
    priority: int

    def __init__(self, name: str, pattern: Pattern, priority: int = TOKEN_DEFAULT_PRIORITY) -> None:
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)

    def user_repr(self) -> str:
        if self.name.startswith('__'):  ##

            return self.pattern.raw or self.name
        else:
            return self.name

_T = TypeVar('_T', bound="Token")

class Token(str):
    #--
    __slots__ = ('type', 'start_pos', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    __match_args__ = ('type', 'value')

    type: str
    start_pos: Optional[int]
    value: Any
    line: Optional[int]
    column: Optional[int]
    end_line: Optional[int]
    end_column: Optional[int]
    end_pos: Optional[int]


    @overload
    def __new__(
            cls,
            type: str,
            value: Any,
            start_pos: Optional[int] = None,
            line: Optional[int] = None,
            column: Optional[int] = None,
            end_line: Optional[int] = None,
            end_column: Optional[int] = None,
            end_pos: Optional[int] = None
    ) -> 'Token':
        ...

    @overload
    def __new__(
            cls,
            type_: str,
            value: Any,
            start_pos: Optional[int] = None,
            line: Optional[int] = None,
            column: Optional[int] = None,
            end_line: Optional[int] = None,
            end_column: Optional[int] = None,
            end_pos: Optional[int] = None
    ) -> 'Token':        ...

    def __new__(cls, *args, **kwargs):
        if "type_" in kwargs:
            warnings.warn("`type_` is deprecated use `type` instead", DeprecationWarning)

            if "type" in kwargs:
                raise TypeError("Error: using both 'type' and the deprecated 'type_' as arguments.")
            kwargs["type"] = kwargs.pop("type_")

        return cls._future_new(*args, **kwargs)


    @classmethod
    def _future_new(cls, type, value, start_pos=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        inst = super(Token, cls).__new__(cls, value)

        inst.type = type
        inst.start_pos = start_pos
        inst.value = value
        inst.line = line
        inst.column = column
        inst.end_line = end_line
        inst.end_column = end_column
        inst.end_pos = end_pos
        return inst

    @overload
    def update(self, type: Optional[str] = None, value: Optional[Any] = None) -> 'Token':
        ...

    @overload
    def update(self, type_: Optional[str] = None, value: Optional[Any] = None) -> 'Token':
        ...

    def update(self, *args, **kwargs):
        if "type_" in kwargs:
            warnings.warn("`type_` is deprecated use `type` instead", DeprecationWarning)

            if "type" in kwargs:
                raise TypeError("Error: using both 'type' and the deprecated 'type_' as arguments.")
            kwargs["type"] = kwargs.pop("type_")

        return self._future_update(*args, **kwargs)

    def _future_update(self, type: Optional[str] = None, value: Optional[Any] = None) -> 'Token':
        return Token.new_borrow_pos(
            type if type is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls: Type[_T], type_: str, value: Any, borrow_t: 'Token') -> _T:
        return cls(type_, value, borrow_t.start_pos, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.start_pos, self.line, self.column))

    def __repr__(self):
        return 'Token(%r, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.start_pos, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return str.__eq__(self, other)

    __hash__ = str.__hash__


class LineCounter:
    #--

    __slots__ = 'char_pos', 'line', 'column', 'line_start_pos', 'newline_char'

    def __init__(self, newline_char):
        self.newline_char = newline_char
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def __eq__(self, other):
        if not isinstance(other, LineCounter):
            return NotImplemented

        return self.char_pos == other.char_pos and self.newline_char == other.newline_char

    def feed(self, token: Token, test_newline=True):
        #--
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1


class UnlessCallback:
    def __init__(self, scanner):
        self.scanner = scanner

    def __call__(self, t):
        res = self.scanner.match(t.value, 0)
        if res:
            _value, t.type = res
        return t


class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2


def _get_match(re_, regexp, s, flags):
    m = re_.match(regexp, s, flags)
    if m:
        return m.group(0)

def _create_unless(terminals, g_regex_flags, re_, use_bytes):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = []
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority != retok.priority:
                continue
            s = strtok.pattern.value
            if s == _get_match(re_, retok.pattern.to_regexp(), s, g_regex_flags):
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(Scanner(unless, g_regex_flags, re_, match_whole=True, use_bytes=use_bytes))

    new_terminals = [t for t in terminals if t not in embedded_strs]
    return new_terminals, callback


class Scanner:
    def __init__(self, terminals, g_regex_flags, re_, use_bytes, match_whole=False):
        self.terminals = terminals
        self.g_regex_flags = g_regex_flags
        self.re_ = re_
        self.use_bytes = use_bytes
        self.match_whole = match_whole

        self.allowed_types = {t.name for t in self.terminals}

        self._mres = self._build_mres(terminals, len(terminals))

    def _build_mres(self, terminals, max_size):
        ##

        ##

        ##

        postfix = '$' if self.match_whole else ''
        mres = []
        while terminals:
            pattern = u'|'.join(u'(?P<%s>%s)' % (t.name, t.pattern.to_regexp() + postfix) for t in terminals[:max_size])
            if self.use_bytes:
                pattern = pattern.encode('latin-1')
            try:
                mre = self.re_.compile(pattern, self.g_regex_flags)
            except AssertionError:  ##

                return self._build_mres(terminals, max_size // 2)

            mres.append(mre)
            terminals = terminals[max_size:]
        return mres

    def match(self, text, pos):
        for mre in self._mres:
            m = mre.match(text, pos)
            if m:
                return m.group(0), m.lastgroup


def _regexp_has_newline(r: str):
    #--
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)


class LexerState:
    #--

    __slots__ = 'text', 'line_ctr', 'last_token'

    text: str
    line_ctr: LineCounter
    last_token: Optional[Token]

    def __init__(self, text: str, line_ctr: Optional[LineCounter]=None, last_token: Optional[Token]=None):
        self.text = text
        self.line_ctr = line_ctr or LineCounter(b'\n' if isinstance(text, bytes) else '\n')
        self.last_token = last_token

    def __eq__(self, other):
        if not isinstance(other, LexerState):
            return NotImplemented

        return self.text is other.text and self.line_ctr == other.line_ctr and self.last_token == other.last_token

    def __copy__(self):
        return type(self)(self.text, copy(self.line_ctr), self.last_token)


class LexerThread:
    #--

    def __init__(self, lexer: 'Lexer', lexer_state: LexerState):
        self.lexer = lexer
        self.state = lexer_state

    @classmethod
    def from_text(cls, lexer: 'Lexer', text: str) -> 'LexerThread':
        return cls(lexer, LexerState(text))

    def lex(self, parser_state):
        return self.lexer.lex(self.state, parser_state)

    def __copy__(self):
        return type(self)(self.lexer, copy(self.state))

    _Token = Token


_Callback = Callable[[Token], Token]

class Lexer(ABC):
    #--
    @abstractmethod
    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        return NotImplemented

    def make_lexer_state(self, text):
        #--
        return LexerState(text)


def _check_regex_collisions(terminal_to_regexp: Dict[TerminalDef, str], comparator, strict_mode, max_collisions_to_show=8):
    if not comparator:
        comparator = interegular.Comparator.from_regexes(terminal_to_regexp)

    ##

    ##

    max_time = 2 if strict_mode else 0.2

    ##

    if comparator.count_marked_pairs() >= max_collisions_to_show:
        return
    for group in classify(terminal_to_regexp, lambda t: t.priority).values():
        for a, b in comparator.check(group, skip_marked=True):
            assert a.priority == b.priority
            ##

            comparator.mark(a, b)

            ##

            message = f"Collision between Terminals {a.name} and {b.name}. "
            try:
                example = comparator.get_example_overlap(a, b, max_time).format_multiline()
            except ValueError:
                ##

                example = "No example could be found fast enough. However, the collision does still exists"
            if strict_mode:
                raise LexError(f"{message}\n{example}")
            logger.warning("%s The lexer will choose between them arbitrarily.\n%s", message, example)
            if comparator.count_marked_pairs() >= max_collisions_to_show:
                logger.warning("Found 8 regex collisions, will not check for more.")
                return


class AbstractBasicLexer(Lexer):
    terminals_by_name: Dict[str, TerminalDef]

    @abstractmethod
    def __init__(self, conf: 'LexerConf', comparator=None) -> None:
        ...

    @abstractmethod
    def next_token(self, lex_state: LexerState, parser_state: Any = None) -> Token:
        ...

    def lex(self, state: LexerState, parser_state: Any) -> Iterator[Token]:
        with suppress(EOFError):
            while True:
                yield self.next_token(state, parser_state)


class BasicLexer(AbstractBasicLexer):
    terminals: Collection[TerminalDef]
    ignore_types: FrozenSet[str]
    newline_types: FrozenSet[str]
    user_callbacks: Dict[str, _Callback]
    callback: Dict[str, _Callback]
    re: ModuleType

    def __init__(self, conf: 'LexerConf', comparator=None) -> None:
        terminals = list(conf.terminals)
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        self.re = conf.re_module

        if not conf.skip_validation:
            ##

            terminal_to_regexp = {}
            for t in terminals:
                regexp = t.pattern.to_regexp()
                try:
                    self.re.compile(regexp, conf.g_regex_flags)
                except self.re.error:
                    raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

                if t.pattern.min_width == 0:
                    raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))
                if t.pattern.type == "re":
                    terminal_to_regexp[t] = regexp

            if not (set(conf.ignore) <= {t.name for t in terminals}):
                raise LexError("Ignore terminals are not defined: %s" % (set(conf.ignore) - {t.name for t in terminals}))

            if has_interegular:
                _check_regex_collisions(terminal_to_regexp, comparator, conf.strict)
            elif conf.strict:
                raise LexError("interegular must be installed for strict mode. Use `pip install 'lark[interegular]'`.")

        ##

        self.newline_types = frozenset(t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp()))
        self.ignore_types = frozenset(conf.ignore)

        terminals.sort(key=lambda x: (-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = conf.callbacks
        self.g_regex_flags = conf.g_regex_flags
        self.use_bytes = conf.use_bytes
        self.terminals_by_name = conf.terminals_by_name

        self._scanner = None

    def _build_scanner(self):
        terminals, self.callback = _create_unless(self.terminals, self.g_regex_flags, self.re, self.use_bytes)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                ##

                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self._scanner = Scanner(terminals, self.g_regex_flags, self.re, self.use_bytes)

    @property
    def scanner(self):
        if self._scanner is None:
            self._build_scanner()
        return self._scanner

    def match(self, text, pos):
        return self.scanner.match(text, pos)

    def next_token(self, lex_state: LexerState, parser_state: Any = None) -> Token:
        line_ctr = lex_state.line_ctr
        while line_ctr.char_pos < len(lex_state.text):
            res = self.match(lex_state.text, line_ctr.char_pos)
            if not res:
                allowed = self.scanner.allowed_types - self.ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(lex_state.text, line_ctr.char_pos, line_ctr.line, line_ctr.column,
                                           allowed=allowed, token_history=lex_state.last_token and [lex_state.last_token],
                                           state=parser_state, terminals_by_name=self.terminals_by_name)

            value, type_ = res

            ignored = type_ in self.ignore_types
            t = None
            if not ignored or type_ in self.callback:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
            line_ctr.feed(value, type_ in self.newline_types)
            if t is not None:
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in self.callback:
                    t = self.callback[t.type](t)
                if not ignored:
                    if not isinstance(t, Token):
                        raise LexError("Callbacks must return a token (returned %r)" % t)
                    lex_state.last_token = t
                    return t

        ##

        raise EOFError(self)


class ContextualLexer(Lexer):
    lexers: Dict[int, AbstractBasicLexer]
    root_lexer: AbstractBasicLexer

    BasicLexer: Type[AbstractBasicLexer] = BasicLexer

    def __init__(self, conf: 'LexerConf', states: Dict[int, Collection[str]], always_accept: Collection[str]=()) -> None:
        terminals = list(conf.terminals)
        terminals_by_name = conf.terminals_by_name

        trad_conf = copy(conf)
        trad_conf.terminals = terminals

        if has_interegular and not conf.skip_validation:
            comparator = interegular.Comparator.from_regexes({t: t.pattern.to_regexp() for t in terminals})
        else:
            comparator = None
        lexer_by_tokens: Dict[FrozenSet[str], AbstractBasicLexer] = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(conf.ignore) | set(always_accept)
                lexer_conf = copy(trad_conf)
                lexer_conf.terminals = [terminals_by_name[n] for n in accepts if n in terminals_by_name]
                lexer = self.BasicLexer(lexer_conf, comparator)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        assert trad_conf.terminals is terminals
        trad_conf.skip_validation = True  ##

        self.root_lexer = self.BasicLexer(trad_conf, comparator)

    def lex(self, lexer_state: LexerState, parser_state: 'ParserState') -> Iterator[Token]:
        try:
            while True:
                lexer = self.lexers[parser_state.position]
                yield lexer.next_token(lexer_state, parser_state)
        except EOFError:
            pass
        except UnexpectedCharacters as e:
            ##

            ##

            try:
                last_token = lexer_state.last_token  ##

                token = self.root_lexer.next_token(lexer_state, parser_state)
                raise UnexpectedToken(token, e.allowed, state=parser_state, token_history=[last_token], terminals_by_name=self.root_lexer.terminals_by_name)
            except UnexpectedCharacters:
                raise e  ##




_ParserArgType: 'TypeAlias' = 'Literal["earley", "lalr", "cyk", "auto"]'
_LexerArgType: 'TypeAlias' = 'Union[Literal["auto", "basic", "contextual", "dynamic", "dynamic_complete"], Type[Lexer]]'
_LexerCallback = Callable[[Token], Token]
ParserCallbacks = Dict[str, Callable]

class LexerConf(Serialize):
    __serialize_fields__ = 'terminals', 'ignore', 'g_regex_flags', 'use_bytes', 'lexer_type'
    __serialize_namespace__ = TerminalDef,

    terminals: Collection[TerminalDef]
    re_module: ModuleType
    ignore: Collection[str]
    postlex: 'Optional[PostLex]'
    callbacks: Dict[str, _LexerCallback]
    g_regex_flags: int
    skip_validation: bool
    use_bytes: bool
    lexer_type: Optional[_LexerArgType]
    strict: bool

    def __init__(self, terminals: Collection[TerminalDef], re_module: ModuleType, ignore: Collection[str]=(), postlex: 'Optional[PostLex]'=None,
                 callbacks: Optional[Dict[str, _LexerCallback]]=None, g_regex_flags: int=0, skip_validation: bool=False, use_bytes: bool=False, strict: bool=False):
        self.terminals = terminals
        self.terminals_by_name = {t.name: t for t in self.terminals}
        assert len(self.terminals) == len(self.terminals_by_name)
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags
        self.re_module = re_module
        self.skip_validation = skip_validation
        self.use_bytes = use_bytes
        self.strict = strict
        self.lexer_type = None

    def _deserialize(self):
        self.terminals_by_name = {t.name: t for t in self.terminals}

    def __deepcopy__(self, memo=None):
        return type(self)(
            deepcopy(self.terminals, memo),
            self.re_module,
            deepcopy(self.ignore, memo),
            deepcopy(self.postlex, memo),
            deepcopy(self.callbacks, memo),
            deepcopy(self.g_regex_flags, memo),
            deepcopy(self.skip_validation, memo),
            deepcopy(self.use_bytes, memo),
        )

class ParserConf(Serialize):
    __serialize_fields__ = 'rules', 'start', 'parser_type'

    rules: List['Rule']
    callbacks: ParserCallbacks
    start: List[str]
    parser_type: _ParserArgType

    def __init__(self, rules: List['Rule'], callbacks: ParserCallbacks, start: List[str]):
        assert isinstance(start, list)
        self.rules = rules
        self.callbacks = callbacks
        self.start = start


from functools import partial, wraps
from itertools import product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)



class PropagatePositions:
    def __init__(self, node_builder, node_filter=None):
        self.node_builder = node_builder
        self.node_filter = node_filter

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            ##

            ##

            ##

            ##


            res_meta = res.meta

            first_meta = self._pp_get_meta(children)
            if first_meta is not None:
                if not hasattr(res_meta, 'line'):
                    ##

                    res_meta.line = getattr(first_meta, 'container_line', first_meta.line)
                    res_meta.column = getattr(first_meta, 'container_column', first_meta.column)
                    res_meta.start_pos = getattr(first_meta, 'container_start_pos', first_meta.start_pos)
                    res_meta.empty = False

                res_meta.container_line = getattr(first_meta, 'container_line', first_meta.line)
                res_meta.container_column = getattr(first_meta, 'container_column', first_meta.column)
                res_meta.container_start_pos = getattr(first_meta, 'container_start_pos', first_meta.start_pos)

            last_meta = self._pp_get_meta(reversed(children))
            if last_meta is not None:
                if not hasattr(res_meta, 'end_line'):
                    res_meta.end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                    res_meta.end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)
                    res_meta.end_pos = getattr(last_meta, 'container_end_pos', last_meta.end_pos)
                    res_meta.empty = False

                res_meta.container_end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                res_meta.container_end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)
                res_meta.container_end_pos = getattr(last_meta, 'container_end_pos', last_meta.end_pos)

        return res

    def _pp_get_meta(self, children):
        for c in children:
            if self.node_filter is not None and not self.node_filter(c):
                continue
            if isinstance(c, Tree):
                if not c.meta.empty:
                    return c.meta
            elif isinstance(c, Token):
                return c
            elif hasattr(c, '__lark_meta__'):
                return c.__lark_meta__()

def make_propagate_positions(option):
    if callable(option):
        return partial(PropagatePositions, node_filter=option)
    elif option is True:
        return PropagatePositions
    elif option is False:
        return None

    raise ConfigurationError('Invalid option for propagate_positions: %r' % option)


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR(ChildFilter):
    #--

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR_NoPlaceholders(ChildFilter):
    #--
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)


def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')


def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices: List[bool]):
    ##

    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            ##

            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])


class AmbiguousExpander:
    #--
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(t):
            return hasattr(t, 'data') and t.data == '_ambig'

        ##

        ##

        ##

        ##

        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                child.expand_kids_by_data('_ambig')

        if not ambiguous:
            return self.node_builder(children)

        expand = [child.children if i in ambiguous else (child,) for i, child in enumerate(children)]
        return self.tree_class('_ambig', [self.node_builder(list(f)) for f in product(*expand)])


def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)


class AmbiguousIntermediateExpander:
    #--

    def __init__(self, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class

    def __call__(self, children):
        def _is_iambig_tree(child):
            return hasattr(child, 'data') and child.data == '_iambig'

        def _collapse_iambig(children):
            #--

            ##

            ##

            if children and _is_iambig_tree(children[0]):
                iambig_node = children[0]
                result = []
                for grandchild in iambig_node.children:
                    collapsed = _collapse_iambig(grandchild.children)
                    if collapsed:
                        for child in collapsed:
                            child.children += children[1:]
                        result += collapsed
                    else:
                        new_tree = self.tree_class('_inter', grandchild.children + children[1:])
                        result.append(new_tree)
                return result

        collapsed = _collapse_iambig(children)
        if collapsed:
            processed_nodes = [self.node_builder(c.children) for c in collapsed]
            return self.tree_class('_ambig', processed_nodes)

        return self.node_builder(children)



def inplace_transformer(func):
    @wraps(func)
    def f(children):
        ##

        tree = Tree(func.__name__, children)
        return func(tree)
    return f


def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")

    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        propagate_positions = make_propagate_positions(self.propagate_positions)

        for rule in rules:
            options = rule.options
            keep_all_tokens = options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                propagate_positions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
                self.ambiguous and partial(AmbiguousIntermediateExpander, self.tree_class)
            ]))

            yield rule, wrapper_chain

    def create_callback(self, transformer=None):
        callbacks = {}

        default_handler = getattr(transformer, '__default__', None)
        if default_handler:
            def default_callback(data, children):
                return default_handler(data, children, None)
        else:
            default_callback = self.tree_class

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.options.template_source or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                elif isinstance(transformer, Transformer_InPlace):
                    f = inplace_transformer(f)
            except AttributeError:
                f = partial(default_callback, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks



class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')

StateT = TypeVar("StateT")

class ParseTableBase(Generic[StateT]):
    states: Dict[StateT, Dict[str, Tuple]]
    start_states: Dict[str, StateT]
    end_states: Dict[str, StateT]

    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])

class ParseTable(ParseTableBase['State']):
    #--
    pass


class IntParseTable(ParseTableBase[int]):
    #--

    @classmethod
    def from_ParseTable(cls, parse_table: ParseTable):
        enum = list(parse_table.states)
        state_to_idx: Dict['State', int] = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



class ParseConf(Generic[StateT]):
    __slots__ = 'parse_table', 'callbacks', 'start', 'start_state', 'end_state', 'states'

    parse_table: ParseTableBase[StateT]
    callbacks: ParserCallbacks
    start: str

    start_state: StateT
    end_state: StateT
    states: Dict[StateT, Dict[str, tuple]]

    def __init__(self, parse_table: ParseTableBase[StateT], callbacks: ParserCallbacks, start: str):
        self.parse_table = parse_table

        self.start_state = self.parse_table.start_states[start]
        self.end_state = self.parse_table.end_states[start]
        self.states = self.parse_table.states

        self.callbacks = callbacks
        self.start = start

class ParserState(Generic[StateT]):
    __slots__ = 'parse_conf', 'lexer', 'state_stack', 'value_stack'

    parse_conf: ParseConf[StateT]
    lexer: LexerThread
    state_stack: List[StateT]
    value_stack: list

    def __init__(self, parse_conf: ParseConf[StateT], lexer: LexerThread, state_stack=None, value_stack=None):
        self.parse_conf = parse_conf
        self.lexer = lexer
        self.state_stack = state_stack or [self.parse_conf.start_state]
        self.value_stack = value_stack or []

    @property
    def position(self) -> StateT:
        return self.state_stack[-1]

    ##

    def __eq__(self, other) -> bool:
        if not isinstance(other, ParserState):
            return NotImplemented
        return len(self.state_stack) == len(other.state_stack) and self.position == other.position

    def __copy__(self):
        return type(self)(
            self.parse_conf,
            self.lexer, ##

            copy(self.state_stack),
            deepcopy(self.value_stack),
        )

    def copy(self) -> 'ParserState[StateT]':
        return copy(self)

    def feed_token(self, token: Token, is_end=False) -> Any:
        state_stack = self.state_stack
        value_stack = self.value_stack
        states = self.parse_conf.states
        end_state = self.parse_conf.end_state
        callbacks = self.parse_conf.callbacks

        while True:
            state = state_stack[-1]
            try:
                action, arg = states[state][token.type]
            except KeyError:
                expected = {s for s in states[state].keys() if s.isupper()}
                raise UnexpectedToken(token, expected, state=self, interactive_parser=None)

            assert arg != end_state

            if action is Shift:
                ##

                assert not is_end
                state_stack.append(arg)
                value_stack.append(token if token.type not in callbacks else callbacks[token.type](token))
                return
            else:
                ##

                rule = arg
                size = len(rule.expansion)
                if size:
                    s = value_stack[-size:]
                    del state_stack[-size:]
                    del value_stack[-size:]
                else:
                    s = []

                value = callbacks[rule](s) if callbacks else s

                _action, new_state = states[state_stack[-1]][rule.origin.name]
                assert _action is Shift
                state_stack.append(new_state)
                value_stack.append(value)

                if is_end and state_stack[-1] == end_state:
                    return value_stack[-1]


class LALR_Parser(Serialize):
    def __init__(self, parser_conf: ParserConf, debug: bool=False, strict: bool=False):
        analysis = LALR_Analyzer(parser_conf, debug=debug, strict=strict)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks, debug=False):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks, debug)
        return inst

    def serialize(self, memo: Any = None) -> Dict[str, Any]:
        return self._parse_table.serialize(memo)

    def parse_interactive(self, lexer: LexerThread, start: str):
        return self.parser.parse(lexer, start, start_interactive=True)

    def parse(self, lexer, start, on_error=None):
        try:
            return self.parser.parse(lexer, start)
        except UnexpectedInput as e:
            if on_error is None:
                raise

            while True:
                if isinstance(e, UnexpectedCharacters):
                    s = e.interactive_parser.lexer_thread.state
                    p = s.line_ctr.char_pos

                if not on_error(e):
                    raise e

                if isinstance(e, UnexpectedCharacters):
                    ##

                    if p == s.line_ctr.char_pos:
                        s.line_ctr.feed(s.text[p:p+1])

                try:
                    return e.interactive_parser.resume_parse()
                except UnexpectedToken as e2:
                    if (isinstance(e, UnexpectedToken)
                        and e.token.type == e2.token.type == '$END'
                        and e.interactive_parser == e2.interactive_parser):
                        ##

                        raise e2
                    e = e2
                except UnexpectedCharacters as e2:
                    e = e2


class _Parser:
    parse_table: ParseTableBase
    callbacks: ParserCallbacks
    debug: bool

    def __init__(self, parse_table: ParseTableBase, callbacks: ParserCallbacks, debug: bool=False):
        self.parse_table = parse_table
        self.callbacks = callbacks
        self.debug = debug

    def parse(self, lexer: LexerThread, start: str, value_stack=None, state_stack=None, start_interactive=False):
        parse_conf = ParseConf(self.parse_table, self.callbacks, start)
        parser_state = ParserState(parse_conf, lexer, state_stack, value_stack)
        if start_interactive:
            return InteractiveParser(self, parser_state, parser_state.lexer)
        return self.parse_from_state(parser_state)


    def parse_from_state(self, state: ParserState, last_token: Optional[Token]=None):
        #--
        try:
            token = last_token
            for token in state.lexer.lex(state):
                assert token is not None
                state.feed_token(token)

            end_token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
            return state.feed_token(end_token, True)
        except UnexpectedInput as e:
            try:
                e.interactive_parser = InteractiveParser(self, state, state.lexer)
            except NameError:
                pass
            raise e
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state.state_stack):
                    print('%d)' % i , s)
                print("")

            raise


class InteractiveParser:
    #--
    def __init__(self, parser, parser_state, lexer_thread: LexerThread):
        self.parser = parser
        self.parser_state = parser_state
        self.lexer_thread = lexer_thread
        self.result = None

    @property
    def lexer_state(self) -> LexerThread:
        warnings.warn("lexer_state will be removed in subsequent releases. Use lexer_thread instead.", DeprecationWarning)
        return self.lexer_thread

    def feed_token(self, token: Token):
        #--
        return self.parser_state.feed_token(token, token.type == '$END')

    def iter_parse(self) -> Iterator[Token]:
        #--
        for token in self.lexer_thread.lex(self.parser_state):
            yield token
            self.result = self.feed_token(token)

    def exhaust_lexer(self) -> List[Token]:
        #--
        return list(self.iter_parse())


    def feed_eof(self, last_token=None):
        #--
        eof = Token.new_borrow_pos('$END', '', last_token) if last_token is not None else self.lexer_thread._Token('$END', '', 0, 1, 1)
        return self.feed_token(eof)


    def __copy__(self):
        #--
        return type(self)(
            self.parser,
            copy(self.parser_state),
            copy(self.lexer_thread),
        )

    def copy(self):
        return copy(self)

    def __eq__(self, other):
        if not isinstance(other, InteractiveParser):
            return False

        return self.parser_state == other.parser_state and self.lexer_thread == other.lexer_thread

    def as_immutable(self):
        #--
        p = copy(self)
        return ImmutableInteractiveParser(p.parser, p.parser_state, p.lexer_thread)

    def pretty(self):
        #--
        out = ["Parser choices:"]
        for k, v in self.choices().items():
            out.append('\t- %s -> %r' % (k, v))
        out.append('stack size: %s' % len(self.parser_state.state_stack))
        return '\n'.join(out)

    def choices(self):
        #--
        return self.parser_state.parse_conf.parse_table.states[self.parser_state.position]

    def accepts(self):
        #--
        accepts = set()
        conf_no_callbacks = copy(self.parser_state.parse_conf)
        ##

        ##

        conf_no_callbacks.callbacks = {}
        for t in self.choices():
            if t.isupper(): ##

                new_cursor = copy(self)
                new_cursor.parser_state.parse_conf = conf_no_callbacks
                try:
                    new_cursor.feed_token(self.lexer_thread._Token(t, ''))
                except UnexpectedToken:
                    pass
                else:
                    accepts.add(t)
        return accepts

    def resume_parse(self):
        #--
        return self.parser.parse_from_state(self.parser_state, last_token=self.lexer_thread.state.last_token)



class ImmutableInteractiveParser(InteractiveParser):
    #--

    result = None

    def __hash__(self):
        return hash((self.parser_state, self.lexer_thread))

    def feed_token(self, token):
        c = copy(self)
        c.result = InteractiveParser.feed_token(c, token)
        return c

    def exhaust_lexer(self):
        #--
        cursor = self.as_mutable()
        cursor.exhaust_lexer()
        return cursor.as_immutable()

    def as_mutable(self):
        #--
        p = copy(self)
        return InteractiveParser(p.parser, p.parser_state, p.lexer_thread)



def _wrap_lexer(lexer_class):
    future_interface = getattr(lexer_class, '__future_interface__', False)
    if future_interface:
        return lexer_class
    else:
        class CustomLexerWrapper(Lexer):
            def __init__(self, lexer_conf):
                self.lexer = lexer_class(lexer_conf)
            def lex(self, lexer_state, parser_state):
                return self.lexer.lex(lexer_state.text)
        return CustomLexerWrapper


def _deserialize_parsing_frontend(data, memo, lexer_conf, callbacks, options):
    parser_conf = ParserConf.deserialize(data['parser_conf'], memo)
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    parser = cls.deserialize(data['parser'], memo, callbacks, options.debug)
    parser_conf.callbacks = callbacks
    return ParsingFrontend(lexer_conf, parser_conf, options, parser=parser)


_parser_creators: 'Dict[str, Callable[[LexerConf, Any, Any], Any]]' = {}


class ParsingFrontend(Serialize):
    __serialize_fields__ = 'lexer_conf', 'parser_conf', 'parser'

    lexer_conf: LexerConf
    parser_conf: ParserConf
    options: Any

    def __init__(self, lexer_conf: LexerConf, parser_conf: ParserConf, options, parser=None):
        self.parser_conf = parser_conf
        self.lexer_conf = lexer_conf
        self.options = options

        ##

        if parser:  ##

            self.parser = parser
        else:
            create_parser = _parser_creators.get(parser_conf.parser_type)
            assert create_parser is not None, "{} is not supported in standalone mode".format(
                    parser_conf.parser_type
                )
            self.parser = create_parser(lexer_conf, parser_conf, options)

        ##

        lexer_type = lexer_conf.lexer_type
        self.skip_lexer = False
        if lexer_type in ('dynamic', 'dynamic_complete'):
            assert lexer_conf.postlex is None
            self.skip_lexer = True
            return

        if isinstance(lexer_type, type):
            assert issubclass(lexer_type, Lexer)
            self.lexer = _wrap_lexer(lexer_type)(lexer_conf)
        elif isinstance(lexer_type, str):
            create_lexer = {
                'basic': create_basic_lexer,
                'contextual': create_contextual_lexer,
            }[lexer_type]
            self.lexer = create_lexer(lexer_conf, self.parser, lexer_conf.postlex, options)
        else:
            raise TypeError("Bad value for lexer_type: {lexer_type}")

        if lexer_conf.postlex:
            self.lexer = PostLexConnector(self.lexer, lexer_conf.postlex)

    def _verify_start(self, start=None):
        if start is None:
            start_decls = self.parser_conf.start
            if len(start_decls) > 1:
                raise ConfigurationError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start_decls)
            start ,= start_decls
        elif start not in self.parser_conf.start:
            raise ConfigurationError("Unknown start rule %s. Must be one of %r" % (start, self.parser_conf.start))
        return start

    def _make_lexer_thread(self, text: str) -> Union[str, LexerThread]:
        cls = (self.options and self.options._plugins.get('LexerThread')) or LexerThread
        return text if self.skip_lexer else cls.from_text(self.lexer, text)

    def parse(self, text: str, start=None, on_error=None):
        chosen_start = self._verify_start(start)
        kw = {} if on_error is None else {'on_error': on_error}
        stream = self._make_lexer_thread(text)
        return self.parser.parse(stream, chosen_start, **kw)

    def parse_interactive(self, text: Optional[str]=None, start=None):
        ##

        ##

        chosen_start = self._verify_start(start)
        if self.parser_conf.parser_type != 'lalr':
            raise ConfigurationError("parse_interactive() currently only works with parser='lalr' ")
        stream = self._make_lexer_thread(text)  ##

        return self.parser.parse_interactive(stream, chosen_start)


def _validate_frontend_args(parser, lexer) -> None:
    assert_config(parser, ('lalr', 'earley', 'cyk'))
    if not isinstance(lexer, type):     ##

        expected = {
            'lalr': ('basic', 'contextual'),
            'earley': ('basic', 'dynamic', 'dynamic_complete'),
            'cyk': ('basic', ),
         }[parser]
        assert_config(lexer, expected, 'Parser %r does not support lexer %%r, expected one of %%s' % parser)


def _get_lexer_callbacks(transformer, terminals):
    result = {}
    for terminal in terminals:
        callback = getattr(transformer, terminal.name, None)
        if callback is not None:
            result[terminal.name] = callback
    return result

class PostLexConnector:
    def __init__(self, lexer, postlexer):
        self.lexer = lexer
        self.postlexer = postlexer

    def lex(self, lexer_state, parser_state):
        i = self.lexer.lex(lexer_state, parser_state)
        return self.postlexer.process(i)



def create_basic_lexer(lexer_conf, parser, postlex, options) -> BasicLexer:
    cls = (options and options._plugins.get('BasicLexer')) or BasicLexer
    return cls(lexer_conf)

def create_contextual_lexer(lexer_conf: LexerConf, parser, postlex, options) -> ContextualLexer:
    cls = (options and options._plugins.get('ContextualLexer')) or ContextualLexer
    parse_table: ParseTableBase[int] = parser._parse_table
    states: Dict[int, Collection[str]] = {idx:list(t.keys()) for idx, t in parse_table.states.items()}
    always_accept: Collection[str] = postlex.always_accept if postlex else ()
    return cls(lexer_conf, states, always_accept=always_accept)

def create_lalr_parser(lexer_conf: LexerConf, parser_conf: ParserConf, options=None) -> LALR_Parser:
    debug = options.debug if options else False
    strict = options.strict if options else False
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    return cls(parser_conf, debug=debug, strict=strict)

_parser_creators['lalr'] = create_lalr_parser




class PostLex(ABC):
    @abstractmethod
    def process(self, stream: Iterator[Token]) -> Iterator[Token]:
        return stream

    always_accept: Iterable[str] = ()

class LarkOptions(Serialize):
    #--

    start: List[str]
    debug: bool
    strict: bool
    transformer: 'Optional[Transformer]'
    propagate_positions: Union[bool, str]
    maybe_placeholders: bool
    cache: Union[bool, str]
    regex: bool
    g_regex_flags: int
    keep_all_tokens: bool
    tree_class: Optional[Callable[[str, List], Any]]
    parser: _ParserArgType
    lexer: _LexerArgType
    ambiguity: 'Literal["auto", "resolve", "explicit", "forest"]'
    postlex: Optional[PostLex]
    priority: 'Optional[Literal["auto", "normal", "invert"]]'
    lexer_callbacks: Dict[str, Callable[[Token], Token]]
    use_bytes: bool
    ordered_sets: bool
    edit_terminals: Optional[Callable[[TerminalDef], TerminalDef]]
    import_paths: 'List[Union[str, Callable[[Union[None, str, PackageResource], str], Tuple[str, str]]]]'
    source_path: Optional[str]

    OPTIONS_DOC = r"""
    **===  General Options  ===**

    start
            The start symbol. Either a string, or a list of strings for multiple possible starts (Default: "start")
    debug
            Display debug information and extra warnings. Use only when debugging (Default: ``False``)
            When used with Earley, it generates a forest graph as "sppf.png", if 'dot' is installed.
    strict
            Throw an exception on any potential ambiguity, including shift/reduce conflicts, and regex collisions.
    transformer
            Applies the transformer to every parse tree (equivalent to applying it after the parse, but faster)
    propagate_positions
            Propagates positional attributes into the 'meta' attribute of all tree branches.
            Sets attributes: (line, column, end_line, end_column, start_pos, end_pos,
                              container_line, container_column, container_end_line, container_end_column)
            Accepts ``False``, ``True``, or a callable, which will filter which nodes to ignore when propagating.
    maybe_placeholders
            When ``True``, the ``[]`` operator returns ``None`` when not matched.
            When ``False``,  ``[]`` behaves like the ``?`` operator, and returns no value at all.
            (default= ``True``)
    cache
            Cache the results of the Lark grammar analysis, for x2 to x3 faster loading. LALR only for now.

            - When ``False``, does nothing (default)
            - When ``True``, caches to a temporary file in the local directory
            - When given a string, caches to the path pointed by the string
    regex
            When True, uses the ``regex`` module instead of the stdlib ``re``.
    g_regex_flags
            Flags that are applied to all terminals (both regex and strings)
    keep_all_tokens
            Prevent the tree builder from automagically removing "punctuation" tokens (Default: ``False``)
    tree_class
            Lark will produce trees comprised of instances of this class instead of the default ``lark.Tree``.

    **=== Algorithm Options ===**

    parser
            Decides which parser engine to use. Accepts "earley" or "lalr". (Default: "earley").
            (there is also a "cyk" option for legacy)
    lexer
            Decides whether or not to use a lexer stage

            - "auto" (default): Choose for me based on the parser
            - "basic": Use a basic lexer
            - "contextual": Stronger lexer (only works with parser="lalr")
            - "dynamic": Flexible and powerful (only with parser="earley")
            - "dynamic_complete": Same as dynamic, but tries *every* variation of tokenizing possible.
    ambiguity
            Decides how to handle ambiguity in the parse. Only relevant if parser="earley"

            - "resolve": The parser will automatically choose the simplest derivation
              (it chooses consistently: greedy for tokens, non-greedy for rules)
            - "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).
            - "forest": The parser will return the root of the shared packed parse forest.

    **=== Misc. / Domain Specific Options ===**

    postlex
            Lexer post-processing (Default: ``None``) Only works with the basic and contextual lexers.
    priority
            How priorities should be evaluated - "auto", ``None``, "normal", "invert" (Default: "auto")
    lexer_callbacks
            Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
    use_bytes
            Accept an input of type ``bytes`` instead of ``str``.
    ordered_sets
            Should Earley use ordered-sets to achieve stable output (~10% slower than regular sets. Default: True)
    edit_terminals
            A callback for editing the terminals before parse.
    import_paths
            A List of either paths or loader functions to specify from where grammars are imported
    source_path
            Override the source of from where the grammar was loaded. Useful for relative imports and unconventional grammar loading
    **=== End of Options ===**
    """
    if __doc__:
        __doc__ += OPTIONS_DOC


    ##

    ##

    ##

    ##

    ##

    ##

    _defaults: Dict[str, Any] = {
        'debug': False,
        'strict': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'regex': False,
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': True,
        'edit_terminals': None,
        'g_regex_flags': 0,
        'use_bytes': False,
        'ordered_sets': True,
        'import_paths': [],
        'source_path': None,
        '_plugins': {},
    }

    def __init__(self, options_dict: Dict[str, Any]) -> None:
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name not in ('cache', 'use_bytes', 'propagate_positions'):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], str):
            options['start'] = [options['start']]

        self.__dict__['options'] = options


        assert_config(self.parser, ('earley', 'lalr', 'cyk', None))

        if self.parser == 'earley' and self.transformer:
            raise ConfigurationError('Cannot specify an embedded transformer when using the Earley algorithm. '
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ConfigurationError("Unknown options: %s" % o.keys())

    def __getattr__(self, name: str) -> Any:
        try:
            return self.__dict__['options'][name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name: str, value: str) -> None:
        assert_config(name, self.options.keys(), "%r isn't a valid option. Expected one of: %s")
        self.options[name] = value

    def serialize(self, memo = None) -> Dict[str, Any]:
        return self.options

    @classmethod
    def deserialize(cls, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]]) -> "LarkOptions":
        return cls(data)


##

##

_LOAD_ALLOWED_OPTIONS = {'postlex', 'transformer', 'lexer_callbacks', 'use_bytes', 'debug', 'g_regex_flags', 'regex', 'propagate_positions', 'tree_class', '_plugins'}

_VALID_PRIORITY_OPTIONS = ('auto', 'normal', 'invert', None)
_VALID_AMBIGUITY_OPTIONS = ('auto', 'resolve', 'explicit', 'forest')


_T = TypeVar('_T', bound="Lark")

class Lark(Serialize):
    #--

    source_path: str
    source_grammar: str
    grammar: 'Grammar'
    options: LarkOptions
    lexer: Lexer
    parser: 'ParsingFrontend'
    terminals: Collection[TerminalDef]

    def __init__(self, grammar: 'Union[Grammar, str, IO[str]]', **options) -> None:
        self.options = LarkOptions(options)
        re_module: types.ModuleType

        ##

        use_regex = self.options.regex
        if use_regex:
            if _has_regex:
                re_module = regex
            else:
                raise ImportError('`regex` module must be installed if calling `Lark(regex=True)`.')
        else:
            re_module = re

        ##

        if self.options.source_path is None:
            try:
                self.source_path = grammar.name  ##

            except AttributeError:
                self.source_path = '<string>'
        else:
            self.source_path = self.options.source_path

        ##

        try:
            read = grammar.read  ##

        except AttributeError:
            pass
        else:
            grammar = read()

        cache_fn = None
        cache_sha256 = None
        if isinstance(grammar, str):
            self.source_grammar = grammar
            if self.options.use_bytes:
                if not isascii(grammar):
                    raise ConfigurationError("Grammar must be ascii only, when use_bytes=True")

            if self.options.cache:
                if self.options.parser != 'lalr':
                    raise ConfigurationError("cache only works with parser='lalr' for now")

                unhashable = ('transformer', 'postlex', 'lexer_callbacks', 'edit_terminals', '_plugins')
                options_str = ''.join(k+str(v) for k, v in options.items() if k not in unhashable)
                from . import __version__
                s = grammar + options_str + __version__ + str(sys.version_info[:2])
                cache_sha256 = sha256_digest(s)

                if isinstance(self.options.cache, str):
                    cache_fn = self.options.cache
                else:
                    if self.options.cache is not True:
                        raise ConfigurationError("cache argument must be bool or str")

                    try:
                        username = getpass.getuser()
                    except Exception:
                        ##

                        ##

                        ##

                        username = "unknown"

                    cache_fn = tempfile.gettempdir() + "/.lark_cache_%s_%s_%s_%s.tmp" % (username, cache_sha256, *sys.version_info[:2])

                old_options = self.options
                try:
                    with FS.open(cache_fn, 'rb') as f:
                        logger.debug('Loading grammar from cache: %s', cache_fn)
                        ##

                        for name in (set(options) - _LOAD_ALLOWED_OPTIONS):
                            del options[name]
                        file_sha256 = f.readline().rstrip(b'\n')
                        cached_used_files = pickle.load(f)
                        if file_sha256 == cache_sha256.encode('utf8') and verify_used_files(cached_used_files):
                            cached_parser_data = pickle.load(f)
                            self._load(cached_parser_data, **options)
                            return
                except FileNotFoundError:
                    ##

                    pass
                except Exception: ##

                    logger.exception("Failed to load Lark from cache: %r. We will try to carry on.", cache_fn)

                    ##

                    ##

                    self.options = old_options


            ##

            self.grammar, used_files = load_grammar(grammar, self.source_path, self.options.import_paths, self.options.keep_all_tokens)
        else:
            assert isinstance(grammar, Grammar)
            self.grammar = grammar


        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                if self.options.postlex is not None:
                    logger.info("postlex can't be used with the dynamic lexer, so we use 'basic' instead. "
                                "Consider using lalr with contextual instead of earley")
                    self.options.lexer = 'basic'
                else:
                    self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'basic'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        if isinstance(lexer, type):
            assert issubclass(lexer, Lexer)     ##

        else:
            assert_config(lexer, ('basic', 'contextual', 'dynamic', 'dynamic_complete'))
            if self.options.postlex is not None and 'dynamic' in lexer:
                raise ConfigurationError("Can't use postlex with a dynamic lexer. Use basic or contextual instead")

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            assert_config(self.options.parser, ('earley', 'cyk'), "%r doesn't support disambiguation. Use one of these parsers instead: %s")

        if self.options.priority == 'auto':
            self.options.priority = 'normal'

        if self.options.priority not in _VALID_PRIORITY_OPTIONS:
            raise ConfigurationError("invalid priority option: %r. Must be one of %r" % (self.options.priority, _VALID_PRIORITY_OPTIONS))
        if self.options.ambiguity not in _VALID_AMBIGUITY_OPTIONS:
            raise ConfigurationError("invalid ambiguity option: %r. Must be one of %r" % (self.options.ambiguity, _VALID_AMBIGUITY_OPTIONS))

        if self.options.parser is None:
            terminals_to_keep = '*'
        elif self.options.postlex is not None:
            terminals_to_keep = set(self.options.postlex.always_accept)
        else:
            terminals_to_keep = set()

        ##

        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start, terminals_to_keep)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name: t for t in self.terminals}

        ##

        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
            for term in self.terminals:
                term.priority = -term.priority
        ##

        ##

        ##

        elif self.options.priority is None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None
            for term in self.terminals:
                term.priority = 0

        ##

        self.lexer_conf = LexerConf(
                self.terminals, re_module, self.ignore_tokens, self.options.postlex,
                self.options.lexer_callbacks, self.options.g_regex_flags, use_bytes=self.options.use_bytes, strict=self.options.strict
            )

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logger.debug('Saving grammar to cache: %s', cache_fn)
            try:
                with FS.open(cache_fn, 'wb') as f:
                    assert cache_sha256 is not None
                    f.write(cache_sha256.encode('utf8') + b'\n')
                    pickle.dump(used_files, f)
                    self.save(f, _LOAD_ALLOWED_OPTIONS)
            except IOError as e:
                logger.exception("Failed to save Lark to cache: %r.", cache_fn, e)

    if __doc__:
        __doc__ += "\n\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self, dont_ignore: bool=False) -> BasicLexer:
        lexer_conf = self.lexer_conf
        if dont_ignore:
            from copy import copy
            lexer_conf = copy(lexer_conf)
            lexer_conf.ignore = ()
        return BasicLexer(lexer_conf)

    def _prepare_callbacks(self) -> None:
        self._callbacks = {}
        ##

        if self.options.ambiguity != 'forest':
            self._parse_tree_builder = ParseTreeBuilder(
                    self.rules,
                    self.options.tree_class or Tree,
                    self.options.propagate_positions,
                    self.options.parser != 'lalr' and self.options.ambiguity == 'explicit',
                    self.options.maybe_placeholders
                )
            self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)
        self._callbacks.update(_get_lexer_callbacks(self.options.transformer, self.terminals))

    def _build_parser(self) -> "ParsingFrontend":
        self._prepare_callbacks()
        _validate_frontend_args(self.options.parser, self.options.lexer)
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return _construct_parsing_frontend(
            self.options.parser,
            self.options.lexer,
            self.lexer_conf,
            parser_conf,
            options=self.options
        )

    def save(self, f, exclude_options: Collection[str] = ()) -> None:
        #--
        if self.options.parser != 'lalr':
            raise NotImplementedError("Lark.save() is only implemented for the LALR(1) parser.")
        data, m = self.memo_serialize([TerminalDef, Rule])
        if exclude_options:
            data["options"] = {n: v for n, v in data["options"].items() if n not in exclude_options}
        pickle.dump({'data': data, 'memo': m}, f, protocol=pickle.HIGHEST_PROTOCOL)

    @classmethod
    def load(cls: Type[_T], f) -> _T:
        #--
        inst = cls.__new__(cls)
        return inst._load(f)

    def _deserialize_lexer_conf(self, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]], options: LarkOptions) -> LexerConf:
        lexer_conf = LexerConf.deserialize(data['lexer_conf'], memo)
        lexer_conf.callbacks = options.lexer_callbacks or {}
        lexer_conf.re_module = regex if options.regex else re
        lexer_conf.use_bytes = options.use_bytes
        lexer_conf.g_regex_flags = options.g_regex_flags
        lexer_conf.skip_validation = True
        lexer_conf.postlex = options.postlex
        return lexer_conf

    def _load(self: _T, f: Any, **kwargs) -> _T:
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo_json = d['memo']
        data = d['data']

        assert memo_json
        memo = SerializeMemoizer.deserialize(memo_json, {'Rule': Rule, 'TerminalDef': TerminalDef}, {})
        options = dict(data['options'])
        if (set(kwargs) - _LOAD_ALLOWED_OPTIONS) & set(LarkOptions._defaults):
            raise ConfigurationError("Some options are not allowed when loading a Parser: {}"
                             .format(set(kwargs) - _LOAD_ALLOWED_OPTIONS))
        options.update(kwargs)
        self.options = LarkOptions.deserialize(options, memo)
        self.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        self.source_path = '<deserialized>'
        _validate_frontend_args(self.options.parser, self.options.lexer)
        self.lexer_conf = self._deserialize_lexer_conf(data['parser'], memo, self.options)
        self.terminals = self.lexer_conf.terminals
        self._prepare_callbacks()
        self._terminals_dict = {t.name: t for t in self.terminals}
        self.parser = _deserialize_parsing_frontend(
            data['parser'],
            memo,
            self.lexer_conf,
            self._callbacks,
            self.options,  ##

        )
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, **kwargs):
        inst = cls.__new__(cls)
        return inst._load({'data': data, 'memo': memo}, **kwargs)

    @classmethod
    def open(cls: Type[_T], grammar_filename: str, rel_to: Optional[str]=None, **options) -> _T:
        #--
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    @classmethod
    def open_from_package(cls: Type[_T], package: str, grammar_path: str, search_paths: 'Sequence[str]'=[""], **options) -> _T:
        #--
        package_loader = FromPackageLoader(package, search_paths)
        full_path, text = package_loader(None, grammar_path)
        options.setdefault('source_path', full_path)
        options.setdefault('import_paths', [])
        options['import_paths'].append(package_loader)
        return cls(text, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source_path, self.options.parser, self.options.lexer)


    def lex(self, text: str, dont_ignore: bool=False) -> Iterator[Token]:
        #--
        lexer: Lexer
        if not hasattr(self, 'lexer') or dont_ignore:
            lexer = self._build_lexer(dont_ignore)
        else:
            lexer = self.lexer
        lexer_thread = LexerThread.from_text(lexer, text)
        stream = lexer_thread.lex(None)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name: str) -> TerminalDef:
        #--
        return self._terminals_dict[name]

    def parse_interactive(self, text: Optional[str]=None, start: Optional[str]=None) -> 'InteractiveParser':
        #--
        return self.parser.parse_interactive(text, start=start)

    def parse(self, text: str, start: Optional[str]=None, on_error: 'Optional[Callable[[UnexpectedInput], bool]]'=None) -> 'ParseTree':
        #--
        return self.parser.parse(text, start=start, on_error=on_error)




class DedentError(LarkError):
    pass

class Indenter(PostLex, ABC):
    paren_level: int
    indent_level: List[int]

    def __init__(self) -> None:
        self.paren_level = 0
        self.indent_level = [0]
        assert self.tab_len > 0

    def handle_NL(self, token: Token) -> Iterator[Token]:
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] ##

        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            if indent != self.indent_level[-1]:
                raise DedentError('Unexpected dedent to column %s. Expected dedent to %s' % (indent, self.indent_level[-1]))

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                yield from self.handle_NL(token)
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    ##

    @property
    def always_accept(self):
        return (self.NL_type,)

    @property
    @abstractmethod
    def NL_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def OPEN_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def CLOSE_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def INDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def DEDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def tab_len(self) -> int:
        raise NotImplementedError()


class PythonIndenter(Indenter):
    NL_type = '_NEWLINE'
    OPEN_PAREN_types = ['LPAR', 'LSQB', 'LBRACE']
    CLOSE_PAREN_types = ['RPAR', 'RSQB', 'RBRACE']
    INDENT_type = '_INDENT'
    DEDENT_type = '_DEDENT'
    tab_len = 8


import pickle, zlib, base64
DATA = (
{'parser': {'lexer_conf': {'terminals': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}, {'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}, {'@': 82}, {'@': 83}, {'@': 84}, {'@': 85}, {'@': 86}], 'ignore': ['__IGNORE_0', '__IGNORE_1', 'COMMENT'], 'g_regex_flags': 0, 'use_bytes': False, 'lexer_type': 'contextual', '__type__': 'LexerConf'}, 'parser_conf': {'rules': [{'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}, {'@': 220}, {'@': 221}, {'@': 222}, {'@': 223}, {'@': 224}, {'@': 225}, {'@': 226}, {'@': 227}, {'@': 228}, {'@': 229}, {'@': 230}, {'@': 231}, {'@': 232}, {'@': 233}, {'@': 234}, {'@': 235}, {'@': 236}, {'@': 237}, {'@': 238}, {'@': 239}, {'@': 240}, {'@': 241}, {'@': 242}, {'@': 243}, {'@': 244}, {'@': 245}, {'@': 246}, {'@': 247}, {'@': 248}, {'@': 249}, {'@': 250}, {'@': 251}, {'@': 252}, {'@': 253}, {'@': 254}, {'@': 255}, {'@': 256}, {'@': 257}, {'@': 258}, {'@': 259}, {'@': 260}, {'@': 261}, {'@': 262}, {'@': 263}, {'@': 264}, {'@': 265}, {'@': 266}, {'@': 267}, {'@': 268}, {'@': 269}, {'@': 270}, {'@': 271}, {'@': 272}, {'@': 273}, {'@': 274}, {'@': 275}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 337}, {'@': 338}, {'@': 339}, {'@': 340}, {'@': 341}, {'@': 342}, {'@': 343}, {'@': 344}, {'@': 345}, {'@': 346}, {'@': 347}, {'@': 348}, {'@': 349}, {'@': 350}, {'@': 351}, {'@': 352}, {'@': 353}, {'@': 354}, {'@': 355}, {'@': 356}, {'@': 357}, {'@': 358}, {'@': 359}, {'@': 360}, {'@': 361}, {'@': 362}, {'@': 363}, {'@': 364}, {'@': 365}, {'@': 366}, {'@': 367}, {'@': 368}, {'@': 369}, {'@': 370}, {'@': 371}, {'@': 372}, {'@': 373}, {'@': 374}, {'@': 375}, {'@': 376}, {'@': 377}, {'@': 378}, {'@': 379}, {'@': 380}, {'@': 381}, {'@': 382}, {'@': 383}, {'@': 384}, {'@': 385}, {'@': 386}, {'@': 387}, {'@': 388}, {'@': 389}, {'@': 390}, {'@': 391}, {'@': 392}, {'@': 393}, {'@': 394}, {'@': 395}, {'@': 396}, {'@': 397}, {'@': 398}, {'@': 399}, {'@': 400}, {'@': 401}, {'@': 402}, {'@': 403}, {'@': 404}, {'@': 405}, {'@': 406}, {'@': 407}, {'@': 408}, {'@': 409}, {'@': 410}, {'@': 411}, {'@': 412}, {'@': 413}, {'@': 414}, {'@': 415}, {'@': 416}, {'@': 417}, {'@': 418}, {'@': 419}, {'@': 420}, {'@': 421}, {'@': 422}, {'@': 423}, {'@': 424}, {'@': 425}, {'@': 426}, {'@': 427}, {'@': 428}, {'@': 429}, {'@': 430}, {'@': 431}, {'@': 432}, {'@': 433}, {'@': 434}, {'@': 435}, {'@': 436}, {'@': 437}, {'@': 438}, {'@': 439}, {'@': 440}, {'@': 441}, {'@': 442}, {'@': 443}, {'@': 444}, {'@': 445}, {'@': 446}, {'@': 447}, {'@': 448}, {'@': 449}, {'@': 450}, {'@': 451}, {'@': 452}, {'@': 453}, {'@': 454}, {'@': 455}, {'@': 456}, {'@': 457}, {'@': 458}, {'@': 459}, {'@': 460}, {'@': 461}, {'@': 462}, {'@': 463}, {'@': 464}, {'@': 465}, {'@': 466}, {'@': 467}, {'@': 468}, {'@': 469}, {'@': 470}, {'@': 471}, {'@': 472}, {'@': 473}, {'@': 474}, {'@': 475}, {'@': 476}, {'@': 477}, {'@': 478}, {'@': 479}, {'@': 480}, {'@': 481}, {'@': 482}, {'@': 483}, {'@': 484}, {'@': 485}, {'@': 486}, {'@': 487}, {'@': 488}, {'@': 489}, {'@': 490}, {'@': 491}, {'@': 492}, {'@': 493}, {'@': 494}, {'@': 495}, {'@': 496}, {'@': 497}, {'@': 498}, {'@': 499}, {'@': 500}, {'@': 501}, {'@': 502}, {'@': 503}, {'@': 504}, {'@': 505}, {'@': 506}, {'@': 507}, {'@': 508}, {'@': 509}, {'@': 510}, {'@': 511}, {'@': 512}], 'start': ['start'], 'parser_type': 'lalr', '__type__': 'ParserConf'}, 'parser': {'tokens': {0: '__string_concat_plus_23', 1: 'BIN_NUMBER', 2: 'LBRACE', 3: 'xor_expr', 4: 'factor', 5: 'arith_expr', 6: 'NULL', 7: 'atom_expr', 8: 'shift_expr', 9: 'LSQB', 10: 'PLUS', 11: 'DEC_NUMBER', 12: 'term', 13: 'number', 14: '_unary_op', 15: 'IMAG_NUMBER', 16: 'and_expr', 17: 'HEX_NUMBER', 18: 'LONG_STRING', 19: 'LPAR', 20: '__ANON_22', 21: 'OCT_NUMBER', 22: 'MINUS', 23: 'STRING', 24: 'power', 25: 'NAME', 26: 'TILDE', 27: 'string_concat', 28: 'string', 29: 'expr', 30: 'FLOAT_NUMBER', 31: 'TRUE', 32: 'atom', 33: 'FALSE', 34: 'or_expr', 35: 'name', 36: 'NOT', 37: 'FOR', 38: 'NONLOCAL', 39: 'IF', 40: 'PASS', 41: 'RETURN', 42: 'CONTINUE', 43: 'LAMBDA', 44: 'BREAK', 45: 'STAR', 46: 'UNION', 47: 'STRUCT', 48: 'GLOBAL', 49: 'DEF', 50: 'WHILE', 51: '$END', 52: '_NEWLINE', 53: 'IMPORT', 54: 'FROM', 55: 'WITH', 56: 'ASSERT', 57: '_DEDENT', 58: 'SEMICOLON', 59: '__struct_union_types_plus_28', 60: 'or_test', 61: 'and_test', 62: 'type_and_name', 63: 'not_test_', 64: 'test', 65: 'lambdef', 66: 'comparison', 67: 'assign_expr', 68: 'COLON', 69: '__ANON_9', 70: '__ANON_5', 71: '__ANON_4', 72: 'AT', 73: '__ANON_8', 74: 'CIRCUMFLEX', 75: '__ANON_15', 76: 'RBRACE', 77: 'EQUAL', 78: 'SLASH', 79: '__ANON_6', 80: 'IN', 81: '__ANON_0', 82: 'PERCENT', 83: '__ANON_13', 84: 'COMMA', 85: '__ANON_1', 86: '__ANON_7', 87: '__ANON_10', 88: '__ANON_11', 89: 'AMPERSAND', 90: 'DOT', 91: 'VBAR', 92: '__ANON_16', 93: 'RPAR', 94: '__ANON_3', 95: '__ANON_17', 96: '__ANON_2', 97: 'RSQB', 98: '__ANON_12', 99: '__ANON_20', 100: 'IS', 101: '__ANON_21', 102: '__ANON_19', 103: 'AND', 104: '__ANON_18', 105: 'MORETHAN', 106: 'LESSTHAN', 107: 'OR', 108: 'ELSE', 109: 'AS', 110: '__comparison_star_16', 111: 'comp_op', 112: 'ELIF', 113: 'exprlist', 114: 'star_expr', 115: 'import_as_name', 116: 'import_as_names', 117: '__and_test_star_15', 118: '__ANON_14', 119: 'test_or_star_expr', 120: 'break_stmt', 121: 'import_name', 122: 'testlist_star_expr', 123: 'small_stmt', 124: 'pass_stmt', 125: 'continue_stmt', 126: 'global_stmt', 127: 'assign_stmt', 128: 'expr_stmt', 129: 'simple_stmt', 130: 'import_from', 131: 'assert_stmt', 132: 'nonlocal_stmt', 133: 'assign', 134: 'import_stmt', 135: 'augassign', 136: 'flow_stmt', 137: 'suite', 138: 'return_stmt', 139: 'dots', 140: 'dotted_name', 141: '__dots_plus_6', 142: '__term_star_22', 143: '_mul_op', 144: '__or_test_star_14', 145: 'sliceop', 146: '_shift_op', 147: 'paramvalue', 148: 'parameters', 149: 'typedparam', 150: 'starguard', 151: 'starparams', 152: 'starparam', 153: 'kwparams', 154: '_exprlist', 155: 'comprehension{test_or_star_expr}', 156: '__global_stmt_star_10', 157: '__testlist_tuple_plus_26', 158: '__testlist_star_expr_plus_5', 159: 'subscript', 160: '__arguments_star_29', 161: '__simple_stmt_star_3', 162: '_dict_exprlist', 163: 'key_value', 164: 'comprehension{test}', 165: 'comprehension{key_value}', 166: 'elif_', 167: '__import_as_names_star_7', 168: '__exprlist_plus_25', 169: 'test_nocond', 170: 'lambdef_nocond', 171: 'macro_with_block_stmt', 172: 'var_decl_init', 173: '__start_star_0', 174: 'uniondef', 175: 'while_stmt', 176: 'with_stmt', 177: 'typed_or_init_var_decl', 178: 'structdef', 179: 'typed_uninit_var_decl', 180: 'start', 181: 'funcdef', 182: 'compound_stmt', 183: 'for_stmt', 184: 'if_stmt', 185: 'stmt', 186: '__suite_plus_13', 187: '__parameters_star_1', 188: 'struct_union_types', 189: '__shift_expr_star_20', 190: '__dotted_as_names_star_8', 191: 'testlist_tuple', 192: 'testlist', 193: '__dotted_name_star_9', 194: 'with_items', 195: 'with_item', 196: 'dotted_as_name', 197: 'dotted_as_names', 198: '__xor_expr_star_18', 199: 'stararg', 200: 'argvalue', 201: 'arguments', 202: 'kwargs', 203: 'starargs', 204: '__or_expr_star_17', 205: '__with_items_star_12', 206: 'comp_for', 207: 'comp_fors', 208: '___dict_exprlist_star_27', 209: '__comp_fors_plus_31', 210: '__and_expr_star_19', 211: 'returntype', 212: '__assign_plus_4', 213: 'augassign_op', 214: 'subscriptlist', 215: 'lambda_paramvalue', 216: 'lambda_starparams', 217: 'lambda_kwparams', 218: 'lambda_params', 219: '__lambda_params_star_2', 220: '__subscriptlist_plus_24', 221: 'comp_if', 222: '__starargs_star_30', 223: '_add_op', 224: '__arith_expr_star_21', 225: '_INDENT', 226: 'elifs', 227: '__elifs_star_11', 228: '_tuple_inner', 229: 'poststarparams'}, 'states': {0: {0: (0, 36), 1: (0, 24), 2: (0, 137), 3: (0, 255), 4: (0, 50), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 15: (0, 414), 16: (0, 244), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 26: (0, 3), 27: (0, 66), 28: (0, 572), 29: (0, 210), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 34: (0, 521), 35: (0, 105)}, 1: {31: (1, {'@': 242}), 21: (1, {'@': 242}), 1: (1, {'@': 242}), 36: (1, {'@': 242}), 37: (1, {'@': 242}), 38: (1, {'@': 242}), 6: (1, {'@': 242}), 2: (1, {'@': 242}), 18: (1, {'@': 242}), 9: (1, {'@': 242}), 39: (1, {'@': 242}), 40: (1, {'@': 242}), 41: (1, {'@': 242}), 15: (1, {'@': 242}), 20: (1, {'@': 242}), 33: (1, {'@': 242}), 42: (1, {'@': 242}), 43: (1, {'@': 242}), 44: (1, {'@': 242}), 45: (1, {'@': 242}), 30: (1, {'@': 242}), 22: (1, {'@': 242}), 11: (1, {'@': 242}), 46: (1, {'@': 242}), 47: (1, {'@': 242}), 48: (1, {'@': 242}), 49: (1, {'@': 242}), 50: (1, {'@': 242}), 10: (1, {'@': 242}), 51: (1, {'@': 242}), 17: (1, {'@': 242}), 26: (1, {'@': 242}), 25: (1, {'@': 242}), 52: (1, {'@': 242}), 53: (1, {'@': 242}), 23: (1, {'@': 242}), 54: (1, {'@': 242}), 55: (1, {'@': 242}), 56: (1, {'@': 242}), 19: (1, {'@': 242}), 57: (1, {'@': 242})}, 2: {58: (1, {'@': 212}), 52: (1, {'@': 212})}, 3: {31: (1, {'@': 303}), 21: (1, {'@': 303}), 1: (1, {'@': 303}), 6: (1, {'@': 303}), 2: (1, {'@': 303}), 18: (1, {'@': 303}), 9: (1, {'@': 303}), 15: (1, {'@': 303}), 20: (1, {'@': 303}), 33: (1, {'@': 303}), 30: (1, {'@': 303}), 22: (1, {'@': 303}), 11: (1, {'@': 303}), 10: (1, {'@': 303}), 17: (1, {'@': 303}), 26: (1, {'@': 303}), 25: (1, {'@': 303}), 23: (1, {'@': 303}), 19: (1, {'@': 303})}, 4: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 59: (0, 315), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 62: (0, 247), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 64: (0, 550), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 5: {25: (0, 409), 35: (0, 8)}, 6: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 64: (0, 508), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 58: (1, {'@': 382}), 52: (1, {'@': 382}), 68: (1, {'@': 382})}, 7: {1: (1, {'@': 429}), 69: (1, {'@': 429}), 36: (1, {'@': 429}), 70: (1, {'@': 429}), 38: (1, {'@': 429}), 71: (1, {'@': 429}), 2: (1, {'@': 429}), 18: (1, {'@': 429}), 39: (1, {'@': 429}), 40: (1, {'@': 429}), 72: (1, {'@': 429}), 58: (1, {'@': 429}), 20: (1, {'@': 429}), 73: (1, {'@': 429}), 42: (1, {'@': 429}), 74: (1, {'@': 429}), 43: (1, {'@': 429}), 75: (1, {'@': 429}), 44: (1, {'@': 429}), 22: (1, {'@': 429}), 76: (1, {'@': 429}), 48: (1, {'@': 429}), 77: (1, {'@': 429}), 78: (1, {'@': 429}), 50: (1, {'@': 429}), 10: (1, {'@': 429}), 68: (1, {'@': 429}), 52: (1, {'@': 429}), 79: (1, {'@': 429}), 53: (1, {'@': 429}), 80: (1, {'@': 429}), 81: (1, {'@': 429}), 23: (1, {'@': 429}), 55: (1, {'@': 429}), 56: (1, {'@': 429}), 19: (1, {'@': 429}), 31: (1, {'@': 429}), 82: (1, {'@': 429}), 21: (1, {'@': 429}), 83: (1, {'@': 429}), 37: (1, {'@': 429}), 84: (1, {'@': 429}), 6: (1, {'@': 429}), 9: (1, {'@': 429}), 41: (1, {'@': 429}), 15: (1, {'@': 429}), 85: (1, {'@': 429}), 86: (1, {'@': 429}), 33: (1, {'@': 429}), 87: (1, {'@': 429}), 45: (1, {'@': 429}), 30: (1, {'@': 429}), 11: (1, {'@': 429}), 88: (1, {'@': 429}), 46: (1, {'@': 429}), 47: (1, {'@': 429}), 89: (1, {'@': 429}), 49: (1, {'@': 429}), 90: (1, {'@': 429}), 51: (1, {'@': 429}), 91: (1, {'@': 429}), 17: (1, {'@': 429}), 26: (1, {'@': 429}), 25: (1, {'@': 429}), 92: (1, {'@': 429}), 93: (1, {'@': 429}), 94: (1, {'@': 429}), 57: (1, {'@': 429}), 95: (1, {'@': 429}), 96: (1, {'@': 429}), 54: (1, {'@': 429}), 97: (1, {'@': 429}), 98: (1, {'@': 429}), 99: (1, {'@': 429}), 100: (1, {'@': 429}), 101: (1, {'@': 429}), 102: (1, {'@': 429}), 103: (1, {'@': 429}), 104: (1, {'@': 429}), 105: (1, {'@': 429}), 106: (1, {'@': 429}), 107: (1, {'@': 429}), 108: (1, {'@': 429}), 109: (1, {'@': 429})}, 8: {68: (0, 447)}, 9: {1: (1, {'@': 400}), 36: (1, {'@': 400}), 38: (1, {'@': 400}), 2: (1, {'@': 400}), 18: (1, {'@': 400}), 39: (1, {'@': 400}), 40: (1, {'@': 400}), 20: (1, {'@': 400}), 42: (1, {'@': 400}), 43: (1, {'@': 400}), 44: (1, {'@': 400}), 22: (1, {'@': 400}), 48: (1, {'@': 400}), 50: (1, {'@': 400}), 10: (1, {'@': 400}), 52: (1, {'@': 400}), 53: (1, {'@': 400}), 23: (1, {'@': 400}), 55: (1, {'@': 400}), 56: (1, {'@': 400}), 19: (1, {'@': 400}), 31: (1, {'@': 400}), 21: (1, {'@': 400}), 37: (1, {'@': 400}), 6: (1, {'@': 400}), 9: (1, {'@': 400}), 41: (1, {'@': 400}), 15: (1, {'@': 400}), 33: (1, {'@': 400}), 45: (1, {'@': 400}), 30: (1, {'@': 400}), 11: (1, {'@': 400}), 46: (1, {'@': 400}), 47: (1, {'@': 400}), 49: (1, {'@': 400}), 51: (1, {'@': 400}), 17: (1, {'@': 400}), 26: (1, {'@': 400}), 25: (1, {'@': 400}), 57: (1, {'@': 400}), 54: (1, {'@': 400})}, 10: {80: (0, 258), 110: (0, 259), 36: (0, 600), 99: (0, 124), 101: (0, 147), 111: (0, 215), 105: (0, 172), 106: (0, 168), 102: (0, 197), 104: (0, 28), 100: (0, 149), 103: (1, {'@': 284}), 39: (1, {'@': 284}), 107: (1, {'@': 284}), 25: (1, {'@': 284}), 58: (1, {'@': 284}), 68: (1, {'@': 284}), 52: (1, {'@': 284}), 84: (1, {'@': 284}), 83: (1, {'@': 284}), 69: (1, {'@': 284}), 77: (1, {'@': 284}), 70: (1, {'@': 284}), 71: (1, {'@': 284}), 94: (1, {'@': 284}), 79: (1, {'@': 284}), 85: (1, {'@': 284}), 86: (1, {'@': 284}), 73: (1, {'@': 284}), 96: (1, {'@': 284}), 87: (1, {'@': 284}), 98: (1, {'@': 284}), 88: (1, {'@': 284}), 31: (1, {'@': 284}), 21: (1, {'@': 284}), 1: (1, {'@': 284}), 37: (1, {'@': 284}), 38: (1, {'@': 284}), 6: (1, {'@': 284}), 2: (1, {'@': 284}), 18: (1, {'@': 284}), 9: (1, {'@': 284}), 40: (1, {'@': 284}), 41: (1, {'@': 284}), 15: (1, {'@': 284}), 20: (1, {'@': 284}), 33: (1, {'@': 284}), 42: (1, {'@': 284}), 43: (1, {'@': 284}), 44: (1, {'@': 284}), 45: (1, {'@': 284}), 30: (1, {'@': 284}), 22: (1, {'@': 284}), 11: (1, {'@': 284}), 46: (1, {'@': 284}), 47: (1, {'@': 284}), 48: (1, {'@': 284}), 49: (1, {'@': 284}), 50: (1, {'@': 284}), 10: (1, {'@': 284}), 51: (1, {'@': 284}), 17: (1, {'@': 284}), 26: (1, {'@': 284}), 53: (1, {'@': 284}), 57: (1, {'@': 284}), 23: (1, {'@': 284}), 54: (1, {'@': 284}), 55: (1, {'@': 284}), 56: (1, {'@': 284}), 19: (1, {'@': 284}), 76: (1, {'@': 284}), 108: (1, {'@': 284}), 109: (1, {'@': 284}), 93: (1, {'@': 284}), 97: (1, {'@': 284})}, 11: {31: (1, {'@': 168}), 21: (1, {'@': 168}), 1: (1, {'@': 168}), 36: (1, {'@': 168}), 37: (1, {'@': 168}), 38: (1, {'@': 168}), 6: (1, {'@': 168}), 2: (1, {'@': 168}), 18: (1, {'@': 168}), 9: (1, {'@': 168}), 39: (1, {'@': 168}), 40: (1, {'@': 168}), 41: (1, {'@': 168}), 15: (1, {'@': 168}), 20: (1, {'@': 168}), 33: (1, {'@': 168}), 42: (1, {'@': 168}), 43: (1, {'@': 168}), 44: (1, {'@': 168}), 45: (1, {'@': 168}), 30: (1, {'@': 168}), 22: (1, {'@': 168}), 11: (1, {'@': 168}), 46: (1, {'@': 168}), 47: (1, {'@': 168}), 48: (1, {'@': 168}), 49: (1, {'@': 168}), 50: (1, {'@': 168}), 10: (1, {'@': 168}), 51: (1, {'@': 168}), 17: (1, {'@': 168}), 26: (1, {'@': 168}), 25: (1, {'@': 168}), 52: (1, {'@': 168}), 53: (1, {'@': 168}), 57: (1, {'@': 168}), 23: (1, {'@': 168}), 54: (1, {'@': 168}), 55: (1, {'@': 168}), 56: (1, {'@': 168}), 19: (1, {'@': 168}), 108: (1, {'@': 168}), 112: (1, {'@': 168})}, 12: {93: (1, {'@': 418})}, 13: {25: (0, 409), 35: (0, 326)}, 14: {84: (0, 288), 93: (1, {'@': 96})}, 15: {29: (0, 171), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 113: (0, 291), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 9: (0, 112), 20: (0, 415), 21: (0, 256), 25: (0, 409), 19: (0, 545), 27: (0, 66), 26: (0, 3), 114: (0, 216), 33: (0, 497), 35: (0, 105), 0: (0, 36), 1: (0, 24), 3: (0, 255), 45: (0, 0), 4: (0, 50), 11: (0, 399), 13: (0, 453), 14: (0, 79), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 16: {115: (0, 160), 25: (0, 409), 35: (0, 234), 116: (0, 289)}, 17: {31: (1, {'@': 310}), 21: (1, {'@': 310}), 1: (1, {'@': 310}), 6: (1, {'@': 310}), 2: (1, {'@': 310}), 18: (1, {'@': 310}), 9: (1, {'@': 310}), 15: (1, {'@': 310}), 20: (1, {'@': 310}), 33: (1, {'@': 310}), 30: (1, {'@': 310}), 22: (1, {'@': 310}), 11: (1, {'@': 310}), 10: (1, {'@': 310}), 17: (1, {'@': 310}), 26: (1, {'@': 310}), 25: (1, {'@': 310}), 23: (1, {'@': 310}), 19: (1, {'@': 310})}, 18: {58: (1, {'@': 210}), 52: (1, {'@': 210})}, 19: {31: (1, {'@': 164}), 21: (1, {'@': 164}), 1: (1, {'@': 164}), 36: (1, {'@': 164}), 37: (1, {'@': 164}), 38: (1, {'@': 164}), 6: (1, {'@': 164}), 2: (1, {'@': 164}), 18: (1, {'@': 164}), 9: (1, {'@': 164}), 39: (1, {'@': 164}), 40: (1, {'@': 164}), 41: (1, {'@': 164}), 15: (1, {'@': 164}), 20: (1, {'@': 164}), 33: (1, {'@': 164}), 42: (1, {'@': 164}), 43: (1, {'@': 164}), 44: (1, {'@': 164}), 45: (1, {'@': 164}), 30: (1, {'@': 164}), 22: (1, {'@': 164}), 11: (1, {'@': 164}), 46: (1, {'@': 164}), 47: (1, {'@': 164}), 48: (1, {'@': 164}), 49: (1, {'@': 164}), 50: (1, {'@': 164}), 10: (1, {'@': 164}), 51: (1, {'@': 164}), 17: (1, {'@': 164}), 26: (1, {'@': 164}), 25: (1, {'@': 164}), 52: (1, {'@': 164}), 53: (1, {'@': 164}), 23: (1, {'@': 164}), 54: (1, {'@': 164}), 55: (1, {'@': 164}), 56: (1, {'@': 164}), 19: (1, {'@': 164}), 57: (1, {'@': 164})}, 20: {68: (0, 238)}, 21: {93: (0, 144)}, 22: {107: (0, 194), 25: (1, {'@': 277}), 39: (1, {'@': 277}), 58: (1, {'@': 277}), 68: (1, {'@': 277}), 52: (1, {'@': 277}), 84: (1, {'@': 277}), 83: (1, {'@': 277}), 69: (1, {'@': 277}), 77: (1, {'@': 277}), 70: (1, {'@': 277}), 71: (1, {'@': 277}), 94: (1, {'@': 277}), 79: (1, {'@': 277}), 85: (1, {'@': 277}), 86: (1, {'@': 277}), 73: (1, {'@': 277}), 96: (1, {'@': 277}), 87: (1, {'@': 277}), 98: (1, {'@': 277}), 88: (1, {'@': 277}), 31: (1, {'@': 277}), 21: (1, {'@': 277}), 1: (1, {'@': 277}), 36: (1, {'@': 277}), 37: (1, {'@': 277}), 38: (1, {'@': 277}), 6: (1, {'@': 277}), 2: (1, {'@': 277}), 18: (1, {'@': 277}), 9: (1, {'@': 277}), 40: (1, {'@': 277}), 41: (1, {'@': 277}), 15: (1, {'@': 277}), 20: (1, {'@': 277}), 33: (1, {'@': 277}), 42: (1, {'@': 277}), 43: (1, {'@': 277}), 44: (1, {'@': 277}), 45: (1, {'@': 277}), 30: (1, {'@': 277}), 22: (1, {'@': 277}), 11: (1, {'@': 277}), 46: (1, {'@': 277}), 47: (1, {'@': 277}), 48: (1, {'@': 277}), 49: (1, {'@': 277}), 50: (1, {'@': 277}), 10: (1, {'@': 277}), 51: (1, {'@': 277}), 17: (1, {'@': 277}), 26: (1, {'@': 277}), 53: (1, {'@': 277}), 57: (1, {'@': 277}), 23: (1, {'@': 277}), 54: (1, {'@': 277}), 55: (1, {'@': 277}), 56: (1, {'@': 277}), 19: (1, {'@': 277}), 97: (1, {'@': 277}), 76: (1, {'@': 277}), 109: (1, {'@': 277}), 93: (1, {'@': 277}), 108: (1, {'@': 277})}, 23: {35: (0, 234), 115: (0, 192), 25: (0, 409), 93: (1, {'@': 224}), 58: (1, {'@': 224}), 52: (1, {'@': 224})}, 24: {1: (1, {'@': 430}), 69: (1, {'@': 430}), 36: (1, {'@': 430}), 70: (1, {'@': 430}), 38: (1, {'@': 430}), 71: (1, {'@': 430}), 2: (1, {'@': 430}), 18: (1, {'@': 430}), 39: (1, {'@': 430}), 40: (1, {'@': 430}), 72: (1, {'@': 430}), 58: (1, {'@': 430}), 20: (1, {'@': 430}), 73: (1, {'@': 430}), 42: (1, {'@': 430}), 74: (1, {'@': 430}), 43: (1, {'@': 430}), 75: (1, {'@': 430}), 44: (1, {'@': 430}), 22: (1, {'@': 430}), 76: (1, {'@': 430}), 48: (1, {'@': 430}), 77: (1, {'@': 430}), 78: (1, {'@': 430}), 50: (1, {'@': 430}), 10: (1, {'@': 430}), 68: (1, {'@': 430}), 52: (1, {'@': 430}), 79: (1, {'@': 430}), 53: (1, {'@': 430}), 80: (1, {'@': 430}), 81: (1, {'@': 430}), 23: (1, {'@': 430}), 55: (1, {'@': 430}), 56: (1, {'@': 430}), 19: (1, {'@': 430}), 31: (1, {'@': 430}), 82: (1, {'@': 430}), 21: (1, {'@': 430}), 83: (1, {'@': 430}), 37: (1, {'@': 430}), 84: (1, {'@': 430}), 6: (1, {'@': 430}), 9: (1, {'@': 430}), 41: (1, {'@': 430}), 15: (1, {'@': 430}), 85: (1, {'@': 430}), 86: (1, {'@': 430}), 33: (1, {'@': 430}), 87: (1, {'@': 430}), 45: (1, {'@': 430}), 30: (1, {'@': 430}), 11: (1, {'@': 430}), 88: (1, {'@': 430}), 46: (1, {'@': 430}), 47: (1, {'@': 430}), 89: (1, {'@': 430}), 49: (1, {'@': 430}), 90: (1, {'@': 430}), 51: (1, {'@': 430}), 91: (1, {'@': 430}), 17: (1, {'@': 430}), 26: (1, {'@': 430}), 25: (1, {'@': 430}), 92: (1, {'@': 430}), 93: (1, {'@': 430}), 94: (1, {'@': 430}), 57: (1, {'@': 430}), 95: (1, {'@': 430}), 96: (1, {'@': 430}), 54: (1, {'@': 430}), 97: (1, {'@': 430}), 98: (1, {'@': 430}), 99: (1, {'@': 430}), 100: (1, {'@': 430}), 101: (1, {'@': 430}), 102: (1, {'@': 430}), 103: (1, {'@': 430}), 104: (1, {'@': 430}), 105: (1, {'@': 430}), 106: (1, {'@': 430}), 107: (1, {'@': 430}), 108: (1, {'@': 430}), 109: (1, {'@': 430})}, 25: {103: (0, 581), 117: (0, 206), 25: (1, {'@': 280}), 39: (1, {'@': 280}), 107: (1, {'@': 280}), 68: (1, {'@': 280}), 52: (1, {'@': 280}), 58: (1, {'@': 280}), 84: (1, {'@': 280}), 83: (1, {'@': 280}), 69: (1, {'@': 280}), 77: (1, {'@': 280}), 70: (1, {'@': 280}), 71: (1, {'@': 280}), 94: (1, {'@': 280}), 79: (1, {'@': 280}), 85: (1, {'@': 280}), 86: (1, {'@': 280}), 73: (1, {'@': 280}), 96: (1, {'@': 280}), 87: (1, {'@': 280}), 98: (1, {'@': 280}), 88: (1, {'@': 280}), 31: (1, {'@': 280}), 21: (1, {'@': 280}), 1: (1, {'@': 280}), 36: (1, {'@': 280}), 37: (1, {'@': 280}), 38: (1, {'@': 280}), 6: (1, {'@': 280}), 2: (1, {'@': 280}), 18: (1, {'@': 280}), 9: (1, {'@': 280}), 40: (1, {'@': 280}), 41: (1, {'@': 280}), 15: (1, {'@': 280}), 20: (1, {'@': 280}), 33: (1, {'@': 280}), 42: (1, {'@': 280}), 43: (1, {'@': 280}), 44: (1, {'@': 280}), 45: (1, {'@': 280}), 30: (1, {'@': 280}), 22: (1, {'@': 280}), 11: (1, {'@': 280}), 46: (1, {'@': 280}), 47: (1, {'@': 280}), 48: (1, {'@': 280}), 49: (1, {'@': 280}), 50: (1, {'@': 280}), 10: (1, {'@': 280}), 51: (1, {'@': 280}), 17: (1, {'@': 280}), 26: (1, {'@': 280}), 53: (1, {'@': 280}), 57: (1, {'@': 280}), 23: (1, {'@': 280}), 54: (1, {'@': 280}), 55: (1, {'@': 280}), 56: (1, {'@': 280}), 19: (1, {'@': 280}), 97: (1, {'@': 280}), 76: (1, {'@': 280}), 109: (1, {'@': 280}), 93: (1, {'@': 280}), 108: (1, {'@': 280})}, 26: {35: (0, 423), 25: (0, 409)}, 27: {58: (1, {'@': 208}), 52: (1, {'@': 208})}, 28: {31: (1, {'@': 315}), 21: (1, {'@': 315}), 1: (1, {'@': 315}), 6: (1, {'@': 315}), 2: (1, {'@': 315}), 18: (1, {'@': 315}), 9: (1, {'@': 315}), 15: (1, {'@': 315}), 20: (1, {'@': 315}), 33: (1, {'@': 315}), 30: (1, {'@': 315}), 22: (1, {'@': 315}), 11: (1, {'@': 315}), 10: (1, {'@': 315}), 17: (1, {'@': 315}), 26: (1, {'@': 315}), 25: (1, {'@': 315}), 23: (1, {'@': 315}), 19: (1, {'@': 315})}, 29: {93: (1, {'@': 405})}, 30: {58: (1, {'@': 207}), 52: (1, {'@': 207})}, 31: {118: (0, 138), 82: (1, {'@': 341}), 89: (1, {'@': 341}), 45: (1, {'@': 341}), 99: (1, {'@': 341}), 100: (1, {'@': 341}), 101: (1, {'@': 341}), 78: (1, {'@': 341}), 36: (1, {'@': 341}), 102: (1, {'@': 341}), 90: (1, {'@': 341}), 10: (1, {'@': 341}), 91: (1, {'@': 341}), 103: (1, {'@': 341}), 104: (1, {'@': 341}), 25: (1, {'@': 341}), 92: (1, {'@': 341}), 9: (1, {'@': 341}), 39: (1, {'@': 341}), 72: (1, {'@': 341}), 95: (1, {'@': 341}), 80: (1, {'@': 341}), 81: (1, {'@': 341}), 105: (1, {'@': 341}), 106: (1, {'@': 341}), 74: (1, {'@': 341}), 107: (1, {'@': 341}), 75: (1, {'@': 341}), 22: (1, {'@': 341}), 19: (1, {'@': 341}), 84: (1, {'@': 341}), 58: (1, {'@': 341}), 68: (1, {'@': 341}), 52: (1, {'@': 341}), 83: (1, {'@': 341}), 69: (1, {'@': 341}), 70: (1, {'@': 341}), 71: (1, {'@': 341}), 85: (1, {'@': 341}), 86: (1, {'@': 341}), 73: (1, {'@': 341}), 87: (1, {'@': 341}), 88: (1, {'@': 341}), 77: (1, {'@': 341}), 94: (1, {'@': 341}), 79: (1, {'@': 341}), 96: (1, {'@': 341}), 98: (1, {'@': 341}), 31: (1, {'@': 341}), 21: (1, {'@': 341}), 1: (1, {'@': 341}), 37: (1, {'@': 341}), 38: (1, {'@': 341}), 6: (1, {'@': 341}), 2: (1, {'@': 341}), 18: (1, {'@': 341}), 40: (1, {'@': 341}), 41: (1, {'@': 341}), 15: (1, {'@': 341}), 20: (1, {'@': 341}), 33: (1, {'@': 341}), 42: (1, {'@': 341}), 43: (1, {'@': 341}), 44: (1, {'@': 341}), 30: (1, {'@': 341}), 11: (1, {'@': 341}), 46: (1, {'@': 341}), 47: (1, {'@': 341}), 48: (1, {'@': 341}), 49: (1, {'@': 341}), 50: (1, {'@': 341}), 51: (1, {'@': 341}), 17: (1, {'@': 341}), 26: (1, {'@': 341}), 53: (1, {'@': 341}), 57: (1, {'@': 341}), 23: (1, {'@': 341}), 54: (1, {'@': 341}), 55: (1, {'@': 341}), 56: (1, {'@': 341}), 97: (1, {'@': 341}), 76: (1, {'@': 341}), 109: (1, {'@': 341}), 93: (1, {'@': 341})}, 32: {1: (1, {'@': 346}), 69: (1, {'@': 346}), 36: (1, {'@': 346}), 70: (1, {'@': 346}), 38: (1, {'@': 346}), 71: (1, {'@': 346}), 2: (1, {'@': 346}), 18: (1, {'@': 346}), 39: (1, {'@': 346}), 40: (1, {'@': 346}), 72: (1, {'@': 346}), 58: (1, {'@': 346}), 20: (1, {'@': 346}), 73: (1, {'@': 346}), 42: (1, {'@': 346}), 74: (1, {'@': 346}), 43: (1, {'@': 346}), 75: (1, {'@': 346}), 44: (1, {'@': 346}), 22: (1, {'@': 346}), 76: (1, {'@': 346}), 48: (1, {'@': 346}), 77: (1, {'@': 346}), 78: (1, {'@': 346}), 50: (1, {'@': 346}), 10: (1, {'@': 346}), 68: (1, {'@': 346}), 52: (1, {'@': 346}), 79: (1, {'@': 346}), 53: (1, {'@': 346}), 80: (1, {'@': 346}), 81: (1, {'@': 346}), 23: (1, {'@': 346}), 55: (1, {'@': 346}), 56: (1, {'@': 346}), 19: (1, {'@': 346}), 31: (1, {'@': 346}), 82: (1, {'@': 346}), 21: (1, {'@': 346}), 83: (1, {'@': 346}), 37: (1, {'@': 346}), 84: (1, {'@': 346}), 6: (1, {'@': 346}), 9: (1, {'@': 346}), 41: (1, {'@': 346}), 15: (1, {'@': 346}), 85: (1, {'@': 346}), 86: (1, {'@': 346}), 33: (1, {'@': 346}), 87: (1, {'@': 346}), 45: (1, {'@': 346}), 30: (1, {'@': 346}), 11: (1, {'@': 346}), 88: (1, {'@': 346}), 46: (1, {'@': 346}), 47: (1, {'@': 346}), 89: (1, {'@': 346}), 49: (1, {'@': 346}), 90: (1, {'@': 346}), 51: (1, {'@': 346}), 91: (1, {'@': 346}), 17: (1, {'@': 346}), 26: (1, {'@': 346}), 25: (1, {'@': 346}), 92: (1, {'@': 346}), 93: (1, {'@': 346}), 94: (1, {'@': 346}), 57: (1, {'@': 346}), 95: (1, {'@': 346}), 96: (1, {'@': 346}), 54: (1, {'@': 346}), 97: (1, {'@': 346}), 98: (1, {'@': 346}), 99: (1, {'@': 346}), 100: (1, {'@': 346}), 101: (1, {'@': 346}), 102: (1, {'@': 346}), 103: (1, {'@': 346}), 104: (1, {'@': 346}), 105: (1, {'@': 346}), 106: (1, {'@': 346}), 107: (1, {'@': 346}), 108: (1, {'@': 346}), 109: (1, {'@': 346})}, 33: {80: (1, {'@': 498}), 84: (1, {'@': 498})}, 34: {5: (0, 203), 6: (0, 32), 64: (0, 202), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 35: {119: (0, 300), 48: (0, 196), 54: (0, 43), 5: (0, 203), 6: (0, 32), 7: (0, 186), 120: (0, 231), 121: (0, 30), 53: (0, 243), 8: (0, 276), 42: (0, 209), 44: (0, 156), 10: (0, 284), 122: (0, 285), 41: (0, 318), 2: (0, 137), 12: (0, 397), 123: (0, 134), 16: (0, 244), 114: (0, 364), 15: (0, 414), 35: (0, 31), 9: (0, 112), 21: (0, 256), 52: (0, 465), 20: (0, 415), 124: (0, 332), 125: (0, 334), 126: (0, 296), 60: (0, 408), 127: (0, 97), 25: (0, 409), 61: (0, 64), 19: (0, 545), 38: (0, 75), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 40: (0, 69), 128: (0, 60), 129: (0, 438), 130: (0, 27), 1: (0, 24), 0: (0, 36), 63: (0, 25), 4: (0, 50), 45: (0, 0), 3: (0, 255), 131: (0, 425), 132: (0, 72), 43: (0, 340), 133: (0, 89), 134: (0, 76), 65: (0, 85), 135: (0, 331), 11: (0, 399), 14: (0, 79), 13: (0, 453), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 64: (0, 267), 23: (0, 70), 22: (0, 61), 136: (0, 317), 24: (0, 419), 56: (0, 456), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 137: (0, 48), 138: (0, 449)}, 36: {28: (0, 40), 18: (0, 558), 23: (0, 70), 1: (1, {'@': 349}), 69: (1, {'@': 349}), 36: (1, {'@': 349}), 70: (1, {'@': 349}), 38: (1, {'@': 349}), 71: (1, {'@': 349}), 2: (1, {'@': 349}), 39: (1, {'@': 349}), 40: (1, {'@': 349}), 72: (1, {'@': 349}), 58: (1, {'@': 349}), 20: (1, {'@': 349}), 73: (1, {'@': 349}), 42: (1, {'@': 349}), 74: (1, {'@': 349}), 43: (1, {'@': 349}), 75: (1, {'@': 349}), 44: (1, {'@': 349}), 22: (1, {'@': 349}), 76: (1, {'@': 349}), 48: (1, {'@': 349}), 77: (1, {'@': 349}), 78: (1, {'@': 349}), 50: (1, {'@': 349}), 10: (1, {'@': 349}), 68: (1, {'@': 349}), 52: (1, {'@': 349}), 79: (1, {'@': 349}), 53: (1, {'@': 349}), 80: (1, {'@': 349}), 81: (1, {'@': 349}), 55: (1, {'@': 349}), 56: (1, {'@': 349}), 19: (1, {'@': 349}), 31: (1, {'@': 349}), 82: (1, {'@': 349}), 21: (1, {'@': 349}), 83: (1, {'@': 349}), 37: (1, {'@': 349}), 84: (1, {'@': 349}), 6: (1, {'@': 349}), 9: (1, {'@': 349}), 41: (1, {'@': 349}), 15: (1, {'@': 349}), 85: (1, {'@': 349}), 86: (1, {'@': 349}), 33: (1, {'@': 349}), 87: (1, {'@': 349}), 45: (1, {'@': 349}), 30: (1, {'@': 349}), 11: (1, {'@': 349}), 88: (1, {'@': 349}), 46: (1, {'@': 349}), 47: (1, {'@': 349}), 89: (1, {'@': 349}), 49: (1, {'@': 349}), 90: (1, {'@': 349}), 51: (1, {'@': 349}), 91: (1, {'@': 349}), 17: (1, {'@': 349}), 26: (1, {'@': 349}), 25: (1, {'@': 349}), 92: (1, {'@': 349}), 93: (1, {'@': 349}), 94: (1, {'@': 349}), 57: (1, {'@': 349}), 95: (1, {'@': 349}), 96: (1, {'@': 349}), 54: (1, {'@': 349}), 97: (1, {'@': 349}), 98: (1, {'@': 349}), 99: (1, {'@': 349}), 100: (1, {'@': 349}), 101: (1, {'@': 349}), 102: (1, {'@': 349}), 103: (1, {'@': 349}), 104: (1, {'@': 349}), 105: (1, {'@': 349}), 106: (1, {'@': 349}), 107: (1, {'@': 349}), 108: (1, {'@': 349}), 109: (1, {'@': 349})}, 37: {93: (1, {'@': 507}), 84: (1, {'@': 507})}, 38: {25: (1, {'@': 270}), 68: (1, {'@': 270}), 52: (1, {'@': 270}), 58: (1, {'@': 270}), 84: (1, {'@': 270}), 83: (1, {'@': 270}), 69: (1, {'@': 270}), 77: (1, {'@': 270}), 70: (1, {'@': 270}), 71: (1, {'@': 270}), 94: (1, {'@': 270}), 79: (1, {'@': 270}), 85: (1, {'@': 270}), 86: (1, {'@': 270}), 73: (1, {'@': 270}), 96: (1, {'@': 270}), 87: (1, {'@': 270}), 98: (1, {'@': 270}), 88: (1, {'@': 270}), 31: (1, {'@': 270}), 21: (1, {'@': 270}), 1: (1, {'@': 270}), 36: (1, {'@': 270}), 37: (1, {'@': 270}), 38: (1, {'@': 270}), 6: (1, {'@': 270}), 2: (1, {'@': 270}), 18: (1, {'@': 270}), 9: (1, {'@': 270}), 39: (1, {'@': 270}), 40: (1, {'@': 270}), 41: (1, {'@': 270}), 15: (1, {'@': 270}), 20: (1, {'@': 270}), 33: (1, {'@': 270}), 42: (1, {'@': 270}), 43: (1, {'@': 270}), 44: (1, {'@': 270}), 45: (1, {'@': 270}), 30: (1, {'@': 270}), 22: (1, {'@': 270}), 11: (1, {'@': 270}), 46: (1, {'@': 270}), 47: (1, {'@': 270}), 48: (1, {'@': 270}), 49: (1, {'@': 270}), 50: (1, {'@': 270}), 10: (1, {'@': 270}), 51: (1, {'@': 270}), 17: (1, {'@': 270}), 26: (1, {'@': 270}), 53: (1, {'@': 270}), 57: (1, {'@': 270}), 23: (1, {'@': 270}), 54: (1, {'@': 270}), 55: (1, {'@': 270}), 56: (1, {'@': 270}), 19: (1, {'@': 270}), 97: (1, {'@': 270}), 76: (1, {'@': 270}), 109: (1, {'@': 270}), 93: (1, {'@': 270})}, 39: {58: (1, {'@': 379}), 52: (1, {'@': 379}), 68: (1, {'@': 379})}, 40: {1: (1, {'@': 492}), 69: (1, {'@': 492}), 36: (1, {'@': 492}), 70: (1, {'@': 492}), 38: (1, {'@': 492}), 71: (1, {'@': 492}), 2: (1, {'@': 492}), 18: (1, {'@': 492}), 39: (1, {'@': 492}), 40: (1, {'@': 492}), 72: (1, {'@': 492}), 58: (1, {'@': 492}), 20: (1, {'@': 492}), 73: (1, {'@': 492}), 42: (1, {'@': 492}), 74: (1, {'@': 492}), 43: (1, {'@': 492}), 75: (1, {'@': 492}), 44: (1, {'@': 492}), 22: (1, {'@': 492}), 76: (1, {'@': 492}), 48: (1, {'@': 492}), 77: (1, {'@': 492}), 78: (1, {'@': 492}), 50: (1, {'@': 492}), 10: (1, {'@': 492}), 68: (1, {'@': 492}), 52: (1, {'@': 492}), 79: (1, {'@': 492}), 53: (1, {'@': 492}), 80: (1, {'@': 492}), 81: (1, {'@': 492}), 23: (1, {'@': 492}), 55: (1, {'@': 492}), 56: (1, {'@': 492}), 19: (1, {'@': 492}), 31: (1, {'@': 492}), 82: (1, {'@': 492}), 21: (1, {'@': 492}), 83: (1, {'@': 492}), 37: (1, {'@': 492}), 84: (1, {'@': 492}), 6: (1, {'@': 492}), 9: (1, {'@': 492}), 41: (1, {'@': 492}), 15: (1, {'@': 492}), 85: (1, {'@': 492}), 86: (1, {'@': 492}), 33: (1, {'@': 492}), 87: (1, {'@': 492}), 45: (1, {'@': 492}), 30: (1, {'@': 492}), 11: (1, {'@': 492}), 88: (1, {'@': 492}), 46: (1, {'@': 492}), 47: (1, {'@': 492}), 89: (1, {'@': 492}), 49: (1, {'@': 492}), 90: (1, {'@': 492}), 51: (1, {'@': 492}), 91: (1, {'@': 492}), 17: (1, {'@': 492}), 26: (1, {'@': 492}), 25: (1, {'@': 492}), 92: (1, {'@': 492}), 93: (1, {'@': 492}), 94: (1, {'@': 492}), 57: (1, {'@': 492}), 95: (1, {'@': 492}), 96: (1, {'@': 492}), 54: (1, {'@': 492}), 97: (1, {'@': 492}), 98: (1, {'@': 492}), 99: (1, {'@': 492}), 100: (1, {'@': 492}), 101: (1, {'@': 492}), 102: (1, {'@': 492}), 103: (1, {'@': 492}), 104: (1, {'@': 492}), 105: (1, {'@': 492}), 106: (1, {'@': 492}), 107: (1, {'@': 492}), 108: (1, {'@': 492}), 109: (1, {'@': 492})}, 41: {97: (1, {'@': 368}), 84: (1, {'@': 368})}, 42: {97: (1, {'@': 366}), 84: (1, {'@': 366})}, 43: {35: (0, 504), 139: (0, 563), 90: (0, 417), 25: (0, 409), 140: (0, 142), 141: (0, 316)}, 44: {31: (1, {'@': 190}), 21: (1, {'@': 190}), 1: (1, {'@': 190}), 36: (1, {'@': 190}), 6: (1, {'@': 190}), 2: (1, {'@': 190}), 18: (1, {'@': 190}), 9: (1, {'@': 190}), 15: (1, {'@': 190}), 20: (1, {'@': 190}), 33: (1, {'@': 190}), 43: (1, {'@': 190}), 30: (1, {'@': 190}), 22: (1, {'@': 190}), 11: (1, {'@': 190}), 10: (1, {'@': 190}), 17: (1, {'@': 190}), 26: (1, {'@': 190}), 25: (1, {'@': 190}), 23: (1, {'@': 190}), 19: (1, {'@': 190})}, 45: {37: (1, {'@': 426}), 39: (1, {'@': 426}), 76: (1, {'@': 426}), 93: (1, {'@': 426}), 97: (1, {'@': 426})}, 46: {31: (1, {'@': 312}), 21: (1, {'@': 312}), 1: (1, {'@': 312}), 6: (1, {'@': 312}), 2: (1, {'@': 312}), 18: (1, {'@': 312}), 9: (1, {'@': 312}), 15: (1, {'@': 312}), 20: (1, {'@': 312}), 33: (1, {'@': 312}), 30: (1, {'@': 312}), 22: (1, {'@': 312}), 11: (1, {'@': 312}), 10: (1, {'@': 312}), 17: (1, {'@': 312}), 26: (1, {'@': 312}), 25: (1, {'@': 312}), 23: (1, {'@': 312}), 19: (1, {'@': 312})}, 47: {68: (1, {'@': 259}), 84: (1, {'@': 259})}, 48: {31: (1, {'@': 254}), 21: (1, {'@': 254}), 1: (1, {'@': 254}), 36: (1, {'@': 254}), 37: (1, {'@': 254}), 38: (1, {'@': 254}), 6: (1, {'@': 254}), 2: (1, {'@': 254}), 18: (1, {'@': 254}), 9: (1, {'@': 254}), 39: (1, {'@': 254}), 40: (1, {'@': 254}), 41: (1, {'@': 254}), 15: (1, {'@': 254}), 20: (1, {'@': 254}), 33: (1, {'@': 254}), 42: (1, {'@': 254}), 43: (1, {'@': 254}), 44: (1, {'@': 254}), 45: (1, {'@': 254}), 30: (1, {'@': 254}), 22: (1, {'@': 254}), 11: (1, {'@': 254}), 46: (1, {'@': 254}), 47: (1, {'@': 254}), 48: (1, {'@': 254}), 49: (1, {'@': 254}), 50: (1, {'@': 254}), 10: (1, {'@': 254}), 51: (1, {'@': 254}), 17: (1, {'@': 254}), 26: (1, {'@': 254}), 25: (1, {'@': 254}), 52: (1, {'@': 254}), 53: (1, {'@': 254}), 23: (1, {'@': 254}), 54: (1, {'@': 254}), 55: (1, {'@': 254}), 56: (1, {'@': 254}), 19: (1, {'@': 254}), 57: (1, {'@': 254})}, 49: {76: (0, 229)}, 50: {78: (0, 17), 142: (0, 67), 95: (0, 46), 72: (0, 131), 45: (0, 94), 143: (0, 312), 82: (0, 228), 1: (1, {'@': 298}), 69: (1, {'@': 298}), 36: (1, {'@': 298}), 70: (1, {'@': 298}), 38: (1, {'@': 298}), 71: (1, {'@': 298}), 2: (1, {'@': 298}), 18: (1, {'@': 298}), 39: (1, {'@': 298}), 40: (1, {'@': 298}), 58: (1, {'@': 298}), 20: (1, {'@': 298}), 73: (1, {'@': 298}), 42: (1, {'@': 298}), 74: (1, {'@': 298}), 43: (1, {'@': 298}), 75: (1, {'@': 298}), 44: (1, {'@': 298}), 22: (1, {'@': 298}), 76: (1, {'@': 298}), 48: (1, {'@': 298}), 77: (1, {'@': 298}), 50: (1, {'@': 298}), 10: (1, {'@': 298}), 68: (1, {'@': 298}), 52: (1, {'@': 298}), 79: (1, {'@': 298}), 53: (1, {'@': 298}), 80: (1, {'@': 298}), 23: (1, {'@': 298}), 55: (1, {'@': 298}), 56: (1, {'@': 298}), 19: (1, {'@': 298}), 31: (1, {'@': 298}), 21: (1, {'@': 298}), 83: (1, {'@': 298}), 37: (1, {'@': 298}), 84: (1, {'@': 298}), 6: (1, {'@': 298}), 9: (1, {'@': 298}), 41: (1, {'@': 298}), 15: (1, {'@': 298}), 85: (1, {'@': 298}), 86: (1, {'@': 298}), 33: (1, {'@': 298}), 87: (1, {'@': 298}), 30: (1, {'@': 298}), 11: (1, {'@': 298}), 88: (1, {'@': 298}), 46: (1, {'@': 298}), 47: (1, {'@': 298}), 89: (1, {'@': 298}), 49: (1, {'@': 298}), 51: (1, {'@': 298}), 91: (1, {'@': 298}), 17: (1, {'@': 298}), 26: (1, {'@': 298}), 25: (1, {'@': 298}), 92: (1, {'@': 298}), 93: (1, {'@': 298}), 94: (1, {'@': 298}), 57: (1, {'@': 298}), 96: (1, {'@': 298}), 54: (1, {'@': 298}), 97: (1, {'@': 298}), 98: (1, {'@': 298}), 99: (1, {'@': 298}), 100: (1, {'@': 298}), 101: (1, {'@': 298}), 102: (1, {'@': 298}), 103: (1, {'@': 298}), 104: (1, {'@': 298}), 105: (1, {'@': 298}), 106: (1, {'@': 298}), 107: (1, {'@': 298}), 108: (1, {'@': 298}), 109: (1, {'@': 298})}, 51: {0: (0, 36), 1: (0, 24), 2: (0, 137), 29: (0, 385), 3: (0, 255), 4: (0, 50), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 15: (0, 414), 16: (0, 244), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 23: (0, 70), 22: (0, 61), 24: (0, 419), 25: (0, 409), 27: (0, 66), 26: (0, 3), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 34: (0, 521), 35: (0, 105)}, 52: {84: (0, 491), 58: (1, {'@': 381}), 52: (1, {'@': 381}), 68: (1, {'@': 381})}, 53: {1: (1, {'@': 339}), 69: (1, {'@': 339}), 36: (1, {'@': 339}), 70: (1, {'@': 339}), 38: (1, {'@': 339}), 71: (1, {'@': 339}), 2: (1, {'@': 339}), 18: (1, {'@': 339}), 39: (1, {'@': 339}), 40: (1, {'@': 339}), 72: (1, {'@': 339}), 58: (1, {'@': 339}), 20: (1, {'@': 339}), 73: (1, {'@': 339}), 42: (1, {'@': 339}), 74: (1, {'@': 339}), 43: (1, {'@': 339}), 75: (1, {'@': 339}), 44: (1, {'@': 339}), 22: (1, {'@': 339}), 76: (1, {'@': 339}), 48: (1, {'@': 339}), 77: (1, {'@': 339}), 78: (1, {'@': 339}), 50: (1, {'@': 339}), 10: (1, {'@': 339}), 68: (1, {'@': 339}), 52: (1, {'@': 339}), 79: (1, {'@': 339}), 53: (1, {'@': 339}), 80: (1, {'@': 339}), 81: (1, {'@': 339}), 23: (1, {'@': 339}), 55: (1, {'@': 339}), 56: (1, {'@': 339}), 19: (1, {'@': 339}), 31: (1, {'@': 339}), 82: (1, {'@': 339}), 21: (1, {'@': 339}), 83: (1, {'@': 339}), 37: (1, {'@': 339}), 84: (1, {'@': 339}), 6: (1, {'@': 339}), 9: (1, {'@': 339}), 41: (1, {'@': 339}), 15: (1, {'@': 339}), 85: (1, {'@': 339}), 86: (1, {'@': 339}), 33: (1, {'@': 339}), 87: (1, {'@': 339}), 45: (1, {'@': 339}), 30: (1, {'@': 339}), 11: (1, {'@': 339}), 88: (1, {'@': 339}), 46: (1, {'@': 339}), 47: (1, {'@': 339}), 89: (1, {'@': 339}), 49: (1, {'@': 339}), 90: (1, {'@': 339}), 51: (1, {'@': 339}), 91: (1, {'@': 339}), 17: (1, {'@': 339}), 26: (1, {'@': 339}), 25: (1, {'@': 339}), 92: (1, {'@': 339}), 93: (1, {'@': 339}), 94: (1, {'@': 339}), 57: (1, {'@': 339}), 95: (1, {'@': 339}), 96: (1, {'@': 339}), 54: (1, {'@': 339}), 97: (1, {'@': 339}), 98: (1, {'@': 339}), 99: (1, {'@': 339}), 100: (1, {'@': 339}), 101: (1, {'@': 339}), 102: (1, {'@': 339}), 103: (1, {'@': 339}), 104: (1, {'@': 339}), 105: (1, {'@': 339}), 106: (1, {'@': 339}), 107: (1, {'@': 339}), 108: (1, {'@': 339}), 109: (1, {'@': 339})}, 54: {58: (1, {'@': 465}), 52: (1, {'@': 465}), 84: (1, {'@': 465})}, 55: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 114: (0, 364), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 119: (0, 378), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 45: (0, 0), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 64: (0, 267), 79: (1, {'@': 198}), 83: (1, {'@': 198}), 69: (1, {'@': 198}), 85: (1, {'@': 198}), 77: (1, {'@': 198}), 58: (1, {'@': 198}), 86: (1, {'@': 198}), 70: (1, {'@': 198}), 52: (1, {'@': 198}), 71: (1, {'@': 198}), 73: (1, {'@': 198}), 96: (1, {'@': 198}), 87: (1, {'@': 198}), 98: (1, {'@': 198}), 88: (1, {'@': 198}), 94: (1, {'@': 198})}, 56: {25: (0, 409), 35: (0, 546)}, 57: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 114: (0, 364), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 119: (0, 352), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 45: (0, 0), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 64: (0, 267)}, 58: {0: (0, 36), 1: (0, 24), 2: (0, 137), 4: (0, 50), 6: (0, 32), 7: (0, 186), 9: (0, 112), 10: (0, 284), 11: (0, 399), 5: (0, 509), 12: (0, 397), 13: (0, 453), 14: (0, 79), 15: (0, 414), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 27: (0, 66), 26: (0, 3), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 35: (0, 105)}, 59: {93: (0, 322)}, 60: {58: (1, {'@': 169}), 52: (1, {'@': 169})}, 61: {31: (1, {'@': 302}), 21: (1, {'@': 302}), 1: (1, {'@': 302}), 6: (1, {'@': 302}), 2: (1, {'@': 302}), 18: (1, {'@': 302}), 9: (1, {'@': 302}), 15: (1, {'@': 302}), 20: (1, {'@': 302}), 33: (1, {'@': 302}), 30: (1, {'@': 302}), 22: (1, {'@': 302}), 11: (1, {'@': 302}), 10: (1, {'@': 302}), 17: (1, {'@': 302}), 26: (1, {'@': 302}), 25: (1, {'@': 302}), 23: (1, {'@': 302}), 19: (1, {'@': 302})}, 62: {119: (0, 300), 122: (0, 525), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 114: (0, 364), 16: (0, 244), 35: (0, 31), 9: (0, 112), 21: (0, 256), 20: (0, 415), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 4: (0, 50), 45: (0, 0), 3: (0, 255), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 64: (0, 267)}, 63: {97: (1, {'@': 362}), 84: (1, {'@': 362})}, 64: {144: (0, 22), 107: (0, 187), 25: (1, {'@': 278}), 39: (1, {'@': 278}), 58: (1, {'@': 278}), 68: (1, {'@': 278}), 52: (1, {'@': 278}), 84: (1, {'@': 278}), 83: (1, {'@': 278}), 69: (1, {'@': 278}), 77: (1, {'@': 278}), 70: (1, {'@': 278}), 71: (1, {'@': 278}), 94: (1, {'@': 278}), 79: (1, {'@': 278}), 85: (1, {'@': 278}), 86: (1, {'@': 278}), 73: (1, {'@': 278}), 96: (1, {'@': 278}), 87: (1, {'@': 278}), 98: (1, {'@': 278}), 88: (1, {'@': 278}), 31: (1, {'@': 278}), 21: (1, {'@': 278}), 1: (1, {'@': 278}), 36: (1, {'@': 278}), 37: (1, {'@': 278}), 38: (1, {'@': 278}), 6: (1, {'@': 278}), 2: (1, {'@': 278}), 18: (1, {'@': 278}), 9: (1, {'@': 278}), 40: (1, {'@': 278}), 41: (1, {'@': 278}), 15: (1, {'@': 278}), 20: (1, {'@': 278}), 33: (1, {'@': 278}), 42: (1, {'@': 278}), 43: (1, {'@': 278}), 44: (1, {'@': 278}), 45: (1, {'@': 278}), 30: (1, {'@': 278}), 22: (1, {'@': 278}), 11: (1, {'@': 278}), 46: (1, {'@': 278}), 47: (1, {'@': 278}), 48: (1, {'@': 278}), 49: (1, {'@': 278}), 50: (1, {'@': 278}), 10: (1, {'@': 278}), 51: (1, {'@': 278}), 17: (1, {'@': 278}), 26: (1, {'@': 278}), 53: (1, {'@': 278}), 57: (1, {'@': 278}), 23: (1, {'@': 278}), 54: (1, {'@': 278}), 55: (1, {'@': 278}), 56: (1, {'@': 278}), 19: (1, {'@': 278}), 97: (1, {'@': 278}), 76: (1, {'@': 278}), 109: (1, {'@': 278}), 93: (1, {'@': 278}), 108: (1, {'@': 278})}, 65: {97: (1, {'@': 493}), 84: (1, {'@': 493})}, 66: {1: (1, {'@': 343}), 69: (1, {'@': 343}), 36: (1, {'@': 343}), 70: (1, {'@': 343}), 38: (1, {'@': 343}), 71: (1, {'@': 343}), 2: (1, {'@': 343}), 18: (1, {'@': 343}), 39: (1, {'@': 343}), 40: (1, {'@': 343}), 72: (1, {'@': 343}), 58: (1, {'@': 343}), 20: (1, {'@': 343}), 73: (1, {'@': 343}), 42: (1, {'@': 343}), 74: (1, {'@': 343}), 43: (1, {'@': 343}), 75: (1, {'@': 343}), 44: (1, {'@': 343}), 22: (1, {'@': 343}), 76: (1, {'@': 343}), 48: (1, {'@': 343}), 77: (1, {'@': 343}), 78: (1, {'@': 343}), 50: (1, {'@': 343}), 10: (1, {'@': 343}), 68: (1, {'@': 343}), 52: (1, {'@': 343}), 79: (1, {'@': 343}), 53: (1, {'@': 343}), 80: (1, {'@': 343}), 81: (1, {'@': 343}), 23: (1, {'@': 343}), 55: (1, {'@': 343}), 56: (1, {'@': 343}), 19: (1, {'@': 343}), 31: (1, {'@': 343}), 82: (1, {'@': 343}), 21: (1, {'@': 343}), 83: (1, {'@': 343}), 37: (1, {'@': 343}), 84: (1, {'@': 343}), 6: (1, {'@': 343}), 9: (1, {'@': 343}), 41: (1, {'@': 343}), 15: (1, {'@': 343}), 85: (1, {'@': 343}), 86: (1, {'@': 343}), 33: (1, {'@': 343}), 87: (1, {'@': 343}), 45: (1, {'@': 343}), 30: (1, {'@': 343}), 11: (1, {'@': 343}), 88: (1, {'@': 343}), 46: (1, {'@': 343}), 47: (1, {'@': 343}), 89: (1, {'@': 343}), 49: (1, {'@': 343}), 90: (1, {'@': 343}), 51: (1, {'@': 343}), 91: (1, {'@': 343}), 17: (1, {'@': 343}), 26: (1, {'@': 343}), 25: (1, {'@': 343}), 92: (1, {'@': 343}), 93: (1, {'@': 343}), 94: (1, {'@': 343}), 57: (1, {'@': 343}), 95: (1, {'@': 343}), 96: (1, {'@': 343}), 54: (1, {'@': 343}), 97: (1, {'@': 343}), 98: (1, {'@': 343}), 99: (1, {'@': 343}), 100: (1, {'@': 343}), 101: (1, {'@': 343}), 102: (1, {'@': 343}), 103: (1, {'@': 343}), 104: (1, {'@': 343}), 105: (1, {'@': 343}), 106: (1, {'@': 343}), 107: (1, {'@': 343}), 108: (1, {'@': 343}), 109: (1, {'@': 343})}, 67: {95: (0, 46), 78: (0, 17), 72: (0, 131), 143: (0, 432), 45: (0, 94), 82: (0, 228), 1: (1, {'@': 297}), 69: (1, {'@': 297}), 36: (1, {'@': 297}), 70: (1, {'@': 297}), 38: (1, {'@': 297}), 71: (1, {'@': 297}), 2: (1, {'@': 297}), 18: (1, {'@': 297}), 39: (1, {'@': 297}), 40: (1, {'@': 297}), 58: (1, {'@': 297}), 20: (1, {'@': 297}), 73: (1, {'@': 297}), 42: (1, {'@': 297}), 74: (1, {'@': 297}), 43: (1, {'@': 297}), 75: (1, {'@': 297}), 44: (1, {'@': 297}), 22: (1, {'@': 297}), 76: (1, {'@': 297}), 48: (1, {'@': 297}), 77: (1, {'@': 297}), 50: (1, {'@': 297}), 10: (1, {'@': 297}), 68: (1, {'@': 297}), 52: (1, {'@': 297}), 79: (1, {'@': 297}), 53: (1, {'@': 297}), 80: (1, {'@': 297}), 23: (1, {'@': 297}), 55: (1, {'@': 297}), 56: (1, {'@': 297}), 19: (1, {'@': 297}), 31: (1, {'@': 297}), 21: (1, {'@': 297}), 83: (1, {'@': 297}), 37: (1, {'@': 297}), 84: (1, {'@': 297}), 6: (1, {'@': 297}), 9: (1, {'@': 297}), 41: (1, {'@': 297}), 15: (1, {'@': 297}), 85: (1, {'@': 297}), 86: (1, {'@': 297}), 33: (1, {'@': 297}), 87: (1, {'@': 297}), 30: (1, {'@': 297}), 11: (1, {'@': 297}), 88: (1, {'@': 297}), 46: (1, {'@': 297}), 47: (1, {'@': 297}), 89: (1, {'@': 297}), 49: (1, {'@': 297}), 51: (1, {'@': 297}), 91: (1, {'@': 297}), 17: (1, {'@': 297}), 26: (1, {'@': 297}), 25: (1, {'@': 297}), 92: (1, {'@': 297}), 93: (1, {'@': 297}), 94: (1, {'@': 297}), 57: (1, {'@': 297}), 96: (1, {'@': 297}), 54: (1, {'@': 297}), 97: (1, {'@': 297}), 98: (1, {'@': 297}), 99: (1, {'@': 297}), 100: (1, {'@': 297}), 101: (1, {'@': 297}), 102: (1, {'@': 297}), 103: (1, {'@': 297}), 104: (1, {'@': 297}), 105: (1, {'@': 297}), 106: (1, {'@': 297}), 107: (1, {'@': 297}), 108: (1, {'@': 297}), 109: (1, {'@': 297})}, 68: {68: (1, {'@': 138})}, 69: {58: (1, {'@': 199}), 52: (1, {'@': 199})}, 70: {1: (1, {'@': 434}), 69: (1, {'@': 434}), 36: (1, {'@': 434}), 70: (1, {'@': 434}), 38: (1, {'@': 434}), 71: (1, {'@': 434}), 2: (1, {'@': 434}), 18: (1, {'@': 434}), 39: (1, {'@': 434}), 40: (1, {'@': 434}), 72: (1, {'@': 434}), 58: (1, {'@': 434}), 20: (1, {'@': 434}), 73: (1, {'@': 434}), 42: (1, {'@': 434}), 74: (1, {'@': 434}), 43: (1, {'@': 434}), 75: (1, {'@': 434}), 44: (1, {'@': 434}), 22: (1, {'@': 434}), 76: (1, {'@': 434}), 48: (1, {'@': 434}), 77: (1, {'@': 434}), 78: (1, {'@': 434}), 50: (1, {'@': 434}), 10: (1, {'@': 434}), 68: (1, {'@': 434}), 52: (1, {'@': 434}), 79: (1, {'@': 434}), 53: (1, {'@': 434}), 80: (1, {'@': 434}), 81: (1, {'@': 434}), 23: (1, {'@': 434}), 55: (1, {'@': 434}), 56: (1, {'@': 434}), 19: (1, {'@': 434}), 31: (1, {'@': 434}), 82: (1, {'@': 434}), 21: (1, {'@': 434}), 83: (1, {'@': 434}), 37: (1, {'@': 434}), 84: (1, {'@': 434}), 6: (1, {'@': 434}), 9: (1, {'@': 434}), 41: (1, {'@': 434}), 15: (1, {'@': 434}), 85: (1, {'@': 434}), 86: (1, {'@': 434}), 33: (1, {'@': 434}), 87: (1, {'@': 434}), 45: (1, {'@': 434}), 30: (1, {'@': 434}), 11: (1, {'@': 434}), 88: (1, {'@': 434}), 46: (1, {'@': 434}), 47: (1, {'@': 434}), 89: (1, {'@': 434}), 49: (1, {'@': 434}), 90: (1, {'@': 434}), 51: (1, {'@': 434}), 91: (1, {'@': 434}), 17: (1, {'@': 434}), 26: (1, {'@': 434}), 25: (1, {'@': 434}), 92: (1, {'@': 434}), 93: (1, {'@': 434}), 94: (1, {'@': 434}), 57: (1, {'@': 434}), 95: (1, {'@': 434}), 96: (1, {'@': 434}), 54: (1, {'@': 434}), 97: (1, {'@': 434}), 98: (1, {'@': 434}), 99: (1, {'@': 434}), 100: (1, {'@': 434}), 101: (1, {'@': 434}), 102: (1, {'@': 434}), 103: (1, {'@': 434}), 104: (1, {'@': 434}), 105: (1, {'@': 434}), 106: (1, {'@': 434}), 107: (1, {'@': 434}), 108: (1, {'@': 434}), 109: (1, {'@': 434})}, 71: {93: (1, {'@': 406})}, 72: {58: (1, {'@': 175}), 52: (1, {'@': 175})}, 73: {93: (1, {'@': 114})}, 74: {1: (1, {'@': 336}), 69: (1, {'@': 336}), 36: (1, {'@': 336}), 70: (1, {'@': 336}), 38: (1, {'@': 336}), 71: (1, {'@': 336}), 2: (1, {'@': 336}), 18: (1, {'@': 336}), 39: (1, {'@': 336}), 40: (1, {'@': 336}), 72: (1, {'@': 336}), 58: (1, {'@': 336}), 20: (1, {'@': 336}), 73: (1, {'@': 336}), 42: (1, {'@': 336}), 74: (1, {'@': 336}), 43: (1, {'@': 336}), 75: (1, {'@': 336}), 44: (1, {'@': 336}), 22: (1, {'@': 336}), 76: (1, {'@': 336}), 48: (1, {'@': 336}), 77: (1, {'@': 336}), 78: (1, {'@': 336}), 50: (1, {'@': 336}), 10: (1, {'@': 336}), 68: (1, {'@': 336}), 52: (1, {'@': 336}), 79: (1, {'@': 336}), 53: (1, {'@': 336}), 80: (1, {'@': 336}), 81: (1, {'@': 336}), 23: (1, {'@': 336}), 55: (1, {'@': 336}), 56: (1, {'@': 336}), 19: (1, {'@': 336}), 31: (1, {'@': 336}), 82: (1, {'@': 336}), 21: (1, {'@': 336}), 83: (1, {'@': 336}), 37: (1, {'@': 336}), 84: (1, {'@': 336}), 6: (1, {'@': 336}), 9: (1, {'@': 336}), 41: (1, {'@': 336}), 15: (1, {'@': 336}), 85: (1, {'@': 336}), 86: (1, {'@': 336}), 33: (1, {'@': 336}), 87: (1, {'@': 336}), 45: (1, {'@': 336}), 30: (1, {'@': 336}), 11: (1, {'@': 336}), 88: (1, {'@': 336}), 46: (1, {'@': 336}), 47: (1, {'@': 336}), 89: (1, {'@': 336}), 49: (1, {'@': 336}), 90: (1, {'@': 336}), 51: (1, {'@': 336}), 91: (1, {'@': 336}), 17: (1, {'@': 336}), 26: (1, {'@': 336}), 25: (1, {'@': 336}), 92: (1, {'@': 336}), 93: (1, {'@': 336}), 94: (1, {'@': 336}), 57: (1, {'@': 336}), 95: (1, {'@': 336}), 96: (1, {'@': 336}), 54: (1, {'@': 336}), 97: (1, {'@': 336}), 98: (1, {'@': 336}), 99: (1, {'@': 336}), 100: (1, {'@': 336}), 101: (1, {'@': 336}), 102: (1, {'@': 336}), 103: (1, {'@': 336}), 104: (1, {'@': 336}), 105: (1, {'@': 336}), 106: (1, {'@': 336}), 107: (1, {'@': 336}), 108: (1, {'@': 336}), 109: (1, {'@': 336})}, 75: {25: (0, 409), 35: (0, 579)}, 76: {58: (1, {'@': 173}), 52: (1, {'@': 173})}, 77: {31: (1, {'@': 243}), 21: (1, {'@': 243}), 1: (1, {'@': 243}), 36: (1, {'@': 243}), 37: (1, {'@': 243}), 38: (1, {'@': 243}), 6: (1, {'@': 243}), 2: (1, {'@': 243}), 18: (1, {'@': 243}), 9: (1, {'@': 243}), 39: (1, {'@': 243}), 40: (1, {'@': 243}), 41: (1, {'@': 243}), 15: (1, {'@': 243}), 20: (1, {'@': 243}), 33: (1, {'@': 243}), 42: (1, {'@': 243}), 43: (1, {'@': 243}), 44: (1, {'@': 243}), 45: (1, {'@': 243}), 30: (1, {'@': 243}), 22: (1, {'@': 243}), 11: (1, {'@': 243}), 46: (1, {'@': 243}), 47: (1, {'@': 243}), 48: (1, {'@': 243}), 49: (1, {'@': 243}), 50: (1, {'@': 243}), 10: (1, {'@': 243}), 51: (1, {'@': 243}), 17: (1, {'@': 243}), 26: (1, {'@': 243}), 25: (1, {'@': 243}), 52: (1, {'@': 243}), 53: (1, {'@': 243}), 23: (1, {'@': 243}), 54: (1, {'@': 243}), 55: (1, {'@': 243}), 56: (1, {'@': 243}), 19: (1, {'@': 243}), 57: (1, {'@': 243})}, 78: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 64: (0, 20), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 79: {0: (0, 36), 1: (0, 24), 4: (0, 279), 2: (0, 137), 6: (0, 32), 7: (0, 186), 9: (0, 112), 10: (0, 284), 11: (0, 399), 13: (0, 453), 14: (0, 79), 15: (0, 414), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 23: (0, 70), 22: (0, 61), 24: (0, 419), 25: (0, 409), 27: (0, 66), 26: (0, 3), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 35: (0, 105)}, 80: {68: (0, 106), 145: (0, 148), 97: (1, {'@': 361}), 84: (1, {'@': 361})}, 81: {36: (1, {'@': 485}), 103: (1, {'@': 485}), 38: (1, {'@': 485}), 70: (1, {'@': 485}), 71: (1, {'@': 485}), 2: (1, {'@': 485}), 18: (1, {'@': 485}), 39: (1, {'@': 485}), 20: (1, {'@': 485}), 74: (1, {'@': 485}), 75: (1, {'@': 485}), 22: (1, {'@': 485}), 76: (1, {'@': 485}), 50: (1, {'@': 485}), 52: (1, {'@': 485}), 23: (1, {'@': 485}), 19: (1, {'@': 485}), 21: (1, {'@': 485}), 102: (1, {'@': 485}), 84: (1, {'@': 485}), 15: (1, {'@': 485}), 85: (1, {'@': 485}), 108: (1, {'@': 485}), 46: (1, {'@': 485}), 89: (1, {'@': 485}), 109: (1, {'@': 485}), 26: (1, {'@': 485}), 25: (1, {'@': 485}), 93: (1, {'@': 485}), 94: (1, {'@': 485}), 57: (1, {'@': 485}), 96: (1, {'@': 485}), 54: (1, {'@': 485}), 98: (1, {'@': 485}), 1: (1, {'@': 485}), 101: (1, {'@': 485}), 69: (1, {'@': 485}), 40: (1, {'@': 485}), 58: (1, {'@': 485}), 106: (1, {'@': 485}), 42: (1, {'@': 485}), 43: (1, {'@': 485}), 44: (1, {'@': 485}), 107: (1, {'@': 485}), 73: (1, {'@': 485}), 48: (1, {'@': 485}), 77: (1, {'@': 485}), 10: (1, {'@': 485}), 68: (1, {'@': 485}), 79: (1, {'@': 485}), 53: (1, {'@': 485}), 80: (1, {'@': 485}), 105: (1, {'@': 485}), 55: (1, {'@': 485}), 56: (1, {'@': 485}), 31: (1, {'@': 485}), 99: (1, {'@': 485}), 100: (1, {'@': 485}), 83: (1, {'@': 485}), 37: (1, {'@': 485}), 6: (1, {'@': 485}), 9: (1, {'@': 485}), 41: (1, {'@': 485}), 86: (1, {'@': 485}), 33: (1, {'@': 485}), 87: (1, {'@': 485}), 45: (1, {'@': 485}), 30: (1, {'@': 485}), 11: (1, {'@': 485}), 88: (1, {'@': 485}), 47: (1, {'@': 485}), 49: (1, {'@': 485}), 51: (1, {'@': 485}), 91: (1, {'@': 485}), 17: (1, {'@': 485}), 104: (1, {'@': 485}), 92: (1, {'@': 485}), 97: (1, {'@': 485})}, 82: {119: (0, 300), 48: (0, 196), 54: (0, 43), 5: (0, 203), 6: (0, 32), 7: (0, 186), 120: (0, 231), 121: (0, 30), 53: (0, 243), 8: (0, 276), 42: (0, 209), 44: (0, 156), 10: (0, 284), 122: (0, 285), 41: (0, 318), 2: (0, 137), 12: (0, 397), 123: (0, 134), 16: (0, 244), 114: (0, 364), 137: (0, 213), 15: (0, 414), 35: (0, 31), 9: (0, 112), 21: (0, 256), 52: (0, 465), 20: (0, 415), 124: (0, 332), 125: (0, 334), 126: (0, 296), 60: (0, 408), 127: (0, 97), 25: (0, 409), 61: (0, 64), 19: (0, 545), 38: (0, 75), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 40: (0, 69), 128: (0, 60), 129: (0, 438), 130: (0, 27), 1: (0, 24), 0: (0, 36), 63: (0, 25), 4: (0, 50), 45: (0, 0), 3: (0, 255), 131: (0, 425), 132: (0, 72), 43: (0, 340), 133: (0, 89), 134: (0, 76), 65: (0, 85), 135: (0, 331), 11: (0, 399), 14: (0, 79), 13: (0, 453), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 136: (0, 317), 24: (0, 419), 56: (0, 456), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 64: (0, 267), 138: (0, 449)}, 83: {31: (1, {'@': 186}), 21: (1, {'@': 186}), 1: (1, {'@': 186}), 36: (1, {'@': 186}), 6: (1, {'@': 186}), 2: (1, {'@': 186}), 18: (1, {'@': 186}), 9: (1, {'@': 186}), 15: (1, {'@': 186}), 20: (1, {'@': 186}), 33: (1, {'@': 186}), 43: (1, {'@': 186}), 30: (1, {'@': 186}), 22: (1, {'@': 186}), 11: (1, {'@': 186}), 10: (1, {'@': 186}), 17: (1, {'@': 186}), 26: (1, {'@': 186}), 25: (1, {'@': 186}), 23: (1, {'@': 186}), 19: (1, {'@': 186})}, 84: {93: (1, {'@': 420}), 84: (1, {'@': 420})}, 85: {25: (1, {'@': 272}), 68: (1, {'@': 272}), 52: (1, {'@': 272}), 58: (1, {'@': 272}), 84: (1, {'@': 272}), 83: (1, {'@': 272}), 69: (1, {'@': 272}), 77: (1, {'@': 272}), 70: (1, {'@': 272}), 71: (1, {'@': 272}), 94: (1, {'@': 272}), 79: (1, {'@': 272}), 85: (1, {'@': 272}), 86: (1, {'@': 272}), 73: (1, {'@': 272}), 96: (1, {'@': 272}), 87: (1, {'@': 272}), 98: (1, {'@': 272}), 88: (1, {'@': 272}), 31: (1, {'@': 272}), 21: (1, {'@': 272}), 1: (1, {'@': 272}), 36: (1, {'@': 272}), 37: (1, {'@': 272}), 38: (1, {'@': 272}), 6: (1, {'@': 272}), 2: (1, {'@': 272}), 18: (1, {'@': 272}), 9: (1, {'@': 272}), 39: (1, {'@': 272}), 40: (1, {'@': 272}), 41: (1, {'@': 272}), 15: (1, {'@': 272}), 20: (1, {'@': 272}), 33: (1, {'@': 272}), 42: (1, {'@': 272}), 43: (1, {'@': 272}), 44: (1, {'@': 272}), 45: (1, {'@': 272}), 30: (1, {'@': 272}), 22: (1, {'@': 272}), 11: (1, {'@': 272}), 46: (1, {'@': 272}), 47: (1, {'@': 272}), 48: (1, {'@': 272}), 49: (1, {'@': 272}), 50: (1, {'@': 272}), 10: (1, {'@': 272}), 51: (1, {'@': 272}), 17: (1, {'@': 272}), 26: (1, {'@': 272}), 53: (1, {'@': 272}), 57: (1, {'@': 272}), 23: (1, {'@': 272}), 54: (1, {'@': 272}), 55: (1, {'@': 272}), 56: (1, {'@': 272}), 19: (1, {'@': 272}), 97: (1, {'@': 272}), 76: (1, {'@': 272}), 109: (1, {'@': 272}), 93: (1, {'@': 272})}, 86: {80: (1, {'@': 497}), 84: (1, {'@': 497})}, 87: {92: (0, 108), 75: (0, 174), 146: (0, 58), 1: (1, {'@': 293}), 69: (1, {'@': 293}), 36: (1, {'@': 293}), 70: (1, {'@': 293}), 38: (1, {'@': 293}), 71: (1, {'@': 293}), 2: (1, {'@': 293}), 18: (1, {'@': 293}), 39: (1, {'@': 293}), 40: (1, {'@': 293}), 58: (1, {'@': 293}), 20: (1, {'@': 293}), 73: (1, {'@': 293}), 42: (1, {'@': 293}), 74: (1, {'@': 293}), 43: (1, {'@': 293}), 44: (1, {'@': 293}), 22: (1, {'@': 293}), 76: (1, {'@': 293}), 48: (1, {'@': 293}), 77: (1, {'@': 293}), 50: (1, {'@': 293}), 10: (1, {'@': 293}), 68: (1, {'@': 293}), 52: (1, {'@': 293}), 79: (1, {'@': 293}), 53: (1, {'@': 293}), 80: (1, {'@': 293}), 23: (1, {'@': 293}), 55: (1, {'@': 293}), 56: (1, {'@': 293}), 19: (1, {'@': 293}), 31: (1, {'@': 293}), 21: (1, {'@': 293}), 83: (1, {'@': 293}), 37: (1, {'@': 293}), 84: (1, {'@': 293}), 6: (1, {'@': 293}), 9: (1, {'@': 293}), 41: (1, {'@': 293}), 15: (1, {'@': 293}), 85: (1, {'@': 293}), 86: (1, {'@': 293}), 33: (1, {'@': 293}), 87: (1, {'@': 293}), 45: (1, {'@': 293}), 30: (1, {'@': 293}), 11: (1, {'@': 293}), 88: (1, {'@': 293}), 46: (1, {'@': 293}), 47: (1, {'@': 293}), 89: (1, {'@': 293}), 49: (1, {'@': 293}), 51: (1, {'@': 293}), 91: (1, {'@': 293}), 17: (1, {'@': 293}), 26: (1, {'@': 293}), 25: (1, {'@': 293}), 93: (1, {'@': 293}), 94: (1, {'@': 293}), 57: (1, {'@': 293}), 96: (1, {'@': 293}), 54: (1, {'@': 293}), 97: (1, {'@': 293}), 98: (1, {'@': 293}), 99: (1, {'@': 293}), 100: (1, {'@': 293}), 101: (1, {'@': 293}), 102: (1, {'@': 293}), 103: (1, {'@': 293}), 104: (1, {'@': 293}), 105: (1, {'@': 293}), 106: (1, {'@': 293}), 107: (1, {'@': 293}), 108: (1, {'@': 293}), 109: (1, {'@': 293})}, 88: {58: (0, 458), 52: (0, 217)}, 89: {58: (1, {'@': 179}), 52: (1, {'@': 179})}, 90: {31: (1, {'@': 244}), 21: (1, {'@': 244}), 1: (1, {'@': 244}), 36: (1, {'@': 244}), 37: (1, {'@': 244}), 38: (1, {'@': 244}), 6: (1, {'@': 244}), 2: (1, {'@': 244}), 18: (1, {'@': 244}), 9: (1, {'@': 244}), 39: (1, {'@': 244}), 40: (1, {'@': 244}), 41: (1, {'@': 244}), 15: (1, {'@': 244}), 20: (1, {'@': 244}), 33: (1, {'@': 244}), 42: (1, {'@': 244}), 43: (1, {'@': 244}), 44: (1, {'@': 244}), 45: (1, {'@': 244}), 30: (1, {'@': 244}), 22: (1, {'@': 244}), 11: (1, {'@': 244}), 46: (1, {'@': 244}), 47: (1, {'@': 244}), 48: (1, {'@': 244}), 49: (1, {'@': 244}), 50: (1, {'@': 244}), 10: (1, {'@': 244}), 51: (1, {'@': 244}), 17: (1, {'@': 244}), 26: (1, {'@': 244}), 25: (1, {'@': 244}), 52: (1, {'@': 244}), 53: (1, {'@': 244}), 23: (1, {'@': 244}), 54: (1, {'@': 244}), 55: (1, {'@': 244}), 56: (1, {'@': 244}), 19: (1, {'@': 244}), 57: (1, {'@': 244})}, 91: {76: (0, 260)}, 92: {108: (0, 584), 31: (1, {'@': 248}), 21: (1, {'@': 248}), 1: (1, {'@': 248}), 36: (1, {'@': 248}), 37: (1, {'@': 248}), 38: (1, {'@': 248}), 6: (1, {'@': 248}), 2: (1, {'@': 248}), 18: (1, {'@': 248}), 9: (1, {'@': 248}), 39: (1, {'@': 248}), 40: (1, {'@': 248}), 41: (1, {'@': 248}), 15: (1, {'@': 248}), 20: (1, {'@': 248}), 33: (1, {'@': 248}), 42: (1, {'@': 248}), 43: (1, {'@': 248}), 44: (1, {'@': 248}), 45: (1, {'@': 248}), 30: (1, {'@': 248}), 22: (1, {'@': 248}), 11: (1, {'@': 248}), 46: (1, {'@': 248}), 47: (1, {'@': 248}), 48: (1, {'@': 248}), 49: (1, {'@': 248}), 50: (1, {'@': 248}), 10: (1, {'@': 248}), 51: (1, {'@': 248}), 17: (1, {'@': 248}), 26: (1, {'@': 248}), 25: (1, {'@': 248}), 52: (1, {'@': 248}), 53: (1, {'@': 248}), 23: (1, {'@': 248}), 54: (1, {'@': 248}), 55: (1, {'@': 248}), 56: (1, {'@': 248}), 19: (1, {'@': 248}), 57: (1, {'@': 248})}, 93: {84: (0, 428), 79: (1, {'@': 197}), 83: (1, {'@': 197}), 69: (1, {'@': 197}), 85: (1, {'@': 197}), 77: (1, {'@': 197}), 58: (1, {'@': 197}), 86: (1, {'@': 197}), 70: (1, {'@': 197}), 52: (1, {'@': 197}), 71: (1, {'@': 197}), 73: (1, {'@': 197}), 96: (1, {'@': 197}), 87: (1, {'@': 197}), 98: (1, {'@': 197}), 88: (1, {'@': 197}), 94: (1, {'@': 197})}, 94: {31: (1, {'@': 308}), 21: (1, {'@': 308}), 1: (1, {'@': 308}), 6: (1, {'@': 308}), 2: (1, {'@': 308}), 18: (1, {'@': 308}), 9: (1, {'@': 308}), 15: (1, {'@': 308}), 20: (1, {'@': 308}), 33: (1, {'@': 308}), 30: (1, {'@': 308}), 22: (1, {'@': 308}), 11: (1, {'@': 308}), 10: (1, {'@': 308}), 17: (1, {'@': 308}), 26: (1, {'@': 308}), 25: (1, {'@': 308}), 23: (1, {'@': 308}), 19: (1, {'@': 308})}, 95: {84: (0, 23), 93: (1, {'@': 225}), 58: (1, {'@': 225}), 52: (1, {'@': 225})}, 96: {68: (1, {'@': 450}), 84: (1, {'@': 450})}, 97: {58: (1, {'@': 170}), 52: (1, {'@': 170})}, 98: {119: (0, 300), 48: (0, 196), 54: (0, 43), 5: (0, 203), 6: (0, 32), 7: (0, 186), 120: (0, 231), 121: (0, 30), 53: (0, 243), 8: (0, 276), 42: (0, 209), 44: (0, 156), 10: (0, 284), 122: (0, 285), 41: (0, 318), 2: (0, 137), 12: (0, 397), 123: (0, 134), 16: (0, 244), 114: (0, 364), 15: (0, 414), 35: (0, 31), 9: (0, 112), 21: (0, 256), 52: (0, 465), 20: (0, 415), 124: (0, 332), 125: (0, 334), 126: (0, 296), 60: (0, 408), 127: (0, 97), 25: (0, 409), 61: (0, 64), 19: (0, 545), 38: (0, 75), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 40: (0, 69), 128: (0, 60), 129: (0, 438), 130: (0, 27), 1: (0, 24), 0: (0, 36), 63: (0, 25), 137: (0, 429), 4: (0, 50), 45: (0, 0), 3: (0, 255), 131: (0, 425), 132: (0, 72), 43: (0, 340), 133: (0, 89), 134: (0, 76), 65: (0, 85), 135: (0, 331), 11: (0, 399), 14: (0, 79), 13: (0, 453), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 64: (0, 267), 23: (0, 70), 22: (0, 61), 136: (0, 317), 24: (0, 419), 56: (0, 456), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 138: (0, 449)}, 99: {0: (0, 36), 1: (0, 24), 2: (0, 137), 4: (0, 50), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 15: (0, 414), 16: (0, 244), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 3: (0, 437), 26: (0, 3), 27: (0, 66), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 35: (0, 105)}, 100: {147: (0, 570), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 148: (0, 371), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 565), 9: (0, 112), 149: (0, 555), 21: (0, 256), 20: (0, 415), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 64: (0, 549), 45: (0, 573), 26: (0, 3), 27: (0, 66), 36: (0, 102), 29: (0, 10), 33: (0, 497), 93: (0, 542), 150: (0, 593), 0: (0, 36), 1: (0, 24), 81: (0, 596), 63: (0, 25), 4: (0, 50), 3: (0, 255), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 67: (0, 162), 66: (0, 431), 17: (0, 7), 18: (0, 558), 23: (0, 70), 151: (0, 591), 22: (0, 61), 24: (0, 419), 152: (0, 585), 153: (0, 587), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 101: {31: (1, {'@': 163}), 21: (1, {'@': 163}), 1: (1, {'@': 163}), 36: (1, {'@': 163}), 37: (1, {'@': 163}), 38: (1, {'@': 163}), 6: (1, {'@': 163}), 2: (1, {'@': 163}), 18: (1, {'@': 163}), 9: (1, {'@': 163}), 39: (1, {'@': 163}), 40: (1, {'@': 163}), 41: (1, {'@': 163}), 15: (1, {'@': 163}), 20: (1, {'@': 163}), 33: (1, {'@': 163}), 42: (1, {'@': 163}), 43: (1, {'@': 163}), 44: (1, {'@': 163}), 45: (1, {'@': 163}), 30: (1, {'@': 163}), 22: (1, {'@': 163}), 11: (1, {'@': 163}), 46: (1, {'@': 163}), 47: (1, {'@': 163}), 48: (1, {'@': 163}), 49: (1, {'@': 163}), 50: (1, {'@': 163}), 10: (1, {'@': 163}), 51: (1, {'@': 163}), 17: (1, {'@': 163}), 26: (1, {'@': 163}), 25: (1, {'@': 163}), 52: (1, {'@': 163}), 53: (1, {'@': 163}), 23: (1, {'@': 163}), 54: (1, {'@': 163}), 55: (1, {'@': 163}), 56: (1, {'@': 163}), 19: (1, {'@': 163}), 57: (1, {'@': 163})}, 102: {0: (0, 36), 1: (0, 24), 2: (0, 137), 3: (0, 255), 4: (0, 50), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 66: (0, 431), 15: (0, 414), 16: (0, 244), 17: (0, 7), 63: (0, 490), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 26: (0, 3), 27: (0, 66), 28: (0, 572), 36: (0, 102), 30: (0, 225), 31: (0, 533), 29: (0, 10), 32: (0, 146), 34: (0, 521), 33: (0, 497), 35: (0, 105)}, 103: {31: (1, {'@': 184}), 21: (1, {'@': 184}), 1: (1, {'@': 184}), 36: (1, {'@': 184}), 6: (1, {'@': 184}), 2: (1, {'@': 184}), 18: (1, {'@': 184}), 9: (1, {'@': 184}), 15: (1, {'@': 184}), 20: (1, {'@': 184}), 33: (1, {'@': 184}), 43: (1, {'@': 184}), 30: (1, {'@': 184}), 22: (1, {'@': 184}), 11: (1, {'@': 184}), 10: (1, {'@': 184}), 17: (1, {'@': 184}), 26: (1, {'@': 184}), 25: (1, {'@': 184}), 23: (1, {'@': 184}), 19: (1, {'@': 184})}, 104: {31: (1, {'@': 193}), 21: (1, {'@': 193}), 1: (1, {'@': 193}), 36: (1, {'@': 193}), 6: (1, {'@': 193}), 2: (1, {'@': 193}), 18: (1, {'@': 193}), 9: (1, {'@': 193}), 15: (1, {'@': 193}), 20: (1, {'@': 193}), 33: (1, {'@': 193}), 43: (1, {'@': 193}), 30: (1, {'@': 193}), 22: (1, {'@': 193}), 11: (1, {'@': 193}), 10: (1, {'@': 193}), 17: (1, {'@': 193}), 26: (1, {'@': 193}), 25: (1, {'@': 193}), 23: (1, {'@': 193}), 19: (1, {'@': 193})}, 105: {1: (1, {'@': 341}), 69: (1, {'@': 341}), 36: (1, {'@': 341}), 70: (1, {'@': 341}), 38: (1, {'@': 341}), 71: (1, {'@': 341}), 2: (1, {'@': 341}), 18: (1, {'@': 341}), 39: (1, {'@': 341}), 40: (1, {'@': 341}), 72: (1, {'@': 341}), 58: (1, {'@': 341}), 20: (1, {'@': 341}), 73: (1, {'@': 341}), 42: (1, {'@': 341}), 74: (1, {'@': 341}), 43: (1, {'@': 341}), 75: (1, {'@': 341}), 44: (1, {'@': 341}), 22: (1, {'@': 341}), 76: (1, {'@': 341}), 48: (1, {'@': 341}), 77: (1, {'@': 341}), 78: (1, {'@': 341}), 50: (1, {'@': 341}), 10: (1, {'@': 341}), 68: (1, {'@': 341}), 52: (1, {'@': 341}), 79: (1, {'@': 341}), 53: (1, {'@': 341}), 80: (1, {'@': 341}), 81: (1, {'@': 341}), 23: (1, {'@': 341}), 55: (1, {'@': 341}), 56: (1, {'@': 341}), 19: (1, {'@': 341}), 31: (1, {'@': 341}), 82: (1, {'@': 341}), 21: (1, {'@': 341}), 83: (1, {'@': 341}), 37: (1, {'@': 341}), 84: (1, {'@': 341}), 6: (1, {'@': 341}), 9: (1, {'@': 341}), 41: (1, {'@': 341}), 15: (1, {'@': 341}), 85: (1, {'@': 341}), 86: (1, {'@': 341}), 33: (1, {'@': 341}), 87: (1, {'@': 341}), 45: (1, {'@': 341}), 30: (1, {'@': 341}), 11: (1, {'@': 341}), 88: (1, {'@': 341}), 46: (1, {'@': 341}), 47: (1, {'@': 341}), 89: (1, {'@': 341}), 49: (1, {'@': 341}), 90: (1, {'@': 341}), 51: (1, {'@': 341}), 91: (1, {'@': 341}), 17: (1, {'@': 341}), 26: (1, {'@': 341}), 25: (1, {'@': 341}), 92: (1, {'@': 341}), 93: (1, {'@': 341}), 94: (1, {'@': 341}), 57: (1, {'@': 341}), 95: (1, {'@': 341}), 96: (1, {'@': 341}), 54: (1, {'@': 341}), 97: (1, {'@': 341}), 98: (1, {'@': 341}), 101: (1, {'@': 341}), 103: (1, {'@': 341}), 106: (1, {'@': 341}), 107: (1, {'@': 341}), 105: (1, {'@': 341}), 99: (1, {'@': 341}), 100: (1, {'@': 341}), 102: (1, {'@': 341}), 108: (1, {'@': 341}), 109: (1, {'@': 341}), 104: (1, {'@': 341})}, 106: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 64: (0, 41), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 97: (1, {'@': 369}), 84: (1, {'@': 369})}, 107: {93: (1, {'@': 509}), 84: (1, {'@': 509})}, 108: {31: (1, {'@': 307}), 21: (1, {'@': 307}), 1: (1, {'@': 307}), 6: (1, {'@': 307}), 2: (1, {'@': 307}), 18: (1, {'@': 307}), 9: (1, {'@': 307}), 15: (1, {'@': 307}), 20: (1, {'@': 307}), 33: (1, {'@': 307}), 30: (1, {'@': 307}), 22: (1, {'@': 307}), 11: (1, {'@': 307}), 10: (1, {'@': 307}), 17: (1, {'@': 307}), 26: (1, {'@': 307}), 25: (1, {'@': 307}), 23: (1, {'@': 307}), 19: (1, {'@': 307})}, 109: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 64: (0, 223), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 110: {90: (0, 175), 53: (1, {'@': 230}), 25: (1, {'@': 230}), 58: (1, {'@': 230}), 52: (1, {'@': 230}), 109: (1, {'@': 230}), 84: (1, {'@': 230})}, 111: {68: (1, {'@': 155})}, 112: {154: (0, 517), 97: (0, 486), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 119: (0, 469), 2: (0, 137), 12: (0, 397), 15: (0, 414), 114: (0, 364), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 4: (0, 50), 45: (0, 0), 3: (0, 255), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 155: (0, 531), 32: (0, 146), 31: (0, 533), 34: (0, 521), 64: (0, 267)}, 113: {31: (1, {'@': 240}), 21: (1, {'@': 240}), 1: (1, {'@': 240}), 36: (1, {'@': 240}), 37: (1, {'@': 240}), 38: (1, {'@': 240}), 6: (1, {'@': 240}), 2: (1, {'@': 240}), 18: (1, {'@': 240}), 9: (1, {'@': 240}), 39: (1, {'@': 240}), 40: (1, {'@': 240}), 41: (1, {'@': 240}), 15: (1, {'@': 240}), 20: (1, {'@': 240}), 33: (1, {'@': 240}), 42: (1, {'@': 240}), 43: (1, {'@': 240}), 44: (1, {'@': 240}), 45: (1, {'@': 240}), 30: (1, {'@': 240}), 22: (1, {'@': 240}), 11: (1, {'@': 240}), 46: (1, {'@': 240}), 47: (1, {'@': 240}), 48: (1, {'@': 240}), 49: (1, {'@': 240}), 50: (1, {'@': 240}), 10: (1, {'@': 240}), 51: (1, {'@': 240}), 17: (1, {'@': 240}), 26: (1, {'@': 240}), 25: (1, {'@': 240}), 52: (1, {'@': 240}), 53: (1, {'@': 240}), 23: (1, {'@': 240}), 54: (1, {'@': 240}), 55: (1, {'@': 240}), 56: (1, {'@': 240}), 19: (1, {'@': 240}), 57: (1, {'@': 240})}, 114: {156: (0, 277), 84: (0, 222), 58: (1, {'@': 233}), 52: (1, {'@': 233})}, 115: {84: (0, 6), 157: (0, 52), 58: (1, {'@': 378}), 52: (1, {'@': 378}), 68: (1, {'@': 378})}, 116: {93: (1, {'@': 448}), 84: (1, {'@': 448})}, 117: {119: (0, 300), 48: (0, 196), 54: (0, 43), 5: (0, 203), 6: (0, 32), 7: (0, 186), 120: (0, 231), 121: (0, 30), 53: (0, 243), 137: (0, 313), 8: (0, 276), 42: (0, 209), 44: (0, 156), 10: (0, 284), 122: (0, 285), 41: (0, 318), 2: (0, 137), 12: (0, 397), 123: (0, 134), 16: (0, 244), 114: (0, 364), 15: (0, 414), 35: (0, 31), 9: (0, 112), 21: (0, 256), 52: (0, 465), 20: (0, 415), 124: (0, 332), 125: (0, 334), 126: (0, 296), 60: (0, 408), 127: (0, 97), 25: (0, 409), 61: (0, 64), 19: (0, 545), 38: (0, 75), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 40: (0, 69), 128: (0, 60), 129: (0, 438), 130: (0, 27), 1: (0, 24), 0: (0, 36), 63: (0, 25), 4: (0, 50), 45: (0, 0), 3: (0, 255), 131: (0, 425), 132: (0, 72), 43: (0, 340), 133: (0, 89), 134: (0, 76), 65: (0, 85), 135: (0, 331), 11: (0, 399), 14: (0, 79), 13: (0, 453), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 64: (0, 267), 23: (0, 70), 22: (0, 61), 136: (0, 317), 24: (0, 419), 56: (0, 456), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 138: (0, 449)}, 118: {77: (0, 439), 93: (1, {'@': 424}), 84: (1, {'@': 424})}, 119: {31: (1, {'@': 467}), 21: (1, {'@': 467}), 1: (1, {'@': 467}), 36: (1, {'@': 467}), 37: (1, {'@': 467}), 38: (1, {'@': 467}), 6: (1, {'@': 467}), 2: (1, {'@': 467}), 18: (1, {'@': 467}), 9: (1, {'@': 467}), 39: (1, {'@': 467}), 40: (1, {'@': 467}), 41: (1, {'@': 467}), 15: (1, {'@': 467}), 20: (1, {'@': 467}), 108: (1, {'@': 467}), 33: (1, {'@': 467}), 42: (1, {'@': 467}), 43: (1, {'@': 467}), 44: (1, {'@': 467}), 45: (1, {'@': 467}), 30: (1, {'@': 467}), 22: (1, {'@': 467}), 11: (1, {'@': 467}), 46: (1, {'@': 467}), 47: (1, {'@': 467}), 48: (1, {'@': 467}), 49: (1, {'@': 467}), 50: (1, {'@': 467}), 10: (1, {'@': 467}), 51: (1, {'@': 467}), 17: (1, {'@': 467}), 26: (1, {'@': 467}), 25: (1, {'@': 467}), 52: (1, {'@': 467}), 112: (1, {'@': 467}), 53: (1, {'@': 467}), 57: (1, {'@': 467}), 23: (1, {'@': 467}), 54: (1, {'@': 467}), 55: (1, {'@': 467}), 56: (1, {'@': 467}), 19: (1, {'@': 467})}, 120: {31: (1, {'@': 182}), 21: (1, {'@': 182}), 1: (1, {'@': 182}), 36: (1, {'@': 182}), 6: (1, {'@': 182}), 2: (1, {'@': 182}), 18: (1, {'@': 182}), 9: (1, {'@': 182}), 15: (1, {'@': 182}), 20: (1, {'@': 182}), 33: (1, {'@': 182}), 43: (1, {'@': 182}), 30: (1, {'@': 182}), 22: (1, {'@': 182}), 11: (1, {'@': 182}), 10: (1, {'@': 182}), 17: (1, {'@': 182}), 26: (1, {'@': 182}), 25: (1, {'@': 182}), 23: (1, {'@': 182}), 19: (1, {'@': 182})}, 121: {31: (1, {'@': 185}), 21: (1, {'@': 185}), 1: (1, {'@': 185}), 36: (1, {'@': 185}), 6: (1, {'@': 185}), 2: (1, {'@': 185}), 18: (1, {'@': 185}), 9: (1, {'@': 185}), 15: (1, {'@': 185}), 20: (1, {'@': 185}), 33: (1, {'@': 185}), 43: (1, {'@': 185}), 30: (1, {'@': 185}), 22: (1, {'@': 185}), 11: (1, {'@': 185}), 10: (1, {'@': 185}), 17: (1, {'@': 185}), 26: (1, {'@': 185}), 25: (1, {'@': 185}), 23: (1, {'@': 185}), 19: (1, {'@': 185})}, 122: {31: (1, {'@': 189}), 21: (1, {'@': 189}), 1: (1, {'@': 189}), 36: (1, {'@': 189}), 6: (1, {'@': 189}), 2: (1, {'@': 189}), 18: (1, {'@': 189}), 9: (1, {'@': 189}), 15: (1, {'@': 189}), 20: (1, {'@': 189}), 33: (1, {'@': 189}), 43: (1, {'@': 189}), 30: (1, {'@': 189}), 22: (1, {'@': 189}), 11: (1, {'@': 189}), 10: (1, {'@': 189}), 17: (1, {'@': 189}), 26: (1, {'@': 189}), 25: (1, {'@': 189}), 23: (1, {'@': 189}), 19: (1, {'@': 189})}, 123: {91: (0, 400), 31: (1, {'@': 287}), 21: (1, {'@': 287}), 1: (1, {'@': 287}), 83: (1, {'@': 287}), 69: (1, {'@': 287}), 36: (1, {'@': 287}), 37: (1, {'@': 287}), 84: (1, {'@': 287}), 70: (1, {'@': 287}), 38: (1, {'@': 287}), 71: (1, {'@': 287}), 6: (1, {'@': 287}), 2: (1, {'@': 287}), 18: (1, {'@': 287}), 9: (1, {'@': 287}), 39: (1, {'@': 287}), 40: (1, {'@': 287}), 41: (1, {'@': 287}), 15: (1, {'@': 287}), 85: (1, {'@': 287}), 58: (1, {'@': 287}), 20: (1, {'@': 287}), 86: (1, {'@': 287}), 33: (1, {'@': 287}), 73: (1, {'@': 287}), 42: (1, {'@': 287}), 43: (1, {'@': 287}), 44: (1, {'@': 287}), 87: (1, {'@': 287}), 45: (1, {'@': 287}), 30: (1, {'@': 287}), 22: (1, {'@': 287}), 11: (1, {'@': 287}), 88: (1, {'@': 287}), 46: (1, {'@': 287}), 76: (1, {'@': 287}), 48: (1, {'@': 287}), 47: (1, {'@': 287}), 77: (1, {'@': 287}), 49: (1, {'@': 287}), 50: (1, {'@': 287}), 10: (1, {'@': 287}), 51: (1, {'@': 287}), 17: (1, {'@': 287}), 26: (1, {'@': 287}), 25: (1, {'@': 287}), 68: (1, {'@': 287}), 52: (1, {'@': 287}), 93: (1, {'@': 287}), 94: (1, {'@': 287}), 97: (1, {'@': 287}), 79: (1, {'@': 287}), 53: (1, {'@': 287}), 57: (1, {'@': 287}), 80: (1, {'@': 287}), 23: (1, {'@': 287}), 96: (1, {'@': 287}), 54: (1, {'@': 287}), 55: (1, {'@': 287}), 56: (1, {'@': 287}), 98: (1, {'@': 287}), 19: (1, {'@': 287}), 99: (1, {'@': 287}), 100: (1, {'@': 287}), 101: (1, {'@': 287}), 102: (1, {'@': 287}), 105: (1, {'@': 287}), 106: (1, {'@': 287}), 103: (1, {'@': 287}), 104: (1, {'@': 287}), 107: (1, {'@': 287}), 108: (1, {'@': 287}), 109: (1, {'@': 287})}, 124: {31: (1, {'@': 317}), 21: (1, {'@': 317}), 1: (1, {'@': 317}), 6: (1, {'@': 317}), 2: (1, {'@': 317}), 18: (1, {'@': 317}), 9: (1, {'@': 317}), 15: (1, {'@': 317}), 20: (1, {'@': 317}), 33: (1, {'@': 317}), 30: (1, {'@': 317}), 22: (1, {'@': 317}), 11: (1, {'@': 317}), 10: (1, {'@': 317}), 17: (1, {'@': 317}), 26: (1, {'@': 317}), 25: (1, {'@': 317}), 23: (1, {'@': 317}), 19: (1, {'@': 317})}, 125: {84: (0, 272), 97: (1, {'@': 357})}, 126: {93: (1, {'@': 123})}, 127: {158: (0, 93), 84: (0, 55), 68: (0, 98), 79: (1, {'@': 195}), 83: (1, {'@': 195}), 69: (1, {'@': 195}), 85: (1, {'@': 195}), 77: (1, {'@': 195}), 58: (1, {'@': 195}), 86: (1, {'@': 195}), 70: (1, {'@': 195}), 52: (1, {'@': 195}), 71: (1, {'@': 195}), 73: (1, {'@': 195}), 96: (1, {'@': 195}), 87: (1, {'@': 195}), 98: (1, {'@': 195}), 88: (1, {'@': 195}), 94: (1, {'@': 195})}, 128: {68: (0, 454), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 64: (0, 466), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 4: (0, 50), 3: (0, 255), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 159: (0, 65), 31: (0, 533), 32: (0, 146), 34: (0, 521), 97: (1, {'@': 358})}, 129: {31: (1, {'@': 183}), 21: (1, {'@': 183}), 1: (1, {'@': 183}), 36: (1, {'@': 183}), 6: (1, {'@': 183}), 2: (1, {'@': 183}), 18: (1, {'@': 183}), 9: (1, {'@': 183}), 15: (1, {'@': 183}), 20: (1, {'@': 183}), 33: (1, {'@': 183}), 43: (1, {'@': 183}), 30: (1, {'@': 183}), 22: (1, {'@': 183}), 11: (1, {'@': 183}), 10: (1, {'@': 183}), 17: (1, {'@': 183}), 26: (1, {'@': 183}), 25: (1, {'@': 183}), 23: (1, {'@': 183}), 19: (1, {'@': 183})}, 130: {68: (1, {'@': 152})}, 131: {31: (1, {'@': 309}), 21: (1, {'@': 309}), 1: (1, {'@': 309}), 6: (1, {'@': 309}), 2: (1, {'@': 309}), 18: (1, {'@': 309}), 9: (1, {'@': 309}), 15: (1, {'@': 309}), 20: (1, {'@': 309}), 33: (1, {'@': 309}), 30: (1, {'@': 309}), 22: (1, {'@': 309}), 11: (1, {'@': 309}), 10: (1, {'@': 309}), 17: (1, {'@': 309}), 26: (1, {'@': 309}), 25: (1, {'@': 309}), 23: (1, {'@': 309}), 19: (1, {'@': 309})}, 132: {5: (0, 203), 6: (0, 32), 147: (0, 154), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 565), 9: (0, 112), 151: (0, 183), 149: (0, 555), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 64: (0, 549), 27: (0, 66), 26: (0, 3), 45: (0, 573), 36: (0, 102), 29: (0, 10), 33: (0, 497), 150: (0, 593), 0: (0, 36), 1: (0, 24), 81: (0, 596), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 153: (0, 290), 24: (0, 419), 152: (0, 585), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 93: (1, {'@': 99})}, 133: {160: (0, 338), 84: (0, 430), 93: (1, {'@': 415})}, 134: {161: (0, 88), 52: (0, 11), 58: (0, 251)}, 135: {77: (0, 269), 58: (1, {'@': 180}), 52: (1, {'@': 180})}, 136: {68: (1, {'@': 137})}, 137: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 81: (0, 51), 162: (0, 221), 10: (0, 284), 154: (0, 164), 64: (0, 319), 2: (0, 137), 12: (0, 397), 163: (0, 264), 15: (0, 414), 114: (0, 364), 16: (0, 244), 35: (0, 31), 9: (0, 112), 164: (0, 49), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 165: (0, 91), 1: (0, 24), 63: (0, 25), 0: (0, 36), 4: (0, 50), 45: (0, 0), 3: (0, 255), 43: (0, 340), 119: (0, 232), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 76: (0, 474), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 138: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 64: (0, 214), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 139: {31: (1, {'@': 188}), 21: (1, {'@': 188}), 1: (1, {'@': 188}), 36: (1, {'@': 188}), 6: (1, {'@': 188}), 2: (1, {'@': 188}), 18: (1, {'@': 188}), 9: (1, {'@': 188}), 15: (1, {'@': 188}), 20: (1, {'@': 188}), 33: (1, {'@': 188}), 43: (1, {'@': 188}), 30: (1, {'@': 188}), 22: (1, {'@': 188}), 11: (1, {'@': 188}), 10: (1, {'@': 188}), 17: (1, {'@': 188}), 26: (1, {'@': 188}), 25: (1, {'@': 188}), 23: (1, {'@': 188}), 19: (1, {'@': 188})}, 140: {93: (1, {'@': 125})}, 141: {119: (0, 300), 48: (0, 196), 54: (0, 43), 5: (0, 203), 6: (0, 32), 7: (0, 186), 120: (0, 231), 121: (0, 30), 53: (0, 243), 8: (0, 276), 42: (0, 209), 44: (0, 156), 10: (0, 284), 122: (0, 285), 41: (0, 318), 2: (0, 137), 12: (0, 397), 123: (0, 134), 16: (0, 244), 114: (0, 364), 15: (0, 414), 35: (0, 31), 9: (0, 112), 21: (0, 256), 52: (0, 465), 20: (0, 415), 124: (0, 332), 125: (0, 334), 126: (0, 296), 60: (0, 408), 127: (0, 97), 25: (0, 409), 61: (0, 64), 19: (0, 545), 38: (0, 75), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 40: (0, 69), 128: (0, 60), 129: (0, 438), 130: (0, 27), 1: (0, 24), 0: (0, 36), 63: (0, 25), 4: (0, 50), 45: (0, 0), 3: (0, 255), 131: (0, 425), 132: (0, 72), 43: (0, 340), 133: (0, 89), 134: (0, 76), 65: (0, 85), 135: (0, 331), 11: (0, 399), 137: (0, 311), 14: (0, 79), 13: (0, 453), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 64: (0, 267), 23: (0, 70), 22: (0, 61), 136: (0, 317), 24: (0, 419), 56: (0, 456), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 138: (0, 449)}, 142: {53: (0, 274)}, 143: {68: (0, 484)}, 144: {58: (1, {'@': 217}), 52: (1, {'@': 217})}, 145: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 565), 9: (0, 112), 149: (0, 555), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 64: (0, 549), 27: (0, 66), 26: (0, 3), 45: (0, 573), 36: (0, 102), 29: (0, 10), 33: (0, 497), 153: (0, 281), 150: (0, 593), 0: (0, 36), 1: (0, 24), 63: (0, 25), 81: (0, 596), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 151: (0, 292), 23: (0, 70), 22: (0, 61), 24: (0, 419), 147: (0, 116), 152: (0, 585), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 93: (1, {'@': 107})}, 146: {1: (1, {'@': 329}), 69: (1, {'@': 329}), 36: (1, {'@': 329}), 70: (1, {'@': 329}), 38: (1, {'@': 329}), 71: (1, {'@': 329}), 2: (1, {'@': 329}), 18: (1, {'@': 329}), 39: (1, {'@': 329}), 40: (1, {'@': 329}), 72: (1, {'@': 329}), 58: (1, {'@': 329}), 20: (1, {'@': 329}), 73: (1, {'@': 329}), 42: (1, {'@': 329}), 74: (1, {'@': 329}), 43: (1, {'@': 329}), 75: (1, {'@': 329}), 44: (1, {'@': 329}), 22: (1, {'@': 329}), 76: (1, {'@': 329}), 48: (1, {'@': 329}), 77: (1, {'@': 329}), 78: (1, {'@': 329}), 50: (1, {'@': 329}), 10: (1, {'@': 329}), 68: (1, {'@': 329}), 52: (1, {'@': 329}), 79: (1, {'@': 329}), 53: (1, {'@': 329}), 80: (1, {'@': 329}), 81: (1, {'@': 329}), 23: (1, {'@': 329}), 55: (1, {'@': 329}), 56: (1, {'@': 329}), 19: (1, {'@': 329}), 31: (1, {'@': 329}), 82: (1, {'@': 329}), 21: (1, {'@': 329}), 83: (1, {'@': 329}), 37: (1, {'@': 329}), 84: (1, {'@': 329}), 6: (1, {'@': 329}), 9: (1, {'@': 329}), 41: (1, {'@': 329}), 15: (1, {'@': 329}), 85: (1, {'@': 329}), 86: (1, {'@': 329}), 33: (1, {'@': 329}), 87: (1, {'@': 329}), 45: (1, {'@': 329}), 30: (1, {'@': 329}), 11: (1, {'@': 329}), 88: (1, {'@': 329}), 46: (1, {'@': 329}), 47: (1, {'@': 329}), 89: (1, {'@': 329}), 49: (1, {'@': 329}), 90: (1, {'@': 329}), 51: (1, {'@': 329}), 91: (1, {'@': 329}), 17: (1, {'@': 329}), 26: (1, {'@': 329}), 25: (1, {'@': 329}), 92: (1, {'@': 329}), 93: (1, {'@': 329}), 94: (1, {'@': 329}), 57: (1, {'@': 329}), 95: (1, {'@': 329}), 96: (1, {'@': 329}), 54: (1, {'@': 329}), 97: (1, {'@': 329}), 98: (1, {'@': 329}), 99: (1, {'@': 329}), 100: (1, {'@': 329}), 101: (1, {'@': 329}), 102: (1, {'@': 329}), 103: (1, {'@': 329}), 104: (1, {'@': 329}), 105: (1, {'@': 329}), 106: (1, {'@': 329}), 107: (1, {'@': 329}), 108: (1, {'@': 329}), 109: (1, {'@': 329})}, 147: {31: (1, {'@': 318}), 21: (1, {'@': 318}), 1: (1, {'@': 318}), 6: (1, {'@': 318}), 2: (1, {'@': 318}), 18: (1, {'@': 318}), 9: (1, {'@': 318}), 15: (1, {'@': 318}), 20: (1, {'@': 318}), 33: (1, {'@': 318}), 30: (1, {'@': 318}), 22: (1, {'@': 318}), 11: (1, {'@': 318}), 10: (1, {'@': 318}), 17: (1, {'@': 318}), 26: (1, {'@': 318}), 25: (1, {'@': 318}), 23: (1, {'@': 318}), 19: (1, {'@': 318})}, 148: {97: (1, {'@': 360}), 84: (1, {'@': 360})}, 149: {36: (0, 403), 31: (1, {'@': 321}), 21: (1, {'@': 321}), 1: (1, {'@': 321}), 6: (1, {'@': 321}), 2: (1, {'@': 321}), 18: (1, {'@': 321}), 9: (1, {'@': 321}), 15: (1, {'@': 321}), 20: (1, {'@': 321}), 33: (1, {'@': 321}), 30: (1, {'@': 321}), 22: (1, {'@': 321}), 11: (1, {'@': 321}), 10: (1, {'@': 321}), 17: (1, {'@': 321}), 26: (1, {'@': 321}), 25: (1, {'@': 321}), 23: (1, {'@': 321}), 19: (1, {'@': 321})}, 150: {31: (1, {'@': 187}), 21: (1, {'@': 187}), 1: (1, {'@': 187}), 36: (1, {'@': 187}), 6: (1, {'@': 187}), 2: (1, {'@': 187}), 18: (1, {'@': 187}), 9: (1, {'@': 187}), 15: (1, {'@': 187}), 20: (1, {'@': 187}), 33: (1, {'@': 187}), 43: (1, {'@': 187}), 30: (1, {'@': 187}), 22: (1, {'@': 187}), 11: (1, {'@': 187}), 10: (1, {'@': 187}), 17: (1, {'@': 187}), 26: (1, {'@': 187}), 25: (1, {'@': 187}), 23: (1, {'@': 187}), 19: (1, {'@': 187})}, 151: {58: (1, {'@': 209}), 52: (1, {'@': 209})}, 152: {1: (1, {'@': 328}), 69: (1, {'@': 328}), 36: (1, {'@': 328}), 70: (1, {'@': 328}), 38: (1, {'@': 328}), 71: (1, {'@': 328}), 2: (1, {'@': 328}), 18: (1, {'@': 328}), 39: (1, {'@': 328}), 40: (1, {'@': 328}), 72: (1, {'@': 328}), 58: (1, {'@': 328}), 20: (1, {'@': 328}), 73: (1, {'@': 328}), 42: (1, {'@': 328}), 74: (1, {'@': 328}), 43: (1, {'@': 328}), 75: (1, {'@': 328}), 44: (1, {'@': 328}), 22: (1, {'@': 328}), 76: (1, {'@': 328}), 48: (1, {'@': 328}), 77: (1, {'@': 328}), 78: (1, {'@': 328}), 50: (1, {'@': 328}), 10: (1, {'@': 328}), 68: (1, {'@': 328}), 52: (1, {'@': 328}), 79: (1, {'@': 328}), 53: (1, {'@': 328}), 80: (1, {'@': 328}), 81: (1, {'@': 328}), 23: (1, {'@': 328}), 55: (1, {'@': 328}), 56: (1, {'@': 328}), 19: (1, {'@': 328}), 31: (1, {'@': 328}), 82: (1, {'@': 328}), 21: (1, {'@': 328}), 83: (1, {'@': 328}), 37: (1, {'@': 328}), 84: (1, {'@': 328}), 6: (1, {'@': 328}), 9: (1, {'@': 328}), 41: (1, {'@': 328}), 15: (1, {'@': 328}), 85: (1, {'@': 328}), 86: (1, {'@': 328}), 33: (1, {'@': 328}), 87: (1, {'@': 328}), 45: (1, {'@': 328}), 30: (1, {'@': 328}), 11: (1, {'@': 328}), 88: (1, {'@': 328}), 46: (1, {'@': 328}), 47: (1, {'@': 328}), 89: (1, {'@': 328}), 49: (1, {'@': 328}), 90: (1, {'@': 328}), 51: (1, {'@': 328}), 91: (1, {'@': 328}), 17: (1, {'@': 328}), 26: (1, {'@': 328}), 25: (1, {'@': 328}), 92: (1, {'@': 328}), 93: (1, {'@': 328}), 94: (1, {'@': 328}), 57: (1, {'@': 328}), 95: (1, {'@': 328}), 96: (1, {'@': 328}), 54: (1, {'@': 328}), 97: (1, {'@': 328}), 98: (1, {'@': 328}), 99: (1, {'@': 328}), 100: (1, {'@': 328}), 101: (1, {'@': 328}), 102: (1, {'@': 328}), 103: (1, {'@': 328}), 104: (1, {'@': 328}), 105: (1, {'@': 328}), 106: (1, {'@': 328}), 107: (1, {'@': 328}), 108: (1, {'@': 328}), 109: (1, {'@': 328})}, 153: {68: (0, 106), 145: (0, 345), 97: (1, {'@': 365}), 84: (1, {'@': 365})}, 154: {93: (1, {'@': 447}), 84: (1, {'@': 447})}, 155: {166: (0, 212), 112: (0, 109), 1: (1, {'@': 249}), 36: (1, {'@': 249}), 38: (1, {'@': 249}), 2: (1, {'@': 249}), 18: (1, {'@': 249}), 39: (1, {'@': 249}), 40: (1, {'@': 249}), 20: (1, {'@': 249}), 42: (1, {'@': 249}), 43: (1, {'@': 249}), 44: (1, {'@': 249}), 22: (1, {'@': 249}), 48: (1, {'@': 249}), 50: (1, {'@': 249}), 10: (1, {'@': 249}), 52: (1, {'@': 249}), 53: (1, {'@': 249}), 23: (1, {'@': 249}), 55: (1, {'@': 249}), 56: (1, {'@': 249}), 19: (1, {'@': 249}), 31: (1, {'@': 249}), 21: (1, {'@': 249}), 37: (1, {'@': 249}), 6: (1, {'@': 249}), 9: (1, {'@': 249}), 41: (1, {'@': 249}), 15: (1, {'@': 249}), 108: (1, {'@': 249}), 33: (1, {'@': 249}), 45: (1, {'@': 249}), 30: (1, {'@': 249}), 11: (1, {'@': 249}), 46: (1, {'@': 249}), 47: (1, {'@': 249}), 49: (1, {'@': 249}), 51: (1, {'@': 249}), 17: (1, {'@': 249}), 26: (1, {'@': 249}), 25: (1, {'@': 249}), 57: (1, {'@': 249}), 54: (1, {'@': 249})}, 156: {58: (1, {'@': 203}), 52: (1, {'@': 203})}, 157: {58: (1, {'@': 459}), 52: (1, {'@': 459}), 93: (1, {'@': 459}), 84: (1, {'@': 459})}, 158: {31: (1, {'@': 192}), 21: (1, {'@': 192}), 1: (1, {'@': 192}), 36: (1, {'@': 192}), 6: (1, {'@': 192}), 2: (1, {'@': 192}), 18: (1, {'@': 192}), 9: (1, {'@': 192}), 15: (1, {'@': 192}), 20: (1, {'@': 192}), 33: (1, {'@': 192}), 43: (1, {'@': 192}), 30: (1, {'@': 192}), 22: (1, {'@': 192}), 11: (1, {'@': 192}), 10: (1, {'@': 192}), 17: (1, {'@': 192}), 26: (1, {'@': 192}), 25: (1, {'@': 192}), 23: (1, {'@': 192}), 19: (1, {'@': 192})}, 159: {109: (0, 434), 52: (1, {'@': 223}), 58: (1, {'@': 223}), 84: (1, {'@': 223})}, 160: {167: (0, 95), 84: (0, 253), 93: (1, {'@': 227}), 58: (1, {'@': 227}), 52: (1, {'@': 227})}, 161: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 64: (0, 389), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 162: {25: (1, {'@': 273}), 68: (1, {'@': 273}), 52: (1, {'@': 273}), 58: (1, {'@': 273}), 84: (1, {'@': 273}), 83: (1, {'@': 273}), 69: (1, {'@': 273}), 77: (1, {'@': 273}), 70: (1, {'@': 273}), 71: (1, {'@': 273}), 94: (1, {'@': 273}), 79: (1, {'@': 273}), 85: (1, {'@': 273}), 86: (1, {'@': 273}), 73: (1, {'@': 273}), 96: (1, {'@': 273}), 87: (1, {'@': 273}), 98: (1, {'@': 273}), 88: (1, {'@': 273}), 31: (1, {'@': 273}), 21: (1, {'@': 273}), 1: (1, {'@': 273}), 36: (1, {'@': 273}), 37: (1, {'@': 273}), 38: (1, {'@': 273}), 6: (1, {'@': 273}), 2: (1, {'@': 273}), 18: (1, {'@': 273}), 9: (1, {'@': 273}), 39: (1, {'@': 273}), 40: (1, {'@': 273}), 41: (1, {'@': 273}), 15: (1, {'@': 273}), 20: (1, {'@': 273}), 33: (1, {'@': 273}), 42: (1, {'@': 273}), 43: (1, {'@': 273}), 44: (1, {'@': 273}), 45: (1, {'@': 273}), 30: (1, {'@': 273}), 22: (1, {'@': 273}), 11: (1, {'@': 273}), 46: (1, {'@': 273}), 47: (1, {'@': 273}), 48: (1, {'@': 273}), 49: (1, {'@': 273}), 50: (1, {'@': 273}), 10: (1, {'@': 273}), 51: (1, {'@': 273}), 17: (1, {'@': 273}), 26: (1, {'@': 273}), 53: (1, {'@': 273}), 57: (1, {'@': 273}), 23: (1, {'@': 273}), 54: (1, {'@': 273}), 55: (1, {'@': 273}), 56: (1, {'@': 273}), 19: (1, {'@': 273}), 97: (1, {'@': 273}), 76: (1, {'@': 273}), 109: (1, {'@': 273}), 93: (1, {'@': 273})}, 163: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 565), 9: (0, 112), 149: (0, 555), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 64: (0, 549), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 81: (0, 596), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 147: (0, 116), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 153: (0, 126)}, 164: {76: (0, 53)}, 165: {31: (1, {'@': 446}), 21: (1, {'@': 446}), 1: (1, {'@': 446}), 36: (1, {'@': 446}), 37: (1, {'@': 446}), 38: (1, {'@': 446}), 6: (1, {'@': 446}), 2: (1, {'@': 446}), 18: (1, {'@': 446}), 9: (1, {'@': 446}), 39: (1, {'@': 446}), 40: (1, {'@': 446}), 41: (1, {'@': 446}), 15: (1, {'@': 446}), 20: (1, {'@': 446}), 33: (1, {'@': 446}), 42: (1, {'@': 446}), 43: (1, {'@': 446}), 44: (1, {'@': 446}), 45: (1, {'@': 446}), 30: (1, {'@': 446}), 22: (1, {'@': 446}), 11: (1, {'@': 446}), 46: (1, {'@': 446}), 47: (1, {'@': 446}), 48: (1, {'@': 446}), 49: (1, {'@': 446}), 50: (1, {'@': 446}), 10: (1, {'@': 446}), 51: (1, {'@': 446}), 17: (1, {'@': 446}), 26: (1, {'@': 446}), 25: (1, {'@': 446}), 52: (1, {'@': 446}), 53: (1, {'@': 446}), 23: (1, {'@': 446}), 54: (1, {'@': 446}), 55: (1, {'@': 446}), 56: (1, {'@': 446}), 19: (1, {'@': 446})}, 166: {31: (1, {'@': 194}), 21: (1, {'@': 194}), 1: (1, {'@': 194}), 36: (1, {'@': 194}), 6: (1, {'@': 194}), 2: (1, {'@': 194}), 18: (1, {'@': 194}), 9: (1, {'@': 194}), 15: (1, {'@': 194}), 20: (1, {'@': 194}), 33: (1, {'@': 194}), 43: (1, {'@': 194}), 30: (1, {'@': 194}), 22: (1, {'@': 194}), 11: (1, {'@': 194}), 10: (1, {'@': 194}), 17: (1, {'@': 194}), 26: (1, {'@': 194}), 25: (1, {'@': 194}), 23: (1, {'@': 194}), 19: (1, {'@': 194})}, 167: {93: (1, {'@': 414})}, 168: {31: (1, {'@': 313}), 21: (1, {'@': 313}), 1: (1, {'@': 313}), 6: (1, {'@': 313}), 2: (1, {'@': 313}), 18: (1, {'@': 313}), 9: (1, {'@': 313}), 15: (1, {'@': 313}), 20: (1, {'@': 313}), 33: (1, {'@': 313}), 30: (1, {'@': 313}), 22: (1, {'@': 313}), 11: (1, {'@': 313}), 10: (1, {'@': 313}), 17: (1, {'@': 313}), 26: (1, {'@': 313}), 25: (1, {'@': 313}), 23: (1, {'@': 313}), 19: (1, {'@': 313})}, 169: {31: (1, {'@': 445}), 21: (1, {'@': 445}), 1: (1, {'@': 445}), 36: (1, {'@': 445}), 37: (1, {'@': 445}), 38: (1, {'@': 445}), 6: (1, {'@': 445}), 2: (1, {'@': 445}), 18: (1, {'@': 445}), 9: (1, {'@': 445}), 39: (1, {'@': 445}), 40: (1, {'@': 445}), 41: (1, {'@': 445}), 15: (1, {'@': 445}), 20: (1, {'@': 445}), 33: (1, {'@': 445}), 42: (1, {'@': 445}), 43: (1, {'@': 445}), 44: (1, {'@': 445}), 45: (1, {'@': 445}), 30: (1, {'@': 445}), 22: (1, {'@': 445}), 11: (1, {'@': 445}), 46: (1, {'@': 445}), 47: (1, {'@': 445}), 48: (1, {'@': 445}), 49: (1, {'@': 445}), 50: (1, {'@': 445}), 10: (1, {'@': 445}), 51: (1, {'@': 445}), 17: (1, {'@': 445}), 26: (1, {'@': 445}), 25: (1, {'@': 445}), 52: (1, {'@': 445}), 53: (1, {'@': 445}), 23: (1, {'@': 445}), 54: (1, {'@': 445}), 55: (1, {'@': 445}), 56: (1, {'@': 445}), 19: (1, {'@': 445})}, 170: {93: (1, {'@': 129}), 84: (1, {'@': 129})}, 171: {168: (0, 379), 84: (0, 392), 80: (1, {'@': 370})}, 172: {31: (1, {'@': 314}), 21: (1, {'@': 314}), 1: (1, {'@': 314}), 6: (1, {'@': 314}), 2: (1, {'@': 314}), 18: (1, {'@': 314}), 9: (1, {'@': 314}), 15: (1, {'@': 314}), 20: (1, {'@': 314}), 33: (1, {'@': 314}), 30: (1, {'@': 314}), 22: (1, {'@': 314}), 11: (1, {'@': 314}), 10: (1, {'@': 314}), 17: (1, {'@': 314}), 26: (1, {'@': 314}), 25: (1, {'@': 314}), 23: (1, {'@': 314}), 19: (1, {'@': 314})}, 173: {31: (1, {'@': 252}), 21: (1, {'@': 252}), 1: (1, {'@': 252}), 36: (1, {'@': 252}), 37: (1, {'@': 252}), 38: (1, {'@': 252}), 6: (1, {'@': 252}), 2: (1, {'@': 252}), 18: (1, {'@': 252}), 9: (1, {'@': 252}), 39: (1, {'@': 252}), 40: (1, {'@': 252}), 41: (1, {'@': 252}), 15: (1, {'@': 252}), 20: (1, {'@': 252}), 33: (1, {'@': 252}), 42: (1, {'@': 252}), 43: (1, {'@': 252}), 44: (1, {'@': 252}), 45: (1, {'@': 252}), 30: (1, {'@': 252}), 22: (1, {'@': 252}), 11: (1, {'@': 252}), 46: (1, {'@': 252}), 47: (1, {'@': 252}), 48: (1, {'@': 252}), 49: (1, {'@': 252}), 50: (1, {'@': 252}), 10: (1, {'@': 252}), 51: (1, {'@': 252}), 17: (1, {'@': 252}), 26: (1, {'@': 252}), 25: (1, {'@': 252}), 52: (1, {'@': 252}), 53: (1, {'@': 252}), 23: (1, {'@': 252}), 54: (1, {'@': 252}), 55: (1, {'@': 252}), 56: (1, {'@': 252}), 19: (1, {'@': 252}), 57: (1, {'@': 252})}, 174: {31: (1, {'@': 306}), 21: (1, {'@': 306}), 1: (1, {'@': 306}), 6: (1, {'@': 306}), 2: (1, {'@': 306}), 18: (1, {'@': 306}), 9: (1, {'@': 306}), 15: (1, {'@': 306}), 20: (1, {'@': 306}), 33: (1, {'@': 306}), 30: (1, {'@': 306}), 22: (1, {'@': 306}), 11: (1, {'@': 306}), 10: (1, {'@': 306}), 17: (1, {'@': 306}), 26: (1, {'@': 306}), 25: (1, {'@': 306}), 23: (1, {'@': 306}), 19: (1, {'@': 306})}, 175: {25: (0, 409), 35: (0, 337)}, 176: {1: (1, {'@': 335}), 69: (1, {'@': 335}), 36: (1, {'@': 335}), 70: (1, {'@': 335}), 38: (1, {'@': 335}), 71: (1, {'@': 335}), 2: (1, {'@': 335}), 18: (1, {'@': 335}), 39: (1, {'@': 335}), 40: (1, {'@': 335}), 72: (1, {'@': 335}), 58: (1, {'@': 335}), 20: (1, {'@': 335}), 73: (1, {'@': 335}), 42: (1, {'@': 335}), 74: (1, {'@': 335}), 43: (1, {'@': 335}), 75: (1, {'@': 335}), 44: (1, {'@': 335}), 22: (1, {'@': 335}), 76: (1, {'@': 335}), 48: (1, {'@': 335}), 77: (1, {'@': 335}), 78: (1, {'@': 335}), 50: (1, {'@': 335}), 10: (1, {'@': 335}), 68: (1, {'@': 335}), 52: (1, {'@': 335}), 79: (1, {'@': 335}), 53: (1, {'@': 335}), 80: (1, {'@': 335}), 81: (1, {'@': 335}), 23: (1, {'@': 335}), 55: (1, {'@': 335}), 56: (1, {'@': 335}), 19: (1, {'@': 335}), 31: (1, {'@': 335}), 82: (1, {'@': 335}), 21: (1, {'@': 335}), 83: (1, {'@': 335}), 37: (1, {'@': 335}), 84: (1, {'@': 335}), 6: (1, {'@': 335}), 9: (1, {'@': 335}), 41: (1, {'@': 335}), 15: (1, {'@': 335}), 85: (1, {'@': 335}), 86: (1, {'@': 335}), 33: (1, {'@': 335}), 87: (1, {'@': 335}), 45: (1, {'@': 335}), 30: (1, {'@': 335}), 11: (1, {'@': 335}), 88: (1, {'@': 335}), 46: (1, {'@': 335}), 47: (1, {'@': 335}), 89: (1, {'@': 335}), 49: (1, {'@': 335}), 90: (1, {'@': 335}), 51: (1, {'@': 335}), 91: (1, {'@': 335}), 17: (1, {'@': 335}), 26: (1, {'@': 335}), 25: (1, {'@': 335}), 92: (1, {'@': 335}), 93: (1, {'@': 335}), 94: (1, {'@': 335}), 57: (1, {'@': 335}), 95: (1, {'@': 335}), 96: (1, {'@': 335}), 54: (1, {'@': 335}), 97: (1, {'@': 335}), 98: (1, {'@': 335}), 99: (1, {'@': 335}), 100: (1, {'@': 335}), 101: (1, {'@': 335}), 102: (1, {'@': 335}), 103: (1, {'@': 335}), 104: (1, {'@': 335}), 105: (1, {'@': 335}), 106: (1, {'@': 335}), 107: (1, {'@': 335}), 108: (1, {'@': 335}), 109: (1, {'@': 335})}, 177: {119: (0, 300), 48: (0, 196), 54: (0, 43), 5: (0, 203), 6: (0, 32), 7: (0, 186), 120: (0, 231), 121: (0, 30), 53: (0, 243), 8: (0, 276), 42: (0, 209), 44: (0, 156), 10: (0, 284), 122: (0, 285), 41: (0, 318), 2: (0, 137), 12: (0, 397), 123: (0, 134), 16: (0, 244), 114: (0, 364), 15: (0, 414), 35: (0, 31), 9: (0, 112), 21: (0, 256), 52: (0, 465), 20: (0, 415), 124: (0, 332), 125: (0, 334), 126: (0, 296), 60: (0, 408), 127: (0, 97), 25: (0, 409), 61: (0, 64), 19: (0, 545), 38: (0, 75), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 40: (0, 69), 128: (0, 60), 129: (0, 438), 130: (0, 27), 1: (0, 24), 0: (0, 36), 63: (0, 25), 4: (0, 50), 45: (0, 0), 3: (0, 255), 131: (0, 425), 132: (0, 72), 43: (0, 340), 133: (0, 89), 134: (0, 76), 65: (0, 85), 135: (0, 331), 11: (0, 399), 14: (0, 79), 13: (0, 453), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 137: (0, 513), 64: (0, 267), 23: (0, 70), 22: (0, 61), 136: (0, 317), 24: (0, 419), 56: (0, 456), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 138: (0, 449)}, 178: {93: (1, {'@': 113})}, 179: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 60: (0, 543), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 169: (0, 602), 9: (0, 112), 20: (0, 415), 21: (0, 256), 170: (0, 594), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 35: (0, 105), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 350), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 180: {119: (0, 300), 48: (0, 196), 54: (0, 43), 5: (0, 203), 6: (0, 32), 7: (0, 186), 120: (0, 231), 121: (0, 30), 53: (0, 243), 8: (0, 276), 42: (0, 209), 44: (0, 156), 10: (0, 284), 122: (0, 285), 41: (0, 318), 2: (0, 137), 12: (0, 397), 123: (0, 134), 16: (0, 244), 114: (0, 364), 15: (0, 414), 35: (0, 31), 9: (0, 112), 21: (0, 256), 52: (0, 465), 20: (0, 415), 124: (0, 332), 125: (0, 334), 126: (0, 296), 60: (0, 408), 127: (0, 97), 25: (0, 409), 61: (0, 64), 19: (0, 545), 38: (0, 75), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 40: (0, 69), 128: (0, 60), 129: (0, 438), 130: (0, 27), 1: (0, 24), 0: (0, 36), 63: (0, 25), 4: (0, 50), 45: (0, 0), 3: (0, 255), 131: (0, 425), 132: (0, 72), 43: (0, 340), 133: (0, 89), 134: (0, 76), 65: (0, 85), 135: (0, 331), 11: (0, 399), 14: (0, 79), 13: (0, 453), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 64: (0, 267), 23: (0, 70), 22: (0, 61), 136: (0, 317), 24: (0, 419), 56: (0, 456), 137: (0, 303), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 138: (0, 449)}, 181: {19: (0, 278), 118: (0, 138), 82: (1, {'@': 341}), 89: (1, {'@': 341}), 45: (1, {'@': 341}), 99: (1, {'@': 341}), 100: (1, {'@': 341}), 101: (1, {'@': 341}), 78: (1, {'@': 341}), 36: (1, {'@': 341}), 102: (1, {'@': 341}), 90: (1, {'@': 341}), 10: (1, {'@': 341}), 91: (1, {'@': 341}), 103: (1, {'@': 341}), 104: (1, {'@': 341}), 25: (1, {'@': 341}), 92: (1, {'@': 341}), 9: (1, {'@': 341}), 39: (1, {'@': 341}), 72: (1, {'@': 341}), 95: (1, {'@': 341}), 80: (1, {'@': 341}), 81: (1, {'@': 341}), 105: (1, {'@': 341}), 106: (1, {'@': 341}), 74: (1, {'@': 341}), 107: (1, {'@': 341}), 75: (1, {'@': 341}), 22: (1, {'@': 341})}, 182: {119: (0, 127), 48: (0, 196), 171: (0, 201), 5: (0, 203), 172: (0, 208), 42: (0, 209), 173: (0, 275), 10: (0, 284), 122: (0, 285), 41: (0, 318), 49: (0, 282), 2: (0, 137), 16: (0, 244), 55: (0, 241), 35: (0, 235), 9: (0, 112), 21: (0, 256), 7: (0, 186), 126: (0, 296), 174: (0, 266), 175: (0, 323), 123: (0, 134), 127: (0, 97), 50: (0, 78), 61: (0, 64), 54: (0, 43), 38: (0, 75), 46: (0, 56), 26: (0, 3), 140: (0, 13), 29: (0, 10), 129: (0, 19), 40: (0, 69), 128: (0, 60), 130: (0, 27), 37: (0, 15), 1: (0, 24), 63: (0, 25), 4: (0, 50), 45: (0, 0), 132: (0, 72), 133: (0, 89), 134: (0, 76), 65: (0, 85), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 39: (0, 34), 0: (0, 36), 23: (0, 70), 22: (0, 61), 136: (0, 317), 47: (0, 5), 176: (0, 1), 3: (0, 255), 30: (0, 225), 32: (0, 146), 64: (0, 267), 177: (0, 299), 178: (0, 90), 6: (0, 32), 120: (0, 231), 121: (0, 30), 53: (0, 243), 8: (0, 276), 44: (0, 156), 179: (0, 339), 12: (0, 397), 114: (0, 364), 15: (0, 414), 52: (0, 436), 180: (0, 401), 20: (0, 415), 124: (0, 332), 125: (0, 334), 60: (0, 408), 25: (0, 409), 19: (0, 545), 181: (0, 77), 182: (0, 101), 27: (0, 66), 36: (0, 102), 183: (0, 113), 33: (0, 497), 131: (0, 425), 43: (0, 340), 184: (0, 358), 135: (0, 331), 11: (0, 399), 13: (0, 453), 185: (0, 422), 18: (0, 558), 24: (0, 419), 56: (0, 456), 28: (0, 572), 31: (0, 533), 34: (0, 521), 138: (0, 449), 51: (1, {'@': 88})}, 183: {93: (1, {'@': 97})}, 184: {119: (0, 574), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 114: (0, 364), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 45: (0, 0), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 64: (0, 267)}, 185: {93: (1, {'@': 412})}, 186: {19: (0, 250), 81: (0, 310), 90: (0, 283), 9: (0, 305), 1: (1, {'@': 324}), 69: (1, {'@': 324}), 36: (1, {'@': 324}), 70: (1, {'@': 324}), 38: (1, {'@': 324}), 71: (1, {'@': 324}), 2: (1, {'@': 324}), 18: (1, {'@': 324}), 39: (1, {'@': 324}), 40: (1, {'@': 324}), 72: (1, {'@': 324}), 58: (1, {'@': 324}), 20: (1, {'@': 324}), 73: (1, {'@': 324}), 42: (1, {'@': 324}), 74: (1, {'@': 324}), 43: (1, {'@': 324}), 75: (1, {'@': 324}), 44: (1, {'@': 324}), 22: (1, {'@': 324}), 76: (1, {'@': 324}), 48: (1, {'@': 324}), 77: (1, {'@': 324}), 78: (1, {'@': 324}), 50: (1, {'@': 324}), 10: (1, {'@': 324}), 68: (1, {'@': 324}), 52: (1, {'@': 324}), 79: (1, {'@': 324}), 53: (1, {'@': 324}), 80: (1, {'@': 324}), 23: (1, {'@': 324}), 55: (1, {'@': 324}), 56: (1, {'@': 324}), 31: (1, {'@': 324}), 82: (1, {'@': 324}), 21: (1, {'@': 324}), 83: (1, {'@': 324}), 37: (1, {'@': 324}), 84: (1, {'@': 324}), 6: (1, {'@': 324}), 41: (1, {'@': 324}), 15: (1, {'@': 324}), 85: (1, {'@': 324}), 86: (1, {'@': 324}), 33: (1, {'@': 324}), 87: (1, {'@': 324}), 45: (1, {'@': 324}), 30: (1, {'@': 324}), 11: (1, {'@': 324}), 88: (1, {'@': 324}), 46: (1, {'@': 324}), 47: (1, {'@': 324}), 89: (1, {'@': 324}), 49: (1, {'@': 324}), 51: (1, {'@': 324}), 91: (1, {'@': 324}), 17: (1, {'@': 324}), 26: (1, {'@': 324}), 25: (1, {'@': 324}), 92: (1, {'@': 324}), 93: (1, {'@': 324}), 94: (1, {'@': 324}), 57: (1, {'@': 324}), 95: (1, {'@': 324}), 96: (1, {'@': 324}), 54: (1, {'@': 324}), 97: (1, {'@': 324}), 98: (1, {'@': 324}), 99: (1, {'@': 324}), 100: (1, {'@': 324}), 101: (1, {'@': 324}), 102: (1, {'@': 324}), 103: (1, {'@': 324}), 104: (1, {'@': 324}), 105: (1, {'@': 324}), 106: (1, {'@': 324}), 107: (1, {'@': 324}), 108: (1, {'@': 324}), 109: (1, {'@': 324})}, 187: {0: (0, 36), 1: (0, 24), 2: (0, 137), 63: (0, 25), 3: (0, 255), 4: (0, 50), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 66: (0, 431), 15: (0, 414), 16: (0, 244), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 26: (0, 3), 27: (0, 66), 61: (0, 365), 28: (0, 572), 36: (0, 102), 30: (0, 225), 31: (0, 533), 29: (0, 10), 32: (0, 146), 34: (0, 521), 33: (0, 497), 35: (0, 105)}, 188: {31: (1, {'@': 91}), 21: (1, {'@': 91}), 1: (1, {'@': 91}), 36: (1, {'@': 91}), 37: (1, {'@': 91}), 38: (1, {'@': 91}), 6: (1, {'@': 91}), 2: (1, {'@': 91}), 18: (1, {'@': 91}), 9: (1, {'@': 91}), 39: (1, {'@': 91}), 40: (1, {'@': 91}), 41: (1, {'@': 91}), 15: (1, {'@': 91}), 20: (1, {'@': 91}), 33: (1, {'@': 91}), 42: (1, {'@': 91}), 43: (1, {'@': 91}), 44: (1, {'@': 91}), 45: (1, {'@': 91}), 30: (1, {'@': 91}), 22: (1, {'@': 91}), 11: (1, {'@': 91}), 46: (1, {'@': 91}), 47: (1, {'@': 91}), 48: (1, {'@': 91}), 49: (1, {'@': 91}), 50: (1, {'@': 91}), 10: (1, {'@': 91}), 51: (1, {'@': 91}), 17: (1, {'@': 91}), 26: (1, {'@': 91}), 25: (1, {'@': 91}), 52: (1, {'@': 91}), 53: (1, {'@': 91}), 23: (1, {'@': 91}), 54: (1, {'@': 91}), 55: (1, {'@': 91}), 56: (1, {'@': 91}), 19: (1, {'@': 91}), 57: (1, {'@': 91})}, 189: {119: (0, 127), 48: (0, 196), 171: (0, 201), 5: (0, 203), 172: (0, 208), 42: (0, 209), 10: (0, 284), 122: (0, 285), 41: (0, 318), 49: (0, 282), 2: (0, 137), 16: (0, 244), 55: (0, 241), 35: (0, 235), 9: (0, 112), 21: (0, 256), 7: (0, 186), 126: (0, 296), 174: (0, 266), 175: (0, 323), 123: (0, 134), 127: (0, 97), 50: (0, 78), 61: (0, 64), 54: (0, 43), 38: (0, 75), 46: (0, 56), 26: (0, 3), 140: (0, 13), 186: (0, 424), 29: (0, 10), 129: (0, 19), 40: (0, 69), 128: (0, 60), 130: (0, 27), 37: (0, 15), 1: (0, 24), 63: (0, 25), 4: (0, 50), 45: (0, 0), 132: (0, 72), 133: (0, 89), 134: (0, 76), 65: (0, 85), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 39: (0, 34), 185: (0, 395), 0: (0, 36), 23: (0, 70), 22: (0, 61), 136: (0, 317), 47: (0, 5), 176: (0, 1), 3: (0, 255), 30: (0, 225), 32: (0, 146), 64: (0, 267), 177: (0, 299), 178: (0, 90), 6: (0, 32), 120: (0, 231), 121: (0, 30), 53: (0, 243), 8: (0, 276), 44: (0, 156), 179: (0, 339), 12: (0, 397), 114: (0, 364), 15: (0, 414), 20: (0, 415), 124: (0, 332), 125: (0, 334), 60: (0, 408), 25: (0, 409), 19: (0, 545), 181: (0, 77), 182: (0, 101), 27: (0, 66), 36: (0, 102), 183: (0, 113), 33: (0, 497), 131: (0, 425), 43: (0, 340), 184: (0, 358), 135: (0, 331), 11: (0, 399), 13: (0, 453), 18: (0, 558), 24: (0, 419), 56: (0, 456), 28: (0, 572), 31: (0, 533), 34: (0, 521), 138: (0, 449)}, 190: {25: (1, {'@': 269})}, 191: {31: (1, {'@': 320}), 21: (1, {'@': 320}), 1: (1, {'@': 320}), 6: (1, {'@': 320}), 2: (1, {'@': 320}), 18: (1, {'@': 320}), 9: (1, {'@': 320}), 15: (1, {'@': 320}), 20: (1, {'@': 320}), 33: (1, {'@': 320}), 30: (1, {'@': 320}), 22: (1, {'@': 320}), 11: (1, {'@': 320}), 10: (1, {'@': 320}), 17: (1, {'@': 320}), 26: (1, {'@': 320}), 25: (1, {'@': 320}), 23: (1, {'@': 320}), 19: (1, {'@': 320})}, 192: {58: (1, {'@': 460}), 52: (1, {'@': 460}), 93: (1, {'@': 460}), 84: (1, {'@': 460})}, 193: {84: (0, 557), 187: (0, 230), 93: (1, {'@': 112})}, 194: {0: (0, 36), 1: (0, 24), 2: (0, 137), 63: (0, 25), 3: (0, 255), 4: (0, 50), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 66: (0, 431), 15: (0, 414), 16: (0, 244), 61: (0, 271), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 26: (0, 3), 27: (0, 66), 28: (0, 572), 36: (0, 102), 30: (0, 225), 31: (0, 533), 29: (0, 10), 32: (0, 146), 34: (0, 521), 33: (0, 497), 35: (0, 105)}, 195: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 62: (0, 552), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 64: (0, 550), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 188: (0, 413), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 52: (0, 599)}, 196: {25: (0, 409), 35: (0, 114)}, 197: {31: (1, {'@': 316}), 21: (1, {'@': 316}), 1: (1, {'@': 316}), 6: (1, {'@': 316}), 2: (1, {'@': 316}), 18: (1, {'@': 316}), 9: (1, {'@': 316}), 15: (1, {'@': 316}), 20: (1, {'@': 316}), 33: (1, {'@': 316}), 30: (1, {'@': 316}), 22: (1, {'@': 316}), 11: (1, {'@': 316}), 10: (1, {'@': 316}), 17: (1, {'@': 316}), 26: (1, {'@': 316}), 25: (1, {'@': 316}), 23: (1, {'@': 316}), 19: (1, {'@': 316})}, 198: {1: (1, {'@': 323}), 69: (1, {'@': 323}), 36: (1, {'@': 323}), 70: (1, {'@': 323}), 38: (1, {'@': 323}), 71: (1, {'@': 323}), 2: (1, {'@': 323}), 18: (1, {'@': 323}), 39: (1, {'@': 323}), 40: (1, {'@': 323}), 72: (1, {'@': 323}), 58: (1, {'@': 323}), 20: (1, {'@': 323}), 73: (1, {'@': 323}), 42: (1, {'@': 323}), 74: (1, {'@': 323}), 43: (1, {'@': 323}), 75: (1, {'@': 323}), 44: (1, {'@': 323}), 22: (1, {'@': 323}), 76: (1, {'@': 323}), 48: (1, {'@': 323}), 77: (1, {'@': 323}), 78: (1, {'@': 323}), 50: (1, {'@': 323}), 10: (1, {'@': 323}), 68: (1, {'@': 323}), 52: (1, {'@': 323}), 79: (1, {'@': 323}), 53: (1, {'@': 323}), 80: (1, {'@': 323}), 23: (1, {'@': 323}), 55: (1, {'@': 323}), 56: (1, {'@': 323}), 19: (1, {'@': 323}), 31: (1, {'@': 323}), 82: (1, {'@': 323}), 21: (1, {'@': 323}), 83: (1, {'@': 323}), 37: (1, {'@': 323}), 84: (1, {'@': 323}), 6: (1, {'@': 323}), 9: (1, {'@': 323}), 41: (1, {'@': 323}), 15: (1, {'@': 323}), 85: (1, {'@': 323}), 86: (1, {'@': 323}), 33: (1, {'@': 323}), 87: (1, {'@': 323}), 45: (1, {'@': 323}), 30: (1, {'@': 323}), 11: (1, {'@': 323}), 88: (1, {'@': 323}), 46: (1, {'@': 323}), 47: (1, {'@': 323}), 89: (1, {'@': 323}), 49: (1, {'@': 323}), 51: (1, {'@': 323}), 91: (1, {'@': 323}), 17: (1, {'@': 323}), 26: (1, {'@': 323}), 25: (1, {'@': 323}), 92: (1, {'@': 323}), 93: (1, {'@': 323}), 94: (1, {'@': 323}), 57: (1, {'@': 323}), 95: (1, {'@': 323}), 96: (1, {'@': 323}), 54: (1, {'@': 323}), 97: (1, {'@': 323}), 98: (1, {'@': 323}), 99: (1, {'@': 323}), 100: (1, {'@': 323}), 101: (1, {'@': 323}), 102: (1, {'@': 323}), 103: (1, {'@': 323}), 104: (1, {'@': 323}), 105: (1, {'@': 323}), 106: (1, {'@': 323}), 107: (1, {'@': 323}), 108: (1, {'@': 323}), 109: (1, {'@': 323})}, 199: {1: (1, {'@': 268}), 36: (1, {'@': 268}), 38: (1, {'@': 268}), 2: (1, {'@': 268}), 18: (1, {'@': 268}), 39: (1, {'@': 268}), 40: (1, {'@': 268}), 20: (1, {'@': 268}), 42: (1, {'@': 268}), 43: (1, {'@': 268}), 44: (1, {'@': 268}), 22: (1, {'@': 268}), 48: (1, {'@': 268}), 50: (1, {'@': 268}), 10: (1, {'@': 268}), 52: (1, {'@': 268}), 53: (1, {'@': 268}), 23: (1, {'@': 268}), 55: (1, {'@': 268}), 56: (1, {'@': 268}), 19: (1, {'@': 268}), 31: (1, {'@': 268}), 21: (1, {'@': 268}), 37: (1, {'@': 268}), 6: (1, {'@': 268}), 9: (1, {'@': 268}), 41: (1, {'@': 268}), 15: (1, {'@': 268}), 33: (1, {'@': 268}), 45: (1, {'@': 268}), 30: (1, {'@': 268}), 11: (1, {'@': 268}), 46: (1, {'@': 268}), 47: (1, {'@': 268}), 49: (1, {'@': 268}), 51: (1, {'@': 268}), 17: (1, {'@': 268}), 26: (1, {'@': 268}), 25: (1, {'@': 268}), 57: (1, {'@': 268}), 54: (1, {'@': 268}), 108: (1, {'@': 268}), 112: (1, {'@': 268})}, 200: {84: (1, {'@': 131}), 93: (1, {'@': 131}), 77: (1, {'@': 131})}, 201: {31: (1, {'@': 241}), 21: (1, {'@': 241}), 1: (1, {'@': 241}), 36: (1, {'@': 241}), 37: (1, {'@': 241}), 38: (1, {'@': 241}), 6: (1, {'@': 241}), 2: (1, {'@': 241}), 18: (1, {'@': 241}), 9: (1, {'@': 241}), 39: (1, {'@': 241}), 40: (1, {'@': 241}), 41: (1, {'@': 241}), 15: (1, {'@': 241}), 20: (1, {'@': 241}), 33: (1, {'@': 241}), 42: (1, {'@': 241}), 43: (1, {'@': 241}), 44: (1, {'@': 241}), 45: (1, {'@': 241}), 30: (1, {'@': 241}), 22: (1, {'@': 241}), 11: (1, {'@': 241}), 46: (1, {'@': 241}), 47: (1, {'@': 241}), 48: (1, {'@': 241}), 49: (1, {'@': 241}), 50: (1, {'@': 241}), 10: (1, {'@': 241}), 51: (1, {'@': 241}), 17: (1, {'@': 241}), 26: (1, {'@': 241}), 25: (1, {'@': 241}), 52: (1, {'@': 241}), 53: (1, {'@': 241}), 23: (1, {'@': 241}), 54: (1, {'@': 241}), 55: (1, {'@': 241}), 56: (1, {'@': 241}), 19: (1, {'@': 241}), 57: (1, {'@': 241})}, 202: {68: (0, 359)}, 203: {146: (0, 293), 92: (0, 108), 189: (0, 87), 75: (0, 174), 1: (1, {'@': 294}), 69: (1, {'@': 294}), 36: (1, {'@': 294}), 70: (1, {'@': 294}), 38: (1, {'@': 294}), 71: (1, {'@': 294}), 2: (1, {'@': 294}), 18: (1, {'@': 294}), 39: (1, {'@': 294}), 40: (1, {'@': 294}), 58: (1, {'@': 294}), 20: (1, {'@': 294}), 73: (1, {'@': 294}), 42: (1, {'@': 294}), 74: (1, {'@': 294}), 43: (1, {'@': 294}), 44: (1, {'@': 294}), 22: (1, {'@': 294}), 76: (1, {'@': 294}), 48: (1, {'@': 294}), 77: (1, {'@': 294}), 50: (1, {'@': 294}), 10: (1, {'@': 294}), 68: (1, {'@': 294}), 52: (1, {'@': 294}), 79: (1, {'@': 294}), 53: (1, {'@': 294}), 80: (1, {'@': 294}), 23: (1, {'@': 294}), 55: (1, {'@': 294}), 56: (1, {'@': 294}), 19: (1, {'@': 294}), 31: (1, {'@': 294}), 21: (1, {'@': 294}), 83: (1, {'@': 294}), 37: (1, {'@': 294}), 84: (1, {'@': 294}), 6: (1, {'@': 294}), 9: (1, {'@': 294}), 41: (1, {'@': 294}), 15: (1, {'@': 294}), 85: (1, {'@': 294}), 86: (1, {'@': 294}), 33: (1, {'@': 294}), 87: (1, {'@': 294}), 45: (1, {'@': 294}), 30: (1, {'@': 294}), 11: (1, {'@': 294}), 88: (1, {'@': 294}), 46: (1, {'@': 294}), 47: (1, {'@': 294}), 89: (1, {'@': 294}), 49: (1, {'@': 294}), 51: (1, {'@': 294}), 91: (1, {'@': 294}), 17: (1, {'@': 294}), 26: (1, {'@': 294}), 25: (1, {'@': 294}), 93: (1, {'@': 294}), 94: (1, {'@': 294}), 57: (1, {'@': 294}), 96: (1, {'@': 294}), 54: (1, {'@': 294}), 97: (1, {'@': 294}), 98: (1, {'@': 294}), 99: (1, {'@': 294}), 100: (1, {'@': 294}), 101: (1, {'@': 294}), 102: (1, {'@': 294}), 103: (1, {'@': 294}), 104: (1, {'@': 294}), 105: (1, {'@': 294}), 106: (1, {'@': 294}), 107: (1, {'@': 294}), 108: (1, {'@': 294}), 109: (1, {'@': 294})}, 204: {190: (0, 442), 84: (0, 347), 58: (1, {'@': 229}), 52: (1, {'@': 229})}, 205: {119: (0, 300), 48: (0, 196), 54: (0, 43), 5: (0, 203), 6: (0, 32), 7: (0, 186), 120: (0, 231), 121: (0, 30), 53: (0, 243), 8: (0, 276), 42: (0, 209), 44: (0, 156), 10: (0, 284), 122: (0, 285), 41: (0, 318), 2: (0, 137), 12: (0, 397), 123: (0, 134), 16: (0, 244), 114: (0, 364), 15: (0, 414), 35: (0, 31), 9: (0, 112), 21: (0, 256), 52: (0, 465), 20: (0, 415), 124: (0, 332), 125: (0, 334), 126: (0, 296), 60: (0, 408), 127: (0, 97), 25: (0, 409), 61: (0, 64), 19: (0, 545), 137: (0, 173), 38: (0, 75), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 40: (0, 69), 128: (0, 60), 129: (0, 438), 130: (0, 27), 1: (0, 24), 0: (0, 36), 63: (0, 25), 4: (0, 50), 45: (0, 0), 3: (0, 255), 131: (0, 425), 132: (0, 72), 43: (0, 340), 133: (0, 89), 134: (0, 76), 65: (0, 85), 135: (0, 331), 11: (0, 399), 14: (0, 79), 13: (0, 453), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 64: (0, 267), 23: (0, 70), 22: (0, 61), 136: (0, 317), 24: (0, 419), 56: (0, 456), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 138: (0, 449)}, 206: {103: (0, 421), 25: (1, {'@': 279}), 39: (1, {'@': 279}), 107: (1, {'@': 279}), 68: (1, {'@': 279}), 52: (1, {'@': 279}), 58: (1, {'@': 279}), 84: (1, {'@': 279}), 83: (1, {'@': 279}), 69: (1, {'@': 279}), 77: (1, {'@': 279}), 70: (1, {'@': 279}), 71: (1, {'@': 279}), 94: (1, {'@': 279}), 79: (1, {'@': 279}), 85: (1, {'@': 279}), 86: (1, {'@': 279}), 73: (1, {'@': 279}), 96: (1, {'@': 279}), 87: (1, {'@': 279}), 98: (1, {'@': 279}), 88: (1, {'@': 279}), 31: (1, {'@': 279}), 21: (1, {'@': 279}), 1: (1, {'@': 279}), 36: (1, {'@': 279}), 37: (1, {'@': 279}), 38: (1, {'@': 279}), 6: (1, {'@': 279}), 2: (1, {'@': 279}), 18: (1, {'@': 279}), 9: (1, {'@': 279}), 40: (1, {'@': 279}), 41: (1, {'@': 279}), 15: (1, {'@': 279}), 20: (1, {'@': 279}), 33: (1, {'@': 279}), 42: (1, {'@': 279}), 43: (1, {'@': 279}), 44: (1, {'@': 279}), 45: (1, {'@': 279}), 30: (1, {'@': 279}), 22: (1, {'@': 279}), 11: (1, {'@': 279}), 46: (1, {'@': 279}), 47: (1, {'@': 279}), 48: (1, {'@': 279}), 49: (1, {'@': 279}), 50: (1, {'@': 279}), 10: (1, {'@': 279}), 51: (1, {'@': 279}), 17: (1, {'@': 279}), 26: (1, {'@': 279}), 53: (1, {'@': 279}), 57: (1, {'@': 279}), 23: (1, {'@': 279}), 54: (1, {'@': 279}), 55: (1, {'@': 279}), 56: (1, {'@': 279}), 19: (1, {'@': 279}), 97: (1, {'@': 279}), 76: (1, {'@': 279}), 109: (1, {'@': 279}), 93: (1, {'@': 279}), 108: (1, {'@': 279})}, 207: {0: (0, 36), 1: (0, 24), 2: (0, 137), 4: (0, 50), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 15: (0, 414), 17: (0, 7), 16: (0, 601), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 26: (0, 3), 27: (0, 66), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 35: (0, 105)}, 208: {31: (1, {'@': 246}), 21: (1, {'@': 246}), 1: (1, {'@': 246}), 36: (1, {'@': 246}), 37: (1, {'@': 246}), 38: (1, {'@': 246}), 6: (1, {'@': 246}), 2: (1, {'@': 246}), 18: (1, {'@': 246}), 9: (1, {'@': 246}), 39: (1, {'@': 246}), 40: (1, {'@': 246}), 41: (1, {'@': 246}), 15: (1, {'@': 246}), 20: (1, {'@': 246}), 33: (1, {'@': 246}), 42: (1, {'@': 246}), 43: (1, {'@': 246}), 44: (1, {'@': 246}), 45: (1, {'@': 246}), 30: (1, {'@': 246}), 22: (1, {'@': 246}), 11: (1, {'@': 246}), 46: (1, {'@': 246}), 47: (1, {'@': 246}), 48: (1, {'@': 246}), 49: (1, {'@': 246}), 50: (1, {'@': 246}), 10: (1, {'@': 246}), 51: (1, {'@': 246}), 17: (1, {'@': 246}), 26: (1, {'@': 246}), 25: (1, {'@': 246}), 52: (1, {'@': 246}), 53: (1, {'@': 246}), 23: (1, {'@': 246}), 54: (1, {'@': 246}), 55: (1, {'@': 246}), 56: (1, {'@': 246}), 19: (1, {'@': 246}), 57: (1, {'@': 246})}, 209: {58: (1, {'@': 204}), 52: (1, {'@': 204})}, 210: {80: (1, {'@': 285}), 84: (1, {'@': 285}), 83: (1, {'@': 285}), 69: (1, {'@': 285}), 77: (1, {'@': 285}), 70: (1, {'@': 285}), 71: (1, {'@': 285}), 52: (1, {'@': 285}), 94: (1, {'@': 285}), 79: (1, {'@': 285}), 85: (1, {'@': 285}), 58: (1, {'@': 285}), 86: (1, {'@': 285}), 73: (1, {'@': 285}), 96: (1, {'@': 285}), 87: (1, {'@': 285}), 98: (1, {'@': 285}), 88: (1, {'@': 285}), 31: (1, {'@': 285}), 21: (1, {'@': 285}), 1: (1, {'@': 285}), 36: (1, {'@': 285}), 37: (1, {'@': 285}), 38: (1, {'@': 285}), 6: (1, {'@': 285}), 2: (1, {'@': 285}), 18: (1, {'@': 285}), 9: (1, {'@': 285}), 39: (1, {'@': 285}), 40: (1, {'@': 285}), 41: (1, {'@': 285}), 15: (1, {'@': 285}), 20: (1, {'@': 285}), 33: (1, {'@': 285}), 42: (1, {'@': 285}), 43: (1, {'@': 285}), 44: (1, {'@': 285}), 45: (1, {'@': 285}), 30: (1, {'@': 285}), 22: (1, {'@': 285}), 11: (1, {'@': 285}), 46: (1, {'@': 285}), 47: (1, {'@': 285}), 48: (1, {'@': 285}), 49: (1, {'@': 285}), 50: (1, {'@': 285}), 10: (1, {'@': 285}), 51: (1, {'@': 285}), 17: (1, {'@': 285}), 26: (1, {'@': 285}), 25: (1, {'@': 285}), 53: (1, {'@': 285}), 57: (1, {'@': 285}), 23: (1, {'@': 285}), 54: (1, {'@': 285}), 55: (1, {'@': 285}), 56: (1, {'@': 285}), 19: (1, {'@': 285}), 97: (1, {'@': 285}), 76: (1, {'@': 285}), 68: (1, {'@': 285}), 93: (1, {'@': 285})}, 211: {93: (1, {'@': 127})}, 212: {31: (1, {'@': 468}), 21: (1, {'@': 468}), 1: (1, {'@': 468}), 36: (1, {'@': 468}), 37: (1, {'@': 468}), 38: (1, {'@': 468}), 6: (1, {'@': 468}), 2: (1, {'@': 468}), 18: (1, {'@': 468}), 9: (1, {'@': 468}), 39: (1, {'@': 468}), 40: (1, {'@': 468}), 41: (1, {'@': 468}), 15: (1, {'@': 468}), 20: (1, {'@': 468}), 108: (1, {'@': 468}), 33: (1, {'@': 468}), 42: (1, {'@': 468}), 43: (1, {'@': 468}), 44: (1, {'@': 468}), 45: (1, {'@': 468}), 30: (1, {'@': 468}), 22: (1, {'@': 468}), 11: (1, {'@': 468}), 46: (1, {'@': 468}), 47: (1, {'@': 468}), 48: (1, {'@': 468}), 49: (1, {'@': 468}), 50: (1, {'@': 468}), 10: (1, {'@': 468}), 51: (1, {'@': 468}), 17: (1, {'@': 468}), 26: (1, {'@': 468}), 25: (1, {'@': 468}), 52: (1, {'@': 468}), 112: (1, {'@': 468}), 53: (1, {'@': 468}), 57: (1, {'@': 468}), 23: (1, {'@': 468}), 54: (1, {'@': 468}), 55: (1, {'@': 468}), 56: (1, {'@': 468}), 19: (1, {'@': 468})}, 213: {108: (0, 239), 31: (1, {'@': 255}), 21: (1, {'@': 255}), 1: (1, {'@': 255}), 36: (1, {'@': 255}), 37: (1, {'@': 255}), 38: (1, {'@': 255}), 6: (1, {'@': 255}), 2: (1, {'@': 255}), 18: (1, {'@': 255}), 9: (1, {'@': 255}), 39: (1, {'@': 255}), 40: (1, {'@': 255}), 41: (1, {'@': 255}), 15: (1, {'@': 255}), 20: (1, {'@': 255}), 33: (1, {'@': 255}), 42: (1, {'@': 255}), 43: (1, {'@': 255}), 44: (1, {'@': 255}), 45: (1, {'@': 255}), 30: (1, {'@': 255}), 22: (1, {'@': 255}), 11: (1, {'@': 255}), 46: (1, {'@': 255}), 47: (1, {'@': 255}), 48: (1, {'@': 255}), 49: (1, {'@': 255}), 50: (1, {'@': 255}), 10: (1, {'@': 255}), 51: (1, {'@': 255}), 17: (1, {'@': 255}), 26: (1, {'@': 255}), 25: (1, {'@': 255}), 52: (1, {'@': 255}), 53: (1, {'@': 255}), 23: (1, {'@': 255}), 54: (1, {'@': 255}), 55: (1, {'@': 255}), 56: (1, {'@': 255}), 19: (1, {'@': 255}), 57: (1, {'@': 255})}, 214: {25: (1, {'@': 274}), 68: (1, {'@': 274}), 52: (1, {'@': 274}), 58: (1, {'@': 274}), 84: (1, {'@': 274}), 83: (1, {'@': 274}), 69: (1, {'@': 274}), 77: (1, {'@': 274}), 70: (1, {'@': 274}), 71: (1, {'@': 274}), 94: (1, {'@': 274}), 79: (1, {'@': 274}), 85: (1, {'@': 274}), 86: (1, {'@': 274}), 73: (1, {'@': 274}), 96: (1, {'@': 274}), 87: (1, {'@': 274}), 98: (1, {'@': 274}), 88: (1, {'@': 274}), 31: (1, {'@': 274}), 21: (1, {'@': 274}), 1: (1, {'@': 274}), 36: (1, {'@': 274}), 37: (1, {'@': 274}), 38: (1, {'@': 274}), 6: (1, {'@': 274}), 2: (1, {'@': 274}), 18: (1, {'@': 274}), 9: (1, {'@': 274}), 39: (1, {'@': 274}), 40: (1, {'@': 274}), 41: (1, {'@': 274}), 15: (1, {'@': 274}), 20: (1, {'@': 274}), 33: (1, {'@': 274}), 42: (1, {'@': 274}), 43: (1, {'@': 274}), 44: (1, {'@': 274}), 45: (1, {'@': 274}), 30: (1, {'@': 274}), 22: (1, {'@': 274}), 11: (1, {'@': 274}), 46: (1, {'@': 274}), 47: (1, {'@': 274}), 48: (1, {'@': 274}), 49: (1, {'@': 274}), 50: (1, {'@': 274}), 10: (1, {'@': 274}), 51: (1, {'@': 274}), 17: (1, {'@': 274}), 26: (1, {'@': 274}), 53: (1, {'@': 274}), 57: (1, {'@': 274}), 23: (1, {'@': 274}), 54: (1, {'@': 274}), 55: (1, {'@': 274}), 56: (1, {'@': 274}), 19: (1, {'@': 274}), 97: (1, {'@': 274}), 76: (1, {'@': 274}), 109: (1, {'@': 274}), 93: (1, {'@': 274})}, 215: {0: (0, 36), 1: (0, 24), 2: (0, 137), 3: (0, 255), 4: (0, 50), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 15: (0, 414), 16: (0, 244), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 26: (0, 3), 27: (0, 66), 28: (0, 572), 29: (0, 388), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 34: (0, 521), 35: (0, 105)}, 216: {168: (0, 390), 84: (0, 410), 80: (1, {'@': 371})}, 217: {31: (1, {'@': 166}), 21: (1, {'@': 166}), 1: (1, {'@': 166}), 36: (1, {'@': 166}), 37: (1, {'@': 166}), 38: (1, {'@': 166}), 6: (1, {'@': 166}), 2: (1, {'@': 166}), 18: (1, {'@': 166}), 9: (1, {'@': 166}), 39: (1, {'@': 166}), 40: (1, {'@': 166}), 41: (1, {'@': 166}), 15: (1, {'@': 166}), 20: (1, {'@': 166}), 33: (1, {'@': 166}), 42: (1, {'@': 166}), 43: (1, {'@': 166}), 44: (1, {'@': 166}), 45: (1, {'@': 166}), 30: (1, {'@': 166}), 22: (1, {'@': 166}), 11: (1, {'@': 166}), 46: (1, {'@': 166}), 47: (1, {'@': 166}), 48: (1, {'@': 166}), 49: (1, {'@': 166}), 50: (1, {'@': 166}), 10: (1, {'@': 166}), 51: (1, {'@': 166}), 17: (1, {'@': 166}), 26: (1, {'@': 166}), 25: (1, {'@': 166}), 52: (1, {'@': 166}), 53: (1, {'@': 166}), 57: (1, {'@': 166}), 23: (1, {'@': 166}), 54: (1, {'@': 166}), 55: (1, {'@': 166}), 56: (1, {'@': 166}), 19: (1, {'@': 166}), 108: (1, {'@': 166}), 112: (1, {'@': 166})}, 218: {68: (1, {'@': 149})}, 219: {31: (1, {'@': 191}), 21: (1, {'@': 191}), 1: (1, {'@': 191}), 36: (1, {'@': 191}), 6: (1, {'@': 191}), 2: (1, {'@': 191}), 18: (1, {'@': 191}), 9: (1, {'@': 191}), 15: (1, {'@': 191}), 20: (1, {'@': 191}), 33: (1, {'@': 191}), 43: (1, {'@': 191}), 30: (1, {'@': 191}), 22: (1, {'@': 191}), 11: (1, {'@': 191}), 10: (1, {'@': 191}), 17: (1, {'@': 191}), 26: (1, {'@': 191}), 25: (1, {'@': 191}), 23: (1, {'@': 191}), 19: (1, {'@': 191})}, 220: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 64: (0, 451), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 221: {76: (0, 74)}, 222: {25: (0, 409), 35: (0, 54)}, 223: {68: (0, 548)}, 224: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 60: (0, 543), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 9: (0, 112), 20: (0, 415), 21: (0, 256), 170: (0, 594), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 35: (0, 105), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 350), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 17: (0, 7), 18: (0, 558), 169: (0, 307), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 225: {1: (1, {'@': 432}), 69: (1, {'@': 432}), 36: (1, {'@': 432}), 70: (1, {'@': 432}), 38: (1, {'@': 432}), 71: (1, {'@': 432}), 2: (1, {'@': 432}), 18: (1, {'@': 432}), 39: (1, {'@': 432}), 40: (1, {'@': 432}), 72: (1, {'@': 432}), 58: (1, {'@': 432}), 20: (1, {'@': 432}), 73: (1, {'@': 432}), 42: (1, {'@': 432}), 74: (1, {'@': 432}), 43: (1, {'@': 432}), 75: (1, {'@': 432}), 44: (1, {'@': 432}), 22: (1, {'@': 432}), 76: (1, {'@': 432}), 48: (1, {'@': 432}), 77: (1, {'@': 432}), 78: (1, {'@': 432}), 50: (1, {'@': 432}), 10: (1, {'@': 432}), 68: (1, {'@': 432}), 52: (1, {'@': 432}), 79: (1, {'@': 432}), 53: (1, {'@': 432}), 80: (1, {'@': 432}), 81: (1, {'@': 432}), 23: (1, {'@': 432}), 55: (1, {'@': 432}), 56: (1, {'@': 432}), 19: (1, {'@': 432}), 31: (1, {'@': 432}), 82: (1, {'@': 432}), 21: (1, {'@': 432}), 83: (1, {'@': 432}), 37: (1, {'@': 432}), 84: (1, {'@': 432}), 6: (1, {'@': 432}), 9: (1, {'@': 432}), 41: (1, {'@': 432}), 15: (1, {'@': 432}), 85: (1, {'@': 432}), 86: (1, {'@': 432}), 33: (1, {'@': 432}), 87: (1, {'@': 432}), 45: (1, {'@': 432}), 30: (1, {'@': 432}), 11: (1, {'@': 432}), 88: (1, {'@': 432}), 46: (1, {'@': 432}), 47: (1, {'@': 432}), 89: (1, {'@': 432}), 49: (1, {'@': 432}), 90: (1, {'@': 432}), 51: (1, {'@': 432}), 91: (1, {'@': 432}), 17: (1, {'@': 432}), 26: (1, {'@': 432}), 25: (1, {'@': 432}), 92: (1, {'@': 432}), 93: (1, {'@': 432}), 94: (1, {'@': 432}), 57: (1, {'@': 432}), 95: (1, {'@': 432}), 96: (1, {'@': 432}), 54: (1, {'@': 432}), 97: (1, {'@': 432}), 98: (1, {'@': 432}), 99: (1, {'@': 432}), 100: (1, {'@': 432}), 101: (1, {'@': 432}), 102: (1, {'@': 432}), 103: (1, {'@': 432}), 104: (1, {'@': 432}), 105: (1, {'@': 432}), 106: (1, {'@': 432}), 107: (1, {'@': 432}), 108: (1, {'@': 432}), 109: (1, {'@': 432})}, 226: {58: (1, {'@': 205}), 52: (1, {'@': 205})}, 227: {97: (1, {'@': 135}), 93: (1, {'@': 135}), 76: (1, {'@': 135})}, 228: {31: (1, {'@': 311}), 21: (1, {'@': 311}), 1: (1, {'@': 311}), 6: (1, {'@': 311}), 2: (1, {'@': 311}), 18: (1, {'@': 311}), 9: (1, {'@': 311}), 15: (1, {'@': 311}), 20: (1, {'@': 311}), 33: (1, {'@': 311}), 30: (1, {'@': 311}), 22: (1, {'@': 311}), 11: (1, {'@': 311}), 10: (1, {'@': 311}), 17: (1, {'@': 311}), 26: (1, {'@': 311}), 25: (1, {'@': 311}), 23: (1, {'@': 311}), 19: (1, {'@': 311})}, 229: {1: (1, {'@': 340}), 69: (1, {'@': 340}), 36: (1, {'@': 340}), 70: (1, {'@': 340}), 38: (1, {'@': 340}), 71: (1, {'@': 340}), 2: (1, {'@': 340}), 18: (1, {'@': 340}), 39: (1, {'@': 340}), 40: (1, {'@': 340}), 72: (1, {'@': 340}), 58: (1, {'@': 340}), 20: (1, {'@': 340}), 73: (1, {'@': 340}), 42: (1, {'@': 340}), 74: (1, {'@': 340}), 43: (1, {'@': 340}), 75: (1, {'@': 340}), 44: (1, {'@': 340}), 22: (1, {'@': 340}), 76: (1, {'@': 340}), 48: (1, {'@': 340}), 77: (1, {'@': 340}), 78: (1, {'@': 340}), 50: (1, {'@': 340}), 10: (1, {'@': 340}), 68: (1, {'@': 340}), 52: (1, {'@': 340}), 79: (1, {'@': 340}), 53: (1, {'@': 340}), 80: (1, {'@': 340}), 81: (1, {'@': 340}), 23: (1, {'@': 340}), 55: (1, {'@': 340}), 56: (1, {'@': 340}), 19: (1, {'@': 340}), 31: (1, {'@': 340}), 82: (1, {'@': 340}), 21: (1, {'@': 340}), 83: (1, {'@': 340}), 37: (1, {'@': 340}), 84: (1, {'@': 340}), 6: (1, {'@': 340}), 9: (1, {'@': 340}), 41: (1, {'@': 340}), 15: (1, {'@': 340}), 85: (1, {'@': 340}), 86: (1, {'@': 340}), 33: (1, {'@': 340}), 87: (1, {'@': 340}), 45: (1, {'@': 340}), 30: (1, {'@': 340}), 11: (1, {'@': 340}), 88: (1, {'@': 340}), 46: (1, {'@': 340}), 47: (1, {'@': 340}), 89: (1, {'@': 340}), 49: (1, {'@': 340}), 90: (1, {'@': 340}), 51: (1, {'@': 340}), 91: (1, {'@': 340}), 17: (1, {'@': 340}), 26: (1, {'@': 340}), 25: (1, {'@': 340}), 92: (1, {'@': 340}), 93: (1, {'@': 340}), 94: (1, {'@': 340}), 57: (1, {'@': 340}), 95: (1, {'@': 340}), 96: (1, {'@': 340}), 54: (1, {'@': 340}), 97: (1, {'@': 340}), 98: (1, {'@': 340}), 99: (1, {'@': 340}), 100: (1, {'@': 340}), 101: (1, {'@': 340}), 102: (1, {'@': 340}), 103: (1, {'@': 340}), 104: (1, {'@': 340}), 105: (1, {'@': 340}), 106: (1, {'@': 340}), 107: (1, {'@': 340}), 108: (1, {'@': 340}), 109: (1, {'@': 340})}, 230: {84: (0, 145), 93: (1, {'@': 108})}, 231: {58: (1, {'@': 200}), 52: (1, {'@': 200})}, 232: {84: (0, 604), 158: (0, 370), 76: (1, {'@': 395})}, 233: {191: (0, 39), 64: (0, 115), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 192: (0, 477), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 234: {109: (0, 562), 93: (1, {'@': 221}), 84: (1, {'@': 221}), 52: (1, {'@': 221}), 58: (1, {'@': 221})}, 235: {193: (0, 110), 77: (0, 57), 90: (0, 245), 118: (0, 138), 25: (1, {'@': 231}), 82: (1, {'@': 341}), 99: (1, {'@': 341}), 100: (1, {'@': 341}), 101: (1, {'@': 341}), 36: (1, {'@': 341}), 83: (1, {'@': 341}), 69: (1, {'@': 341}), 102: (1, {'@': 341}), 84: (1, {'@': 341}), 103: (1, {'@': 341}), 70: (1, {'@': 341}), 71: (1, {'@': 341}), 9: (1, {'@': 341}), 39: (1, {'@': 341}), 72: (1, {'@': 341}), 85: (1, {'@': 341}), 58: (1, {'@': 341}), 106: (1, {'@': 341}), 86: (1, {'@': 341}), 73: (1, {'@': 341}), 87: (1, {'@': 341}), 74: (1, {'@': 341}), 107: (1, {'@': 341}), 45: (1, {'@': 341}), 75: (1, {'@': 341}), 22: (1, {'@': 341}), 88: (1, {'@': 341}), 89: (1, {'@': 341}), 78: (1, {'@': 341}), 10: (1, {'@': 341}), 91: (1, {'@': 341}), 104: (1, {'@': 341}), 68: (1, {'@': 341}), 52: (1, {'@': 341}), 92: (1, {'@': 341}), 94: (1, {'@': 341}), 79: (1, {'@': 341}), 95: (1, {'@': 341}), 80: (1, {'@': 341}), 81: (1, {'@': 341}), 105: (1, {'@': 341}), 96: (1, {'@': 341}), 98: (1, {'@': 341}), 19: (1, {'@': 341})}, 236: {25: (1, {'@': 458}), 53: (1, {'@': 458}), 90: (1, {'@': 458})}, 237: {84: (0, 132), 187: (0, 14), 93: (1, {'@': 100})}, 238: {119: (0, 300), 48: (0, 196), 54: (0, 43), 5: (0, 203), 6: (0, 32), 7: (0, 186), 120: (0, 231), 121: (0, 30), 53: (0, 243), 8: (0, 276), 42: (0, 209), 44: (0, 156), 10: (0, 284), 122: (0, 285), 41: (0, 318), 2: (0, 137), 12: (0, 397), 123: (0, 134), 16: (0, 244), 114: (0, 364), 15: (0, 414), 35: (0, 31), 9: (0, 112), 21: (0, 256), 52: (0, 465), 20: (0, 415), 124: (0, 332), 125: (0, 334), 126: (0, 296), 60: (0, 408), 127: (0, 97), 25: (0, 409), 61: (0, 64), 19: (0, 545), 38: (0, 75), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 40: (0, 69), 128: (0, 60), 129: (0, 438), 130: (0, 27), 1: (0, 24), 0: (0, 36), 63: (0, 25), 4: (0, 50), 45: (0, 0), 3: (0, 255), 131: (0, 425), 132: (0, 72), 43: (0, 340), 133: (0, 89), 134: (0, 76), 65: (0, 85), 135: (0, 331), 11: (0, 399), 14: (0, 79), 13: (0, 453), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 137: (0, 295), 22: (0, 61), 136: (0, 317), 24: (0, 419), 56: (0, 456), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 64: (0, 267), 138: (0, 449)}, 239: {68: (0, 35)}, 240: {93: (1, {'@': 109})}, 241: {194: (0, 262), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 64: (0, 309), 25: (0, 409), 61: (0, 64), 19: (0, 545), 195: (0, 257), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 242: {31: (1, {'@': 251}), 21: (1, {'@': 251}), 1: (1, {'@': 251}), 36: (1, {'@': 251}), 37: (1, {'@': 251}), 38: (1, {'@': 251}), 6: (1, {'@': 251}), 2: (1, {'@': 251}), 18: (1, {'@': 251}), 9: (1, {'@': 251}), 39: (1, {'@': 251}), 40: (1, {'@': 251}), 41: (1, {'@': 251}), 15: (1, {'@': 251}), 20: (1, {'@': 251}), 108: (1, {'@': 251}), 33: (1, {'@': 251}), 42: (1, {'@': 251}), 43: (1, {'@': 251}), 44: (1, {'@': 251}), 45: (1, {'@': 251}), 30: (1, {'@': 251}), 22: (1, {'@': 251}), 11: (1, {'@': 251}), 46: (1, {'@': 251}), 47: (1, {'@': 251}), 48: (1, {'@': 251}), 49: (1, {'@': 251}), 50: (1, {'@': 251}), 10: (1, {'@': 251}), 51: (1, {'@': 251}), 17: (1, {'@': 251}), 26: (1, {'@': 251}), 25: (1, {'@': 251}), 52: (1, {'@': 251}), 112: (1, {'@': 251}), 53: (1, {'@': 251}), 57: (1, {'@': 251}), 23: (1, {'@': 251}), 54: (1, {'@': 251}), 55: (1, {'@': 251}), 56: (1, {'@': 251}), 19: (1, {'@': 251})}, 243: {35: (0, 504), 196: (0, 204), 140: (0, 159), 25: (0, 409), 197: (0, 151)}, 244: {198: (0, 420), 74: (0, 341), 31: (1, {'@': 290}), 21: (1, {'@': 290}), 1: (1, {'@': 290}), 83: (1, {'@': 290}), 69: (1, {'@': 290}), 36: (1, {'@': 290}), 37: (1, {'@': 290}), 84: (1, {'@': 290}), 70: (1, {'@': 290}), 38: (1, {'@': 290}), 71: (1, {'@': 290}), 6: (1, {'@': 290}), 2: (1, {'@': 290}), 18: (1, {'@': 290}), 9: (1, {'@': 290}), 39: (1, {'@': 290}), 40: (1, {'@': 290}), 41: (1, {'@': 290}), 15: (1, {'@': 290}), 85: (1, {'@': 290}), 58: (1, {'@': 290}), 20: (1, {'@': 290}), 86: (1, {'@': 290}), 33: (1, {'@': 290}), 73: (1, {'@': 290}), 42: (1, {'@': 290}), 43: (1, {'@': 290}), 44: (1, {'@': 290}), 87: (1, {'@': 290}), 45: (1, {'@': 290}), 30: (1, {'@': 290}), 22: (1, {'@': 290}), 11: (1, {'@': 290}), 88: (1, {'@': 290}), 46: (1, {'@': 290}), 76: (1, {'@': 290}), 48: (1, {'@': 290}), 47: (1, {'@': 290}), 77: (1, {'@': 290}), 49: (1, {'@': 290}), 50: (1, {'@': 290}), 10: (1, {'@': 290}), 51: (1, {'@': 290}), 91: (1, {'@': 290}), 17: (1, {'@': 290}), 26: (1, {'@': 290}), 25: (1, {'@': 290}), 68: (1, {'@': 290}), 52: (1, {'@': 290}), 93: (1, {'@': 290}), 94: (1, {'@': 290}), 79: (1, {'@': 290}), 53: (1, {'@': 290}), 57: (1, {'@': 290}), 56: (1, {'@': 290}), 80: (1, {'@': 290}), 23: (1, {'@': 290}), 96: (1, {'@': 290}), 54: (1, {'@': 290}), 55: (1, {'@': 290}), 97: (1, {'@': 290}), 98: (1, {'@': 290}), 19: (1, {'@': 290}), 99: (1, {'@': 290}), 100: (1, {'@': 290}), 101: (1, {'@': 290}), 102: (1, {'@': 290}), 105: (1, {'@': 290}), 106: (1, {'@': 290}), 103: (1, {'@': 290}), 104: (1, {'@': 290}), 107: (1, {'@': 290}), 108: (1, {'@': 290}), 109: (1, {'@': 290})}, 245: {25: (0, 409), 35: (0, 536)}, 246: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 9: (0, 112), 20: (0, 415), 21: (0, 256), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 60: (0, 467), 35: (0, 105), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 247: {31: (1, {'@': 505}), 21: (1, {'@': 505}), 1: (1, {'@': 505}), 36: (1, {'@': 505}), 6: (1, {'@': 505}), 2: (1, {'@': 505}), 18: (1, {'@': 505}), 9: (1, {'@': 505}), 15: (1, {'@': 505}), 20: (1, {'@': 505}), 33: (1, {'@': 505}), 43: (1, {'@': 505}), 30: (1, {'@': 505}), 22: (1, {'@': 505}), 11: (1, {'@': 505}), 10: (1, {'@': 505}), 17: (1, {'@': 505}), 26: (1, {'@': 505}), 25: (1, {'@': 505}), 57: (1, {'@': 505}), 23: (1, {'@': 505}), 19: (1, {'@': 505})}, 248: {93: (1, {'@': 416})}, 249: {93: (1, {'@': 110})}, 250: {5: (0, 203), 6: (0, 32), 93: (0, 435), 7: (0, 186), 8: (0, 276), 10: (0, 284), 64: (0, 346), 199: (0, 357), 2: (0, 137), 12: (0, 397), 45: (0, 356), 200: (0, 383), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 201: (0, 374), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 202: (0, 375), 0: (0, 36), 1: (0, 24), 63: (0, 25), 4: (0, 50), 3: (0, 255), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 81: (0, 373), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 203: (0, 362), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 164: (0, 372)}, 251: {119: (0, 300), 48: (0, 196), 54: (0, 43), 5: (0, 203), 6: (0, 32), 7: (0, 186), 120: (0, 231), 121: (0, 30), 53: (0, 243), 8: (0, 276), 42: (0, 209), 44: (0, 156), 10: (0, 284), 122: (0, 285), 41: (0, 318), 2: (0, 137), 12: (0, 397), 114: (0, 364), 16: (0, 244), 15: (0, 414), 35: (0, 31), 9: (0, 112), 21: (0, 256), 20: (0, 415), 124: (0, 332), 125: (0, 334), 126: (0, 296), 60: (0, 408), 127: (0, 97), 25: (0, 409), 61: (0, 64), 19: (0, 545), 38: (0, 75), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 40: (0, 69), 128: (0, 60), 130: (0, 27), 1: (0, 24), 0: (0, 36), 63: (0, 25), 4: (0, 50), 45: (0, 0), 3: (0, 255), 131: (0, 425), 132: (0, 72), 43: (0, 340), 133: (0, 89), 134: (0, 76), 65: (0, 85), 135: (0, 331), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 64: (0, 267), 23: (0, 70), 22: (0, 61), 136: (0, 317), 24: (0, 419), 56: (0, 456), 28: (0, 572), 52: (0, 294), 123: (0, 376), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 138: (0, 449)}, 252: {93: (1, {'@': 101})}, 253: {35: (0, 234), 25: (0, 409), 115: (0, 157), 93: (1, {'@': 226}), 58: (1, {'@': 226}), 52: (1, {'@': 226})}, 254: {93: (1, {'@': 93})}, 255: {204: (0, 123), 91: (0, 99), 31: (1, {'@': 288}), 21: (1, {'@': 288}), 1: (1, {'@': 288}), 83: (1, {'@': 288}), 69: (1, {'@': 288}), 36: (1, {'@': 288}), 37: (1, {'@': 288}), 84: (1, {'@': 288}), 70: (1, {'@': 288}), 38: (1, {'@': 288}), 71: (1, {'@': 288}), 6: (1, {'@': 288}), 2: (1, {'@': 288}), 18: (1, {'@': 288}), 9: (1, {'@': 288}), 39: (1, {'@': 288}), 40: (1, {'@': 288}), 41: (1, {'@': 288}), 15: (1, {'@': 288}), 85: (1, {'@': 288}), 58: (1, {'@': 288}), 20: (1, {'@': 288}), 86: (1, {'@': 288}), 33: (1, {'@': 288}), 73: (1, {'@': 288}), 42: (1, {'@': 288}), 43: (1, {'@': 288}), 44: (1, {'@': 288}), 87: (1, {'@': 288}), 45: (1, {'@': 288}), 30: (1, {'@': 288}), 22: (1, {'@': 288}), 11: (1, {'@': 288}), 88: (1, {'@': 288}), 46: (1, {'@': 288}), 76: (1, {'@': 288}), 48: (1, {'@': 288}), 47: (1, {'@': 288}), 77: (1, {'@': 288}), 49: (1, {'@': 288}), 50: (1, {'@': 288}), 10: (1, {'@': 288}), 51: (1, {'@': 288}), 17: (1, {'@': 288}), 26: (1, {'@': 288}), 25: (1, {'@': 288}), 68: (1, {'@': 288}), 52: (1, {'@': 288}), 93: (1, {'@': 288}), 94: (1, {'@': 288}), 97: (1, {'@': 288}), 79: (1, {'@': 288}), 53: (1, {'@': 288}), 57: (1, {'@': 288}), 80: (1, {'@': 288}), 23: (1, {'@': 288}), 96: (1, {'@': 288}), 54: (1, {'@': 288}), 55: (1, {'@': 288}), 56: (1, {'@': 288}), 98: (1, {'@': 288}), 19: (1, {'@': 288}), 99: (1, {'@': 288}), 100: (1, {'@': 288}), 101: (1, {'@': 288}), 102: (1, {'@': 288}), 105: (1, {'@': 288}), 106: (1, {'@': 288}), 103: (1, {'@': 288}), 104: (1, {'@': 288}), 107: (1, {'@': 288}), 108: (1, {'@': 288}), 109: (1, {'@': 288})}, 256: {1: (1, {'@': 431}), 69: (1, {'@': 431}), 36: (1, {'@': 431}), 70: (1, {'@': 431}), 38: (1, {'@': 431}), 71: (1, {'@': 431}), 2: (1, {'@': 431}), 18: (1, {'@': 431}), 39: (1, {'@': 431}), 40: (1, {'@': 431}), 72: (1, {'@': 431}), 58: (1, {'@': 431}), 20: (1, {'@': 431}), 73: (1, {'@': 431}), 42: (1, {'@': 431}), 74: (1, {'@': 431}), 43: (1, {'@': 431}), 75: (1, {'@': 431}), 44: (1, {'@': 431}), 22: (1, {'@': 431}), 76: (1, {'@': 431}), 48: (1, {'@': 431}), 77: (1, {'@': 431}), 78: (1, {'@': 431}), 50: (1, {'@': 431}), 10: (1, {'@': 431}), 68: (1, {'@': 431}), 52: (1, {'@': 431}), 79: (1, {'@': 431}), 53: (1, {'@': 431}), 80: (1, {'@': 431}), 81: (1, {'@': 431}), 23: (1, {'@': 431}), 55: (1, {'@': 431}), 56: (1, {'@': 431}), 19: (1, {'@': 431}), 31: (1, {'@': 431}), 82: (1, {'@': 431}), 21: (1, {'@': 431}), 83: (1, {'@': 431}), 37: (1, {'@': 431}), 84: (1, {'@': 431}), 6: (1, {'@': 431}), 9: (1, {'@': 431}), 41: (1, {'@': 431}), 15: (1, {'@': 431}), 85: (1, {'@': 431}), 86: (1, {'@': 431}), 33: (1, {'@': 431}), 87: (1, {'@': 431}), 45: (1, {'@': 431}), 30: (1, {'@': 431}), 11: (1, {'@': 431}), 88: (1, {'@': 431}), 46: (1, {'@': 431}), 47: (1, {'@': 431}), 89: (1, {'@': 431}), 49: (1, {'@': 431}), 90: (1, {'@': 431}), 51: (1, {'@': 431}), 91: (1, {'@': 431}), 17: (1, {'@': 431}), 26: (1, {'@': 431}), 25: (1, {'@': 431}), 92: (1, {'@': 431}), 93: (1, {'@': 431}), 94: (1, {'@': 431}), 57: (1, {'@': 431}), 95: (1, {'@': 431}), 96: (1, {'@': 431}), 54: (1, {'@': 431}), 97: (1, {'@': 431}), 98: (1, {'@': 431}), 99: (1, {'@': 431}), 100: (1, {'@': 431}), 101: (1, {'@': 431}), 102: (1, {'@': 431}), 103: (1, {'@': 431}), 104: (1, {'@': 431}), 105: (1, {'@': 431}), 106: (1, {'@': 431}), 107: (1, {'@': 431}), 108: (1, {'@': 431}), 109: (1, {'@': 431})}, 257: {84: (0, 470), 205: (0, 586), 68: (1, {'@': 258})}, 258: {31: (1, {'@': 319}), 21: (1, {'@': 319}), 1: (1, {'@': 319}), 6: (1, {'@': 319}), 2: (1, {'@': 319}), 18: (1, {'@': 319}), 9: (1, {'@': 319}), 15: (1, {'@': 319}), 20: (1, {'@': 319}), 33: (1, {'@': 319}), 30: (1, {'@': 319}), 22: (1, {'@': 319}), 11: (1, {'@': 319}), 10: (1, {'@': 319}), 17: (1, {'@': 319}), 26: (1, {'@': 319}), 25: (1, {'@': 319}), 23: (1, {'@': 319}), 19: (1, {'@': 319})}, 259: {80: (0, 258), 36: (0, 600), 99: (0, 124), 101: (0, 147), 105: (0, 172), 102: (0, 197), 106: (0, 168), 104: (0, 28), 100: (0, 149), 111: (0, 412), 103: (1, {'@': 283}), 39: (1, {'@': 283}), 107: (1, {'@': 283}), 25: (1, {'@': 283}), 58: (1, {'@': 283}), 68: (1, {'@': 283}), 52: (1, {'@': 283}), 84: (1, {'@': 283}), 83: (1, {'@': 283}), 69: (1, {'@': 283}), 77: (1, {'@': 283}), 70: (1, {'@': 283}), 71: (1, {'@': 283}), 94: (1, {'@': 283}), 79: (1, {'@': 283}), 85: (1, {'@': 283}), 86: (1, {'@': 283}), 73: (1, {'@': 283}), 96: (1, {'@': 283}), 87: (1, {'@': 283}), 98: (1, {'@': 283}), 88: (1, {'@': 283}), 31: (1, {'@': 283}), 21: (1, {'@': 283}), 1: (1, {'@': 283}), 37: (1, {'@': 283}), 38: (1, {'@': 283}), 6: (1, {'@': 283}), 2: (1, {'@': 283}), 18: (1, {'@': 283}), 9: (1, {'@': 283}), 40: (1, {'@': 283}), 41: (1, {'@': 283}), 15: (1, {'@': 283}), 20: (1, {'@': 283}), 33: (1, {'@': 283}), 42: (1, {'@': 283}), 43: (1, {'@': 283}), 44: (1, {'@': 283}), 45: (1, {'@': 283}), 30: (1, {'@': 283}), 22: (1, {'@': 283}), 11: (1, {'@': 283}), 46: (1, {'@': 283}), 47: (1, {'@': 283}), 48: (1, {'@': 283}), 49: (1, {'@': 283}), 50: (1, {'@': 283}), 10: (1, {'@': 283}), 51: (1, {'@': 283}), 17: (1, {'@': 283}), 26: (1, {'@': 283}), 53: (1, {'@': 283}), 57: (1, {'@': 283}), 23: (1, {'@': 283}), 54: (1, {'@': 283}), 55: (1, {'@': 283}), 56: (1, {'@': 283}), 19: (1, {'@': 283}), 76: (1, {'@': 283}), 108: (1, {'@': 283}), 109: (1, {'@': 283}), 93: (1, {'@': 283}), 97: (1, {'@': 283})}, 260: {1: (1, {'@': 338}), 69: (1, {'@': 338}), 36: (1, {'@': 338}), 70: (1, {'@': 338}), 38: (1, {'@': 338}), 71: (1, {'@': 338}), 2: (1, {'@': 338}), 18: (1, {'@': 338}), 39: (1, {'@': 338}), 40: (1, {'@': 338}), 72: (1, {'@': 338}), 58: (1, {'@': 338}), 20: (1, {'@': 338}), 73: (1, {'@': 338}), 42: (1, {'@': 338}), 74: (1, {'@': 338}), 43: (1, {'@': 338}), 75: (1, {'@': 338}), 44: (1, {'@': 338}), 22: (1, {'@': 338}), 76: (1, {'@': 338}), 48: (1, {'@': 338}), 77: (1, {'@': 338}), 78: (1, {'@': 338}), 50: (1, {'@': 338}), 10: (1, {'@': 338}), 68: (1, {'@': 338}), 52: (1, {'@': 338}), 79: (1, {'@': 338}), 53: (1, {'@': 338}), 80: (1, {'@': 338}), 81: (1, {'@': 338}), 23: (1, {'@': 338}), 55: (1, {'@': 338}), 56: (1, {'@': 338}), 19: (1, {'@': 338}), 31: (1, {'@': 338}), 82: (1, {'@': 338}), 21: (1, {'@': 338}), 83: (1, {'@': 338}), 37: (1, {'@': 338}), 84: (1, {'@': 338}), 6: (1, {'@': 338}), 9: (1, {'@': 338}), 41: (1, {'@': 338}), 15: (1, {'@': 338}), 85: (1, {'@': 338}), 86: (1, {'@': 338}), 33: (1, {'@': 338}), 87: (1, {'@': 338}), 45: (1, {'@': 338}), 30: (1, {'@': 338}), 11: (1, {'@': 338}), 88: (1, {'@': 338}), 46: (1, {'@': 338}), 47: (1, {'@': 338}), 89: (1, {'@': 338}), 49: (1, {'@': 338}), 90: (1, {'@': 338}), 51: (1, {'@': 338}), 91: (1, {'@': 338}), 17: (1, {'@': 338}), 26: (1, {'@': 338}), 25: (1, {'@': 338}), 92: (1, {'@': 338}), 93: (1, {'@': 338}), 94: (1, {'@': 338}), 57: (1, {'@': 338}), 95: (1, {'@': 338}), 96: (1, {'@': 338}), 54: (1, {'@': 338}), 97: (1, {'@': 338}), 98: (1, {'@': 338}), 99: (1, {'@': 338}), 100: (1, {'@': 338}), 101: (1, {'@': 338}), 102: (1, {'@': 338}), 103: (1, {'@': 338}), 104: (1, {'@': 338}), 105: (1, {'@': 338}), 106: (1, {'@': 338}), 107: (1, {'@': 338}), 108: (1, {'@': 338}), 109: (1, {'@': 338})}, 261: {160: (0, 529), 84: (0, 512), 93: (1, {'@': 422})}, 262: {68: (0, 177)}, 263: {93: (1, {'@': 508}), 84: (1, {'@': 508})}, 264: {206: (0, 402), 207: (0, 355), 84: (0, 597), 208: (0, 541), 209: (0, 418), 37: (0, 411), 76: (1, {'@': 386})}, 265: {0: (0, 36), 1: (0, 24), 2: (0, 137), 3: (0, 255), 45: (0, 0), 4: (0, 50), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 114: (0, 33), 12: (0, 397), 13: (0, 453), 14: (0, 79), 15: (0, 414), 16: (0, 244), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 29: (0, 86), 26: (0, 3), 27: (0, 66), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 34: (0, 521), 35: (0, 105), 80: (1, {'@': 375})}, 266: {31: (1, {'@': 245}), 21: (1, {'@': 245}), 1: (1, {'@': 245}), 36: (1, {'@': 245}), 37: (1, {'@': 245}), 38: (1, {'@': 245}), 6: (1, {'@': 245}), 2: (1, {'@': 245}), 18: (1, {'@': 245}), 9: (1, {'@': 245}), 39: (1, {'@': 245}), 40: (1, {'@': 245}), 41: (1, {'@': 245}), 15: (1, {'@': 245}), 20: (1, {'@': 245}), 33: (1, {'@': 245}), 42: (1, {'@': 245}), 43: (1, {'@': 245}), 44: (1, {'@': 245}), 45: (1, {'@': 245}), 30: (1, {'@': 245}), 22: (1, {'@': 245}), 11: (1, {'@': 245}), 46: (1, {'@': 245}), 47: (1, {'@': 245}), 48: (1, {'@': 245}), 49: (1, {'@': 245}), 50: (1, {'@': 245}), 10: (1, {'@': 245}), 51: (1, {'@': 245}), 17: (1, {'@': 245}), 26: (1, {'@': 245}), 25: (1, {'@': 245}), 52: (1, {'@': 245}), 53: (1, {'@': 245}), 23: (1, {'@': 245}), 54: (1, {'@': 245}), 55: (1, {'@': 245}), 56: (1, {'@': 245}), 19: (1, {'@': 245}), 57: (1, {'@': 245})}, 267: {83: (1, {'@': 353}), 69: (1, {'@': 353}), 77: (1, {'@': 353}), 84: (1, {'@': 353}), 70: (1, {'@': 353}), 71: (1, {'@': 353}), 52: (1, {'@': 353}), 94: (1, {'@': 353}), 79: (1, {'@': 353}), 85: (1, {'@': 353}), 58: (1, {'@': 353}), 86: (1, {'@': 353}), 73: (1, {'@': 353}), 96: (1, {'@': 353}), 87: (1, {'@': 353}), 98: (1, {'@': 353}), 88: (1, {'@': 353}), 1: (1, {'@': 353}), 36: (1, {'@': 353}), 38: (1, {'@': 353}), 2: (1, {'@': 353}), 18: (1, {'@': 353}), 39: (1, {'@': 353}), 40: (1, {'@': 353}), 20: (1, {'@': 353}), 42: (1, {'@': 353}), 43: (1, {'@': 353}), 44: (1, {'@': 353}), 22: (1, {'@': 353}), 48: (1, {'@': 353}), 50: (1, {'@': 353}), 10: (1, {'@': 353}), 53: (1, {'@': 353}), 23: (1, {'@': 353}), 55: (1, {'@': 353}), 56: (1, {'@': 353}), 19: (1, {'@': 353}), 31: (1, {'@': 353}), 21: (1, {'@': 353}), 37: (1, {'@': 353}), 6: (1, {'@': 353}), 9: (1, {'@': 353}), 41: (1, {'@': 353}), 15: (1, {'@': 353}), 33: (1, {'@': 353}), 45: (1, {'@': 353}), 30: (1, {'@': 353}), 11: (1, {'@': 353}), 46: (1, {'@': 353}), 47: (1, {'@': 353}), 49: (1, {'@': 353}), 51: (1, {'@': 353}), 17: (1, {'@': 353}), 26: (1, {'@': 353}), 25: (1, {'@': 353}), 57: (1, {'@': 353}), 54: (1, {'@': 353}), 97: (1, {'@': 353}), 68: (1, {'@': 353}), 93: (1, {'@': 353}), 76: (1, {'@': 353})}, 268: {0: (0, 36), 1: (0, 24), 2: (0, 137), 4: (0, 50), 5: (0, 203), 6: (0, 32), 7: (0, 186), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 15: (0, 414), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 27: (0, 66), 26: (0, 3), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 8: (0, 475), 35: (0, 105)}, 269: {119: (0, 300), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 114: (0, 364), 16: (0, 244), 35: (0, 31), 9: (0, 112), 21: (0, 256), 20: (0, 415), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 122: (0, 532), 0: (0, 36), 1: (0, 24), 63: (0, 25), 4: (0, 50), 45: (0, 0), 3: (0, 255), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 64: (0, 267)}, 270: {25: (0, 409), 35: (0, 47)}, 271: {1: (1, {'@': 474}), 69: (1, {'@': 474}), 36: (1, {'@': 474}), 70: (1, {'@': 474}), 38: (1, {'@': 474}), 71: (1, {'@': 474}), 2: (1, {'@': 474}), 18: (1, {'@': 474}), 39: (1, {'@': 474}), 40: (1, {'@': 474}), 58: (1, {'@': 474}), 20: (1, {'@': 474}), 73: (1, {'@': 474}), 42: (1, {'@': 474}), 43: (1, {'@': 474}), 107: (1, {'@': 474}), 44: (1, {'@': 474}), 22: (1, {'@': 474}), 76: (1, {'@': 474}), 48: (1, {'@': 474}), 77: (1, {'@': 474}), 50: (1, {'@': 474}), 10: (1, {'@': 474}), 68: (1, {'@': 474}), 52: (1, {'@': 474}), 79: (1, {'@': 474}), 53: (1, {'@': 474}), 23: (1, {'@': 474}), 55: (1, {'@': 474}), 56: (1, {'@': 474}), 19: (1, {'@': 474}), 31: (1, {'@': 474}), 21: (1, {'@': 474}), 83: (1, {'@': 474}), 37: (1, {'@': 474}), 84: (1, {'@': 474}), 6: (1, {'@': 474}), 9: (1, {'@': 474}), 41: (1, {'@': 474}), 15: (1, {'@': 474}), 85: (1, {'@': 474}), 108: (1, {'@': 474}), 86: (1, {'@': 474}), 33: (1, {'@': 474}), 87: (1, {'@': 474}), 45: (1, {'@': 474}), 30: (1, {'@': 474}), 11: (1, {'@': 474}), 88: (1, {'@': 474}), 46: (1, {'@': 474}), 47: (1, {'@': 474}), 49: (1, {'@': 474}), 51: (1, {'@': 474}), 109: (1, {'@': 474}), 17: (1, {'@': 474}), 26: (1, {'@': 474}), 25: (1, {'@': 474}), 93: (1, {'@': 474}), 94: (1, {'@': 474}), 57: (1, {'@': 474}), 96: (1, {'@': 474}), 54: (1, {'@': 474}), 97: (1, {'@': 474}), 98: (1, {'@': 474})}, 272: {68: (0, 454), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 64: (0, 466), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 159: (0, 302), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 4: (0, 50), 3: (0, 255), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 97: (1, {'@': 356})}, 273: {93: (1, {'@': 510}), 84: (1, {'@': 510})}, 274: {116: (0, 382), 45: (0, 368), 115: (0, 160), 25: (0, 409), 35: (0, 234), 19: (0, 592)}, 275: {119: (0, 127), 48: (0, 196), 171: (0, 201), 5: (0, 203), 172: (0, 208), 42: (0, 209), 10: (0, 284), 122: (0, 285), 41: (0, 318), 49: (0, 282), 2: (0, 137), 16: (0, 244), 55: (0, 241), 35: (0, 235), 9: (0, 112), 21: (0, 256), 7: (0, 186), 126: (0, 296), 174: (0, 266), 52: (0, 169), 175: (0, 323), 123: (0, 134), 127: (0, 97), 50: (0, 78), 61: (0, 64), 54: (0, 43), 38: (0, 75), 46: (0, 56), 26: (0, 3), 140: (0, 13), 29: (0, 10), 129: (0, 19), 40: (0, 69), 128: (0, 60), 130: (0, 27), 37: (0, 15), 1: (0, 24), 63: (0, 25), 4: (0, 50), 45: (0, 0), 132: (0, 72), 133: (0, 89), 134: (0, 76), 65: (0, 85), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 39: (0, 34), 0: (0, 36), 23: (0, 70), 22: (0, 61), 136: (0, 317), 47: (0, 5), 176: (0, 1), 3: (0, 255), 30: (0, 225), 32: (0, 146), 64: (0, 267), 177: (0, 299), 178: (0, 90), 6: (0, 32), 120: (0, 231), 121: (0, 30), 53: (0, 243), 8: (0, 276), 44: (0, 156), 179: (0, 339), 12: (0, 397), 114: (0, 364), 15: (0, 414), 20: (0, 415), 124: (0, 332), 125: (0, 334), 60: (0, 408), 25: (0, 409), 19: (0, 545), 181: (0, 77), 182: (0, 101), 27: (0, 66), 36: (0, 102), 183: (0, 113), 33: (0, 497), 56: (0, 456), 131: (0, 425), 43: (0, 340), 184: (0, 358), 135: (0, 331), 11: (0, 399), 13: (0, 453), 18: (0, 558), 24: (0, 419), 28: (0, 572), 31: (0, 533), 34: (0, 521), 185: (0, 165), 138: (0, 449), 51: (1, {'@': 87})}, 276: {89: (0, 268), 210: (0, 348), 1: (1, {'@': 292}), 69: (1, {'@': 292}), 36: (1, {'@': 292}), 70: (1, {'@': 292}), 38: (1, {'@': 292}), 71: (1, {'@': 292}), 2: (1, {'@': 292}), 18: (1, {'@': 292}), 39: (1, {'@': 292}), 40: (1, {'@': 292}), 58: (1, {'@': 292}), 20: (1, {'@': 292}), 73: (1, {'@': 292}), 42: (1, {'@': 292}), 74: (1, {'@': 292}), 43: (1, {'@': 292}), 44: (1, {'@': 292}), 22: (1, {'@': 292}), 76: (1, {'@': 292}), 48: (1, {'@': 292}), 77: (1, {'@': 292}), 50: (1, {'@': 292}), 10: (1, {'@': 292}), 68: (1, {'@': 292}), 52: (1, {'@': 292}), 79: (1, {'@': 292}), 53: (1, {'@': 292}), 80: (1, {'@': 292}), 23: (1, {'@': 292}), 55: (1, {'@': 292}), 56: (1, {'@': 292}), 19: (1, {'@': 292}), 31: (1, {'@': 292}), 21: (1, {'@': 292}), 83: (1, {'@': 292}), 37: (1, {'@': 292}), 84: (1, {'@': 292}), 6: (1, {'@': 292}), 9: (1, {'@': 292}), 41: (1, {'@': 292}), 15: (1, {'@': 292}), 85: (1, {'@': 292}), 86: (1, {'@': 292}), 33: (1, {'@': 292}), 87: (1, {'@': 292}), 45: (1, {'@': 292}), 30: (1, {'@': 292}), 11: (1, {'@': 292}), 88: (1, {'@': 292}), 46: (1, {'@': 292}), 47: (1, {'@': 292}), 49: (1, {'@': 292}), 51: (1, {'@': 292}), 91: (1, {'@': 292}), 17: (1, {'@': 292}), 26: (1, {'@': 292}), 25: (1, {'@': 292}), 93: (1, {'@': 292}), 94: (1, {'@': 292}), 57: (1, {'@': 292}), 96: (1, {'@': 292}), 54: (1, {'@': 292}), 97: (1, {'@': 292}), 98: (1, {'@': 292}), 99: (1, {'@': 292}), 100: (1, {'@': 292}), 101: (1, {'@': 292}), 102: (1, {'@': 292}), 105: (1, {'@': 292}), 106: (1, {'@': 292}), 103: (1, {'@': 292}), 104: (1, {'@': 292}), 107: (1, {'@': 292}), 108: (1, {'@': 292}), 109: (1, {'@': 292})}, 277: {84: (0, 342), 58: (1, {'@': 232}), 52: (1, {'@': 232})}, 278: {147: (0, 570), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 93: (0, 567), 148: (0, 580), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 565), 9: (0, 112), 149: (0, 555), 21: (0, 256), 20: (0, 415), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 64: (0, 549), 45: (0, 573), 26: (0, 3), 27: (0, 66), 36: (0, 102), 29: (0, 10), 33: (0, 497), 150: (0, 593), 0: (0, 36), 1: (0, 24), 81: (0, 596), 63: (0, 25), 4: (0, 50), 3: (0, 255), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 67: (0, 162), 66: (0, 431), 17: (0, 7), 18: (0, 558), 23: (0, 70), 151: (0, 591), 22: (0, 61), 24: (0, 419), 152: (0, 585), 153: (0, 587), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 279: {1: (1, {'@': 299}), 69: (1, {'@': 299}), 36: (1, {'@': 299}), 70: (1, {'@': 299}), 38: (1, {'@': 299}), 71: (1, {'@': 299}), 2: (1, {'@': 299}), 18: (1, {'@': 299}), 39: (1, {'@': 299}), 40: (1, {'@': 299}), 72: (1, {'@': 299}), 58: (1, {'@': 299}), 20: (1, {'@': 299}), 73: (1, {'@': 299}), 42: (1, {'@': 299}), 74: (1, {'@': 299}), 43: (1, {'@': 299}), 75: (1, {'@': 299}), 44: (1, {'@': 299}), 22: (1, {'@': 299}), 76: (1, {'@': 299}), 48: (1, {'@': 299}), 77: (1, {'@': 299}), 78: (1, {'@': 299}), 50: (1, {'@': 299}), 10: (1, {'@': 299}), 68: (1, {'@': 299}), 52: (1, {'@': 299}), 79: (1, {'@': 299}), 53: (1, {'@': 299}), 80: (1, {'@': 299}), 23: (1, {'@': 299}), 55: (1, {'@': 299}), 56: (1, {'@': 299}), 19: (1, {'@': 299}), 31: (1, {'@': 299}), 82: (1, {'@': 299}), 21: (1, {'@': 299}), 83: (1, {'@': 299}), 37: (1, {'@': 299}), 84: (1, {'@': 299}), 6: (1, {'@': 299}), 9: (1, {'@': 299}), 41: (1, {'@': 299}), 15: (1, {'@': 299}), 85: (1, {'@': 299}), 86: (1, {'@': 299}), 33: (1, {'@': 299}), 87: (1, {'@': 299}), 45: (1, {'@': 299}), 30: (1, {'@': 299}), 11: (1, {'@': 299}), 88: (1, {'@': 299}), 46: (1, {'@': 299}), 47: (1, {'@': 299}), 89: (1, {'@': 299}), 49: (1, {'@': 299}), 51: (1, {'@': 299}), 91: (1, {'@': 299}), 17: (1, {'@': 299}), 26: (1, {'@': 299}), 25: (1, {'@': 299}), 92: (1, {'@': 299}), 93: (1, {'@': 299}), 94: (1, {'@': 299}), 57: (1, {'@': 299}), 95: (1, {'@': 299}), 96: (1, {'@': 299}), 54: (1, {'@': 299}), 97: (1, {'@': 299}), 98: (1, {'@': 299}), 99: (1, {'@': 299}), 100: (1, {'@': 299}), 101: (1, {'@': 299}), 102: (1, {'@': 299}), 103: (1, {'@': 299}), 104: (1, {'@': 299}), 105: (1, {'@': 299}), 106: (1, {'@': 299}), 107: (1, {'@': 299}), 108: (1, {'@': 299}), 109: (1, {'@': 299})}, 280: {93: (1, {'@': 402})}, 281: {93: (1, {'@': 106})}, 282: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 181), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 64: (0, 190), 211: (0, 26), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 283: {25: (0, 409), 35: (0, 152)}, 284: {31: (1, {'@': 301}), 21: (1, {'@': 301}), 1: (1, {'@': 301}), 6: (1, {'@': 301}), 2: (1, {'@': 301}), 18: (1, {'@': 301}), 9: (1, {'@': 301}), 15: (1, {'@': 301}), 20: (1, {'@': 301}), 33: (1, {'@': 301}), 30: (1, {'@': 301}), 22: (1, {'@': 301}), 11: (1, {'@': 301}), 10: (1, {'@': 301}), 17: (1, {'@': 301}), 26: (1, {'@': 301}), 25: (1, {'@': 301}), 23: (1, {'@': 301}), 19: (1, {'@': 301})}, 285: {79: (0, 150), 212: (0, 135), 70: (0, 83), 71: (0, 121), 86: (0, 139), 69: (0, 44), 85: (0, 120), 94: (0, 103), 73: (0, 122), 96: (0, 129), 98: (0, 104), 77: (0, 62), 87: (0, 219), 88: (0, 158), 83: (0, 166), 213: (0, 233), 58: (1, {'@': 177}), 52: (1, {'@': 177})}, 286: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 45: (0, 356), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 202: (0, 12), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 64: (0, 118), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 81: (0, 373), 23: (0, 70), 22: (0, 61), 24: (0, 419), 199: (0, 107), 200: (0, 37), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 287: {93: (1, {'@': 401})}, 288: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 565), 9: (0, 112), 149: (0, 555), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 64: (0, 549), 27: (0, 66), 26: (0, 3), 45: (0, 573), 36: (0, 102), 29: (0, 10), 33: (0, 497), 150: (0, 593), 0: (0, 36), 1: (0, 24), 63: (0, 25), 151: (0, 254), 3: (0, 255), 4: (0, 50), 81: (0, 596), 43: (0, 340), 153: (0, 320), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 147: (0, 116), 152: (0, 585), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 93: (1, {'@': 95})}, 289: {93: (0, 487)}, 290: {93: (1, {'@': 98})}, 291: {80: (0, 335)}, 292: {93: (1, {'@': 105})}, 293: {0: (0, 36), 1: (0, 24), 2: (0, 137), 4: (0, 50), 6: (0, 32), 7: (0, 186), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 15: (0, 414), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 27: (0, 66), 26: (0, 3), 28: (0, 572), 30: (0, 225), 5: (0, 81), 31: (0, 533), 32: (0, 146), 33: (0, 497), 35: (0, 105)}, 294: {31: (1, {'@': 167}), 21: (1, {'@': 167}), 1: (1, {'@': 167}), 36: (1, {'@': 167}), 37: (1, {'@': 167}), 38: (1, {'@': 167}), 6: (1, {'@': 167}), 2: (1, {'@': 167}), 18: (1, {'@': 167}), 9: (1, {'@': 167}), 39: (1, {'@': 167}), 40: (1, {'@': 167}), 41: (1, {'@': 167}), 15: (1, {'@': 167}), 20: (1, {'@': 167}), 33: (1, {'@': 167}), 42: (1, {'@': 167}), 43: (1, {'@': 167}), 44: (1, {'@': 167}), 45: (1, {'@': 167}), 30: (1, {'@': 167}), 22: (1, {'@': 167}), 11: (1, {'@': 167}), 46: (1, {'@': 167}), 47: (1, {'@': 167}), 48: (1, {'@': 167}), 49: (1, {'@': 167}), 50: (1, {'@': 167}), 10: (1, {'@': 167}), 51: (1, {'@': 167}), 17: (1, {'@': 167}), 26: (1, {'@': 167}), 25: (1, {'@': 167}), 52: (1, {'@': 167}), 53: (1, {'@': 167}), 57: (1, {'@': 167}), 23: (1, {'@': 167}), 54: (1, {'@': 167}), 55: (1, {'@': 167}), 56: (1, {'@': 167}), 19: (1, {'@': 167}), 108: (1, {'@': 167}), 112: (1, {'@': 167})}, 295: {108: (0, 333), 31: (1, {'@': 253}), 21: (1, {'@': 253}), 1: (1, {'@': 253}), 36: (1, {'@': 253}), 37: (1, {'@': 253}), 38: (1, {'@': 253}), 6: (1, {'@': 253}), 2: (1, {'@': 253}), 18: (1, {'@': 253}), 9: (1, {'@': 253}), 39: (1, {'@': 253}), 40: (1, {'@': 253}), 41: (1, {'@': 253}), 15: (1, {'@': 253}), 20: (1, {'@': 253}), 33: (1, {'@': 253}), 42: (1, {'@': 253}), 43: (1, {'@': 253}), 44: (1, {'@': 253}), 45: (1, {'@': 253}), 30: (1, {'@': 253}), 22: (1, {'@': 253}), 11: (1, {'@': 253}), 46: (1, {'@': 253}), 47: (1, {'@': 253}), 48: (1, {'@': 253}), 49: (1, {'@': 253}), 50: (1, {'@': 253}), 10: (1, {'@': 253}), 51: (1, {'@': 253}), 17: (1, {'@': 253}), 26: (1, {'@': 253}), 25: (1, {'@': 253}), 52: (1, {'@': 253}), 53: (1, {'@': 253}), 23: (1, {'@': 253}), 54: (1, {'@': 253}), 55: (1, {'@': 253}), 56: (1, {'@': 253}), 19: (1, {'@': 253}), 57: (1, {'@': 253})}, 296: {58: (1, {'@': 174}), 52: (1, {'@': 174})}, 297: {52: (1, {'@': 452}), 58: (1, {'@': 452})}, 298: {76: (1, {'@': 504}), 84: (1, {'@': 504})}, 299: {31: (1, {'@': 263}), 21: (1, {'@': 263}), 1: (1, {'@': 263}), 36: (1, {'@': 263}), 37: (1, {'@': 263}), 38: (1, {'@': 263}), 6: (1, {'@': 263}), 2: (1, {'@': 263}), 18: (1, {'@': 263}), 9: (1, {'@': 263}), 39: (1, {'@': 263}), 40: (1, {'@': 263}), 41: (1, {'@': 263}), 15: (1, {'@': 263}), 20: (1, {'@': 263}), 33: (1, {'@': 263}), 42: (1, {'@': 263}), 43: (1, {'@': 263}), 44: (1, {'@': 263}), 45: (1, {'@': 263}), 30: (1, {'@': 263}), 22: (1, {'@': 263}), 11: (1, {'@': 263}), 46: (1, {'@': 263}), 47: (1, {'@': 263}), 48: (1, {'@': 263}), 49: (1, {'@': 263}), 50: (1, {'@': 263}), 10: (1, {'@': 263}), 51: (1, {'@': 263}), 17: (1, {'@': 263}), 26: (1, {'@': 263}), 25: (1, {'@': 263}), 52: (1, {'@': 263}), 53: (1, {'@': 263}), 23: (1, {'@': 263}), 54: (1, {'@': 263}), 55: (1, {'@': 263}), 56: (1, {'@': 263}), 19: (1, {'@': 263}), 57: (1, {'@': 263})}, 300: {158: (0, 93), 84: (0, 55), 79: (1, {'@': 195}), 83: (1, {'@': 195}), 69: (1, {'@': 195}), 85: (1, {'@': 195}), 77: (1, {'@': 195}), 58: (1, {'@': 195}), 86: (1, {'@': 195}), 70: (1, {'@': 195}), 52: (1, {'@': 195}), 71: (1, {'@': 195}), 73: (1, {'@': 195}), 96: (1, {'@': 195}), 87: (1, {'@': 195}), 98: (1, {'@': 195}), 88: (1, {'@': 195}), 94: (1, {'@': 195})}, 301: {52: (1, {'@': 222}), 58: (1, {'@': 222}), 84: (1, {'@': 222})}, 302: {97: (1, {'@': 494}), 84: (1, {'@': 494})}, 303: {31: (1, {'@': 247}), 21: (1, {'@': 247}), 1: (1, {'@': 247}), 36: (1, {'@': 247}), 37: (1, {'@': 247}), 38: (1, {'@': 247}), 6: (1, {'@': 247}), 2: (1, {'@': 247}), 18: (1, {'@': 247}), 9: (1, {'@': 247}), 39: (1, {'@': 247}), 40: (1, {'@': 247}), 41: (1, {'@': 247}), 15: (1, {'@': 247}), 20: (1, {'@': 247}), 33: (1, {'@': 247}), 42: (1, {'@': 247}), 43: (1, {'@': 247}), 44: (1, {'@': 247}), 45: (1, {'@': 247}), 30: (1, {'@': 247}), 22: (1, {'@': 247}), 11: (1, {'@': 247}), 46: (1, {'@': 247}), 47: (1, {'@': 247}), 48: (1, {'@': 247}), 49: (1, {'@': 247}), 50: (1, {'@': 247}), 10: (1, {'@': 247}), 51: (1, {'@': 247}), 17: (1, {'@': 247}), 26: (1, {'@': 247}), 25: (1, {'@': 247}), 52: (1, {'@': 247}), 53: (1, {'@': 247}), 23: (1, {'@': 247}), 54: (1, {'@': 247}), 55: (1, {'@': 247}), 56: (1, {'@': 247}), 19: (1, {'@': 247}), 57: (1, {'@': 247})}, 304: {31: (1, {'@': 398}), 21: (1, {'@': 398}), 1: (1, {'@': 398}), 36: (1, {'@': 398}), 10: (1, {'@': 398}), 17: (1, {'@': 398}), 6: (1, {'@': 398}), 2: (1, {'@': 398}), 26: (1, {'@': 398}), 18: (1, {'@': 398}), 25: (1, {'@': 398}), 9: (1, {'@': 398}), 11: (1, {'@': 398}), 57: (1, {'@': 398}), 15: (1, {'@': 398}), 20: (1, {'@': 398}), 23: (1, {'@': 398}), 33: (1, {'@': 398}), 43: (1, {'@': 398}), 30: (1, {'@': 398}), 22: (1, {'@': 398}), 19: (1, {'@': 398}), 37: (1, {'@': 398}), 38: (1, {'@': 398}), 39: (1, {'@': 398}), 40: (1, {'@': 398}), 41: (1, {'@': 398}), 42: (1, {'@': 398}), 44: (1, {'@': 398}), 45: (1, {'@': 398}), 46: (1, {'@': 398}), 47: (1, {'@': 398}), 48: (1, {'@': 398}), 49: (1, {'@': 398}), 50: (1, {'@': 398}), 51: (1, {'@': 398}), 52: (1, {'@': 398}), 53: (1, {'@': 398}), 54: (1, {'@': 398}), 55: (1, {'@': 398}), 56: (1, {'@': 398})}, 305: {68: (0, 454), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 64: (0, 466), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 214: (0, 527), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 4: (0, 50), 3: (0, 255), 43: (0, 340), 159: (0, 353), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 306: {53: (0, 377)}, 307: {97: (1, {'@': 136}), 93: (1, {'@': 136}), 76: (1, {'@': 136})}, 308: {58: (1, {'@': 218}), 52: (1, {'@': 218})}, 309: {109: (0, 270), 68: (1, {'@': 260}), 84: (1, {'@': 260})}, 310: {0: (0, 36), 1: (0, 24), 2: (0, 137), 6: (0, 32), 7: (0, 186), 9: (0, 112), 10: (0, 284), 11: (0, 399), 13: (0, 453), 14: (0, 79), 15: (0, 414), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 4: (0, 198), 21: (0, 256), 23: (0, 70), 22: (0, 61), 24: (0, 419), 25: (0, 409), 27: (0, 66), 26: (0, 3), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 35: (0, 105)}, 311: {31: (1, {'@': 90}), 21: (1, {'@': 90}), 1: (1, {'@': 90}), 36: (1, {'@': 90}), 37: (1, {'@': 90}), 38: (1, {'@': 90}), 6: (1, {'@': 90}), 2: (1, {'@': 90}), 18: (1, {'@': 90}), 9: (1, {'@': 90}), 39: (1, {'@': 90}), 40: (1, {'@': 90}), 41: (1, {'@': 90}), 15: (1, {'@': 90}), 20: (1, {'@': 90}), 33: (1, {'@': 90}), 42: (1, {'@': 90}), 43: (1, {'@': 90}), 44: (1, {'@': 90}), 45: (1, {'@': 90}), 30: (1, {'@': 90}), 22: (1, {'@': 90}), 11: (1, {'@': 90}), 46: (1, {'@': 90}), 47: (1, {'@': 90}), 48: (1, {'@': 90}), 49: (1, {'@': 90}), 50: (1, {'@': 90}), 10: (1, {'@': 90}), 51: (1, {'@': 90}), 17: (1, {'@': 90}), 26: (1, {'@': 90}), 25: (1, {'@': 90}), 52: (1, {'@': 90}), 53: (1, {'@': 90}), 23: (1, {'@': 90}), 54: (1, {'@': 90}), 55: (1, {'@': 90}), 56: (1, {'@': 90}), 19: (1, {'@': 90}), 57: (1, {'@': 90})}, 312: {0: (0, 36), 1: (0, 24), 2: (0, 137), 4: (0, 354), 6: (0, 32), 7: (0, 186), 9: (0, 112), 10: (0, 284), 11: (0, 399), 13: (0, 453), 14: (0, 79), 15: (0, 414), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 23: (0, 70), 22: (0, 61), 24: (0, 419), 25: (0, 409), 27: (0, 66), 26: (0, 3), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 35: (0, 105)}, 313: {31: (1, {'@': 89}), 21: (1, {'@': 89}), 1: (1, {'@': 89}), 36: (1, {'@': 89}), 37: (1, {'@': 89}), 38: (1, {'@': 89}), 6: (1, {'@': 89}), 2: (1, {'@': 89}), 18: (1, {'@': 89}), 9: (1, {'@': 89}), 39: (1, {'@': 89}), 40: (1, {'@': 89}), 41: (1, {'@': 89}), 15: (1, {'@': 89}), 20: (1, {'@': 89}), 33: (1, {'@': 89}), 42: (1, {'@': 89}), 43: (1, {'@': 89}), 44: (1, {'@': 89}), 45: (1, {'@': 89}), 30: (1, {'@': 89}), 22: (1, {'@': 89}), 11: (1, {'@': 89}), 46: (1, {'@': 89}), 47: (1, {'@': 89}), 48: (1, {'@': 89}), 49: (1, {'@': 89}), 50: (1, {'@': 89}), 10: (1, {'@': 89}), 51: (1, {'@': 89}), 17: (1, {'@': 89}), 26: (1, {'@': 89}), 25: (1, {'@': 89}), 52: (1, {'@': 89}), 53: (1, {'@': 89}), 23: (1, {'@': 89}), 54: (1, {'@': 89}), 55: (1, {'@': 89}), 56: (1, {'@': 89}), 19: (1, {'@': 89}), 57: (1, {'@': 89})}, 314: {1: (1, {'@': 325}), 69: (1, {'@': 325}), 36: (1, {'@': 325}), 70: (1, {'@': 325}), 38: (1, {'@': 325}), 71: (1, {'@': 325}), 2: (1, {'@': 325}), 18: (1, {'@': 325}), 39: (1, {'@': 325}), 40: (1, {'@': 325}), 72: (1, {'@': 325}), 58: (1, {'@': 325}), 20: (1, {'@': 325}), 73: (1, {'@': 325}), 42: (1, {'@': 325}), 74: (1, {'@': 325}), 43: (1, {'@': 325}), 75: (1, {'@': 325}), 44: (1, {'@': 325}), 22: (1, {'@': 325}), 76: (1, {'@': 325}), 48: (1, {'@': 325}), 77: (1, {'@': 325}), 78: (1, {'@': 325}), 50: (1, {'@': 325}), 10: (1, {'@': 325}), 68: (1, {'@': 325}), 52: (1, {'@': 325}), 79: (1, {'@': 325}), 53: (1, {'@': 325}), 80: (1, {'@': 325}), 81: (1, {'@': 325}), 23: (1, {'@': 325}), 55: (1, {'@': 325}), 56: (1, {'@': 325}), 19: (1, {'@': 325}), 31: (1, {'@': 325}), 82: (1, {'@': 325}), 21: (1, {'@': 325}), 83: (1, {'@': 325}), 37: (1, {'@': 325}), 84: (1, {'@': 325}), 6: (1, {'@': 325}), 9: (1, {'@': 325}), 41: (1, {'@': 325}), 15: (1, {'@': 325}), 85: (1, {'@': 325}), 86: (1, {'@': 325}), 33: (1, {'@': 325}), 87: (1, {'@': 325}), 45: (1, {'@': 325}), 30: (1, {'@': 325}), 11: (1, {'@': 325}), 88: (1, {'@': 325}), 46: (1, {'@': 325}), 47: (1, {'@': 325}), 89: (1, {'@': 325}), 49: (1, {'@': 325}), 90: (1, {'@': 325}), 51: (1, {'@': 325}), 91: (1, {'@': 325}), 17: (1, {'@': 325}), 26: (1, {'@': 325}), 25: (1, {'@': 325}), 92: (1, {'@': 325}), 93: (1, {'@': 325}), 94: (1, {'@': 325}), 57: (1, {'@': 325}), 95: (1, {'@': 325}), 96: (1, {'@': 325}), 54: (1, {'@': 325}), 97: (1, {'@': 325}), 98: (1, {'@': 325}), 99: (1, {'@': 325}), 100: (1, {'@': 325}), 101: (1, {'@': 325}), 102: (1, {'@': 325}), 103: (1, {'@': 325}), 104: (1, {'@': 325}), 105: (1, {'@': 325}), 106: (1, {'@': 325}), 107: (1, {'@': 325}), 108: (1, {'@': 325}), 109: (1, {'@': 325})}, 315: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 62: (0, 328), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 64: (0, 550), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 57: (0, 9)}, 316: {90: (0, 236), 25: (1, {'@': 219}), 53: (1, {'@': 219})}, 317: {58: (1, {'@': 172}), 52: (1, {'@': 172})}, 318: {191: (0, 39), 64: (0, 115), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 192: (0, 226), 58: (1, {'@': 206}), 52: (1, {'@': 206})}, 319: {206: (0, 402), 207: (0, 369), 209: (0, 418), 37: (0, 411), 68: (0, 495), 76: (1, {'@': 353}), 84: (1, {'@': 353})}, 320: {93: (1, {'@': 94})}, 321: {58: (1, {'@': 216}), 52: (1, {'@': 216})}, 322: {58: (1, {'@': 214}), 52: (1, {'@': 214})}, 323: {31: (1, {'@': 239}), 21: (1, {'@': 239}), 1: (1, {'@': 239}), 36: (1, {'@': 239}), 37: (1, {'@': 239}), 38: (1, {'@': 239}), 6: (1, {'@': 239}), 2: (1, {'@': 239}), 18: (1, {'@': 239}), 9: (1, {'@': 239}), 39: (1, {'@': 239}), 40: (1, {'@': 239}), 41: (1, {'@': 239}), 15: (1, {'@': 239}), 20: (1, {'@': 239}), 33: (1, {'@': 239}), 42: (1, {'@': 239}), 43: (1, {'@': 239}), 44: (1, {'@': 239}), 45: (1, {'@': 239}), 30: (1, {'@': 239}), 22: (1, {'@': 239}), 11: (1, {'@': 239}), 46: (1, {'@': 239}), 47: (1, {'@': 239}), 48: (1, {'@': 239}), 49: (1, {'@': 239}), 50: (1, {'@': 239}), 10: (1, {'@': 239}), 51: (1, {'@': 239}), 17: (1, {'@': 239}), 26: (1, {'@': 239}), 25: (1, {'@': 239}), 52: (1, {'@': 239}), 53: (1, {'@': 239}), 23: (1, {'@': 239}), 54: (1, {'@': 239}), 55: (1, {'@': 239}), 56: (1, {'@': 239}), 19: (1, {'@': 239}), 57: (1, {'@': 239})}, 324: {93: (1, {'@': 102})}, 325: {0: (0, 36), 1: (0, 24), 2: (0, 137), 4: (0, 50), 6: (0, 32), 7: (0, 186), 9: (0, 112), 10: (0, 284), 11: (0, 399), 13: (0, 453), 14: (0, 79), 15: (0, 414), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 12: (0, 472), 23: (0, 70), 22: (0, 61), 24: (0, 419), 25: (0, 409), 27: (0, 66), 26: (0, 3), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 35: (0, 105)}, 326: {77: (0, 184), 31: (1, {'@': 264}), 21: (1, {'@': 264}), 1: (1, {'@': 264}), 36: (1, {'@': 264}), 37: (1, {'@': 264}), 38: (1, {'@': 264}), 6: (1, {'@': 264}), 2: (1, {'@': 264}), 18: (1, {'@': 264}), 9: (1, {'@': 264}), 39: (1, {'@': 264}), 40: (1, {'@': 264}), 41: (1, {'@': 264}), 15: (1, {'@': 264}), 20: (1, {'@': 264}), 33: (1, {'@': 264}), 42: (1, {'@': 264}), 43: (1, {'@': 264}), 44: (1, {'@': 264}), 45: (1, {'@': 264}), 30: (1, {'@': 264}), 22: (1, {'@': 264}), 11: (1, {'@': 264}), 46: (1, {'@': 264}), 47: (1, {'@': 264}), 48: (1, {'@': 264}), 49: (1, {'@': 264}), 50: (1, {'@': 264}), 10: (1, {'@': 264}), 51: (1, {'@': 264}), 17: (1, {'@': 264}), 26: (1, {'@': 264}), 25: (1, {'@': 264}), 52: (1, {'@': 264}), 53: (1, {'@': 264}), 23: (1, {'@': 264}), 54: (1, {'@': 264}), 55: (1, {'@': 264}), 56: (1, {'@': 264}), 19: (1, {'@': 264}), 57: (1, {'@': 264})}, 327: {84: (0, 342), 58: (1, {'@': 234}), 52: (1, {'@': 234})}, 328: {31: (1, {'@': 506}), 21: (1, {'@': 506}), 1: (1, {'@': 506}), 36: (1, {'@': 506}), 6: (1, {'@': 506}), 2: (1, {'@': 506}), 18: (1, {'@': 506}), 9: (1, {'@': 506}), 15: (1, {'@': 506}), 20: (1, {'@': 506}), 33: (1, {'@': 506}), 43: (1, {'@': 506}), 30: (1, {'@': 506}), 22: (1, {'@': 506}), 11: (1, {'@': 506}), 10: (1, {'@': 506}), 17: (1, {'@': 506}), 26: (1, {'@': 506}), 25: (1, {'@': 506}), 57: (1, {'@': 506}), 23: (1, {'@': 506}), 19: (1, {'@': 506})}, 329: {31: (1, {'@': 472}), 21: (1, {'@': 472}), 1: (1, {'@': 472}), 36: (1, {'@': 472}), 37: (1, {'@': 472}), 38: (1, {'@': 472}), 6: (1, {'@': 472}), 2: (1, {'@': 472}), 18: (1, {'@': 472}), 9: (1, {'@': 472}), 39: (1, {'@': 472}), 40: (1, {'@': 472}), 41: (1, {'@': 472}), 15: (1, {'@': 472}), 20: (1, {'@': 472}), 33: (1, {'@': 472}), 42: (1, {'@': 472}), 43: (1, {'@': 472}), 44: (1, {'@': 472}), 45: (1, {'@': 472}), 30: (1, {'@': 472}), 22: (1, {'@': 472}), 11: (1, {'@': 472}), 46: (1, {'@': 472}), 47: (1, {'@': 472}), 48: (1, {'@': 472}), 49: (1, {'@': 472}), 50: (1, {'@': 472}), 10: (1, {'@': 472}), 17: (1, {'@': 472}), 26: (1, {'@': 472}), 25: (1, {'@': 472}), 53: (1, {'@': 472}), 57: (1, {'@': 472}), 23: (1, {'@': 472}), 54: (1, {'@': 472}), 55: (1, {'@': 472}), 56: (1, {'@': 472}), 19: (1, {'@': 472})}, 330: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 199: (0, 357), 2: (0, 137), 12: (0, 397), 45: (0, 356), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 203: (0, 29), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 64: (0, 118), 43: (0, 340), 65: (0, 85), 11: (0, 399), 202: (0, 71), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 81: (0, 373), 23: (0, 70), 22: (0, 61), 24: (0, 419), 200: (0, 37), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 93: (1, {'@': 407})}, 331: {58: (1, {'@': 178}), 52: (1, {'@': 178})}, 332: {58: (1, {'@': 171}), 52: (1, {'@': 171})}, 333: {68: (0, 205)}, 334: {58: (1, {'@': 201}), 52: (1, {'@': 201})}, 335: {191: (0, 39), 192: (0, 481), 64: (0, 115), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 4: (0, 50), 3: (0, 255), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 336: {1: (1, {'@': 475}), 69: (1, {'@': 475}), 36: (1, {'@': 475}), 103: (1, {'@': 475}), 70: (1, {'@': 475}), 38: (1, {'@': 475}), 71: (1, {'@': 475}), 2: (1, {'@': 475}), 18: (1, {'@': 475}), 39: (1, {'@': 475}), 40: (1, {'@': 475}), 58: (1, {'@': 475}), 20: (1, {'@': 475}), 73: (1, {'@': 475}), 42: (1, {'@': 475}), 43: (1, {'@': 475}), 107: (1, {'@': 475}), 44: (1, {'@': 475}), 22: (1, {'@': 475}), 76: (1, {'@': 475}), 48: (1, {'@': 475}), 77: (1, {'@': 475}), 50: (1, {'@': 475}), 10: (1, {'@': 475}), 68: (1, {'@': 475}), 52: (1, {'@': 475}), 79: (1, {'@': 475}), 53: (1, {'@': 475}), 23: (1, {'@': 475}), 55: (1, {'@': 475}), 56: (1, {'@': 475}), 19: (1, {'@': 475}), 31: (1, {'@': 475}), 21: (1, {'@': 475}), 83: (1, {'@': 475}), 37: (1, {'@': 475}), 84: (1, {'@': 475}), 6: (1, {'@': 475}), 9: (1, {'@': 475}), 41: (1, {'@': 475}), 15: (1, {'@': 475}), 85: (1, {'@': 475}), 108: (1, {'@': 475}), 86: (1, {'@': 475}), 33: (1, {'@': 475}), 87: (1, {'@': 475}), 45: (1, {'@': 475}), 30: (1, {'@': 475}), 11: (1, {'@': 475}), 88: (1, {'@': 475}), 46: (1, {'@': 475}), 47: (1, {'@': 475}), 49: (1, {'@': 475}), 51: (1, {'@': 475}), 109: (1, {'@': 475}), 17: (1, {'@': 475}), 26: (1, {'@': 475}), 25: (1, {'@': 475}), 94: (1, {'@': 475}), 93: (1, {'@': 475}), 57: (1, {'@': 475}), 96: (1, {'@': 475}), 54: (1, {'@': 475}), 97: (1, {'@': 475}), 98: (1, {'@': 475})}, 337: {25: (1, {'@': 464}), 90: (1, {'@': 464}), 53: (1, {'@': 464}), 58: (1, {'@': 464}), 84: (1, {'@': 464}), 109: (1, {'@': 464}), 52: (1, {'@': 464})}, 338: {84: (0, 569), 93: (1, {'@': 413})}, 339: {31: (1, {'@': 262}), 21: (1, {'@': 262}), 1: (1, {'@': 262}), 36: (1, {'@': 262}), 37: (1, {'@': 262}), 38: (1, {'@': 262}), 6: (1, {'@': 262}), 2: (1, {'@': 262}), 18: (1, {'@': 262}), 9: (1, {'@': 262}), 39: (1, {'@': 262}), 40: (1, {'@': 262}), 41: (1, {'@': 262}), 15: (1, {'@': 262}), 20: (1, {'@': 262}), 33: (1, {'@': 262}), 42: (1, {'@': 262}), 43: (1, {'@': 262}), 44: (1, {'@': 262}), 45: (1, {'@': 262}), 30: (1, {'@': 262}), 22: (1, {'@': 262}), 11: (1, {'@': 262}), 46: (1, {'@': 262}), 47: (1, {'@': 262}), 48: (1, {'@': 262}), 49: (1, {'@': 262}), 50: (1, {'@': 262}), 10: (1, {'@': 262}), 51: (1, {'@': 262}), 17: (1, {'@': 262}), 26: (1, {'@': 262}), 25: (1, {'@': 262}), 52: (1, {'@': 262}), 53: (1, {'@': 262}), 23: (1, {'@': 262}), 54: (1, {'@': 262}), 55: (1, {'@': 262}), 56: (1, {'@': 262}), 19: (1, {'@': 262}), 57: (1, {'@': 262})}, 340: {215: (0, 351), 45: (0, 416), 25: (0, 409), 35: (0, 603), 216: (0, 433), 81: (0, 464), 217: (0, 427), 68: (0, 407), 218: (0, 445)}, 341: {0: (0, 36), 1: (0, 24), 2: (0, 137), 4: (0, 50), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 16: (0, 523), 15: (0, 414), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 26: (0, 3), 27: (0, 66), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 35: (0, 105)}, 342: {25: (0, 409), 35: (0, 443)}, 343: {31: (1, {'@': 305}), 21: (1, {'@': 305}), 1: (1, {'@': 305}), 6: (1, {'@': 305}), 2: (1, {'@': 305}), 18: (1, {'@': 305}), 9: (1, {'@': 305}), 15: (1, {'@': 305}), 20: (1, {'@': 305}), 33: (1, {'@': 305}), 30: (1, {'@': 305}), 22: (1, {'@': 305}), 11: (1, {'@': 305}), 10: (1, {'@': 305}), 17: (1, {'@': 305}), 26: (1, {'@': 305}), 25: (1, {'@': 305}), 23: (1, {'@': 305}), 19: (1, {'@': 305})}, 344: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 114: (0, 364), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 119: (0, 378), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 45: (0, 0), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 64: (0, 267), 93: (1, {'@': 352})}, 345: {97: (1, {'@': 364}), 84: (1, {'@': 364})}, 346: {206: (0, 402), 207: (0, 369), 209: (0, 418), 37: (0, 411), 77: (0, 439), 93: (1, {'@': 424}), 84: (1, {'@': 424})}, 347: {35: (0, 504), 196: (0, 564), 140: (0, 159), 25: (0, 409)}, 348: {89: (0, 576), 1: (1, {'@': 291}), 69: (1, {'@': 291}), 36: (1, {'@': 291}), 70: (1, {'@': 291}), 38: (1, {'@': 291}), 71: (1, {'@': 291}), 2: (1, {'@': 291}), 18: (1, {'@': 291}), 39: (1, {'@': 291}), 40: (1, {'@': 291}), 58: (1, {'@': 291}), 20: (1, {'@': 291}), 73: (1, {'@': 291}), 42: (1, {'@': 291}), 74: (1, {'@': 291}), 43: (1, {'@': 291}), 44: (1, {'@': 291}), 22: (1, {'@': 291}), 76: (1, {'@': 291}), 48: (1, {'@': 291}), 77: (1, {'@': 291}), 50: (1, {'@': 291}), 10: (1, {'@': 291}), 68: (1, {'@': 291}), 52: (1, {'@': 291}), 79: (1, {'@': 291}), 53: (1, {'@': 291}), 80: (1, {'@': 291}), 23: (1, {'@': 291}), 55: (1, {'@': 291}), 56: (1, {'@': 291}), 19: (1, {'@': 291}), 31: (1, {'@': 291}), 21: (1, {'@': 291}), 83: (1, {'@': 291}), 37: (1, {'@': 291}), 84: (1, {'@': 291}), 6: (1, {'@': 291}), 9: (1, {'@': 291}), 41: (1, {'@': 291}), 15: (1, {'@': 291}), 85: (1, {'@': 291}), 86: (1, {'@': 291}), 33: (1, {'@': 291}), 87: (1, {'@': 291}), 45: (1, {'@': 291}), 30: (1, {'@': 291}), 11: (1, {'@': 291}), 88: (1, {'@': 291}), 46: (1, {'@': 291}), 47: (1, {'@': 291}), 49: (1, {'@': 291}), 51: (1, {'@': 291}), 91: (1, {'@': 291}), 17: (1, {'@': 291}), 26: (1, {'@': 291}), 25: (1, {'@': 291}), 93: (1, {'@': 291}), 94: (1, {'@': 291}), 57: (1, {'@': 291}), 96: (1, {'@': 291}), 54: (1, {'@': 291}), 97: (1, {'@': 291}), 98: (1, {'@': 291}), 99: (1, {'@': 291}), 100: (1, {'@': 291}), 101: (1, {'@': 291}), 102: (1, {'@': 291}), 105: (1, {'@': 291}), 106: (1, {'@': 291}), 103: (1, {'@': 291}), 104: (1, {'@': 291}), 107: (1, {'@': 291}), 108: (1, {'@': 291}), 109: (1, {'@': 291})}, 349: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 81: (0, 560), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 64: (0, 480), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 163: (0, 516), 76: (1, {'@': 383})}, 350: {215: (0, 351), 45: (0, 416), 25: (0, 409), 35: (0, 603), 216: (0, 433), 81: (0, 464), 217: (0, 427), 68: (0, 224), 218: (0, 143)}, 351: {84: (0, 461), 219: (0, 441), 68: (1, {'@': 144})}, 352: {31: (1, {'@': 266}), 21: (1, {'@': 266}), 1: (1, {'@': 266}), 36: (1, {'@': 266}), 37: (1, {'@': 266}), 38: (1, {'@': 266}), 6: (1, {'@': 266}), 2: (1, {'@': 266}), 18: (1, {'@': 266}), 9: (1, {'@': 266}), 39: (1, {'@': 266}), 40: (1, {'@': 266}), 41: (1, {'@': 266}), 15: (1, {'@': 266}), 20: (1, {'@': 266}), 33: (1, {'@': 266}), 42: (1, {'@': 266}), 43: (1, {'@': 266}), 44: (1, {'@': 266}), 45: (1, {'@': 266}), 30: (1, {'@': 266}), 22: (1, {'@': 266}), 11: (1, {'@': 266}), 46: (1, {'@': 266}), 47: (1, {'@': 266}), 48: (1, {'@': 266}), 49: (1, {'@': 266}), 50: (1, {'@': 266}), 10: (1, {'@': 266}), 51: (1, {'@': 266}), 17: (1, {'@': 266}), 26: (1, {'@': 266}), 25: (1, {'@': 266}), 52: (1, {'@': 266}), 53: (1, {'@': 266}), 23: (1, {'@': 266}), 54: (1, {'@': 266}), 55: (1, {'@': 266}), 56: (1, {'@': 266}), 19: (1, {'@': 266}), 57: (1, {'@': 266})}, 353: {220: (0, 125), 84: (0, 128), 97: (1, {'@': 355})}, 354: {36: (1, {'@': 489}), 103: (1, {'@': 489}), 70: (1, {'@': 489}), 38: (1, {'@': 489}), 71: (1, {'@': 489}), 2: (1, {'@': 489}), 18: (1, {'@': 489}), 39: (1, {'@': 489}), 20: (1, {'@': 489}), 74: (1, {'@': 489}), 75: (1, {'@': 489}), 22: (1, {'@': 489}), 76: (1, {'@': 489}), 78: (1, {'@': 489}), 50: (1, {'@': 489}), 52: (1, {'@': 489}), 23: (1, {'@': 489}), 19: (1, {'@': 489}), 21: (1, {'@': 489}), 102: (1, {'@': 489}), 84: (1, {'@': 489}), 15: (1, {'@': 489}), 85: (1, {'@': 489}), 108: (1, {'@': 489}), 46: (1, {'@': 489}), 89: (1, {'@': 489}), 109: (1, {'@': 489}), 26: (1, {'@': 489}), 25: (1, {'@': 489}), 93: (1, {'@': 489}), 94: (1, {'@': 489}), 57: (1, {'@': 489}), 96: (1, {'@': 489}), 54: (1, {'@': 489}), 98: (1, {'@': 489}), 1: (1, {'@': 489}), 101: (1, {'@': 489}), 69: (1, {'@': 489}), 40: (1, {'@': 489}), 72: (1, {'@': 489}), 58: (1, {'@': 489}), 106: (1, {'@': 489}), 73: (1, {'@': 489}), 42: (1, {'@': 489}), 43: (1, {'@': 489}), 107: (1, {'@': 489}), 44: (1, {'@': 489}), 48: (1, {'@': 489}), 77: (1, {'@': 489}), 10: (1, {'@': 489}), 68: (1, {'@': 489}), 79: (1, {'@': 489}), 53: (1, {'@': 489}), 80: (1, {'@': 489}), 105: (1, {'@': 489}), 55: (1, {'@': 489}), 56: (1, {'@': 489}), 31: (1, {'@': 489}), 82: (1, {'@': 489}), 99: (1, {'@': 489}), 100: (1, {'@': 489}), 83: (1, {'@': 489}), 37: (1, {'@': 489}), 6: (1, {'@': 489}), 9: (1, {'@': 489}), 41: (1, {'@': 489}), 86: (1, {'@': 489}), 33: (1, {'@': 489}), 87: (1, {'@': 489}), 45: (1, {'@': 489}), 30: (1, {'@': 489}), 11: (1, {'@': 489}), 88: (1, {'@': 489}), 47: (1, {'@': 489}), 49: (1, {'@': 489}), 51: (1, {'@': 489}), 91: (1, {'@': 489}), 17: (1, {'@': 489}), 104: (1, {'@': 489}), 92: (1, {'@': 489}), 95: (1, {'@': 489}), 97: (1, {'@': 489})}, 355: {39: (0, 179), 221: (0, 468), 76: (1, {'@': 440})}, 356: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 64: (0, 84)}, 357: {160: (0, 595), 222: (0, 133), 84: (0, 286), 93: (1, {'@': 419})}, 358: {31: (1, {'@': 238}), 21: (1, {'@': 238}), 1: (1, {'@': 238}), 36: (1, {'@': 238}), 37: (1, {'@': 238}), 38: (1, {'@': 238}), 6: (1, {'@': 238}), 2: (1, {'@': 238}), 18: (1, {'@': 238}), 9: (1, {'@': 238}), 39: (1, {'@': 238}), 40: (1, {'@': 238}), 41: (1, {'@': 238}), 15: (1, {'@': 238}), 20: (1, {'@': 238}), 33: (1, {'@': 238}), 42: (1, {'@': 238}), 43: (1, {'@': 238}), 44: (1, {'@': 238}), 45: (1, {'@': 238}), 30: (1, {'@': 238}), 22: (1, {'@': 238}), 11: (1, {'@': 238}), 46: (1, {'@': 238}), 47: (1, {'@': 238}), 48: (1, {'@': 238}), 49: (1, {'@': 238}), 50: (1, {'@': 238}), 10: (1, {'@': 238}), 51: (1, {'@': 238}), 17: (1, {'@': 238}), 26: (1, {'@': 238}), 25: (1, {'@': 238}), 52: (1, {'@': 238}), 53: (1, {'@': 238}), 23: (1, {'@': 238}), 54: (1, {'@': 238}), 55: (1, {'@': 238}), 56: (1, {'@': 238}), 19: (1, {'@': 238}), 57: (1, {'@': 238})}, 359: {119: (0, 300), 48: (0, 196), 54: (0, 43), 5: (0, 203), 6: (0, 32), 7: (0, 186), 120: (0, 231), 121: (0, 30), 53: (0, 243), 8: (0, 276), 42: (0, 209), 44: (0, 156), 10: (0, 284), 122: (0, 285), 41: (0, 318), 2: (0, 137), 12: (0, 397), 123: (0, 134), 16: (0, 244), 114: (0, 364), 15: (0, 414), 35: (0, 31), 9: (0, 112), 137: (0, 528), 21: (0, 256), 52: (0, 465), 20: (0, 415), 124: (0, 332), 125: (0, 334), 126: (0, 296), 60: (0, 408), 127: (0, 97), 25: (0, 409), 61: (0, 64), 19: (0, 545), 38: (0, 75), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 40: (0, 69), 128: (0, 60), 129: (0, 438), 130: (0, 27), 1: (0, 24), 0: (0, 36), 63: (0, 25), 4: (0, 50), 45: (0, 0), 3: (0, 255), 131: (0, 425), 132: (0, 72), 43: (0, 340), 133: (0, 89), 134: (0, 76), 65: (0, 85), 135: (0, 331), 11: (0, 399), 14: (0, 79), 13: (0, 453), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 136: (0, 317), 24: (0, 419), 56: (0, 456), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 64: (0, 267), 138: (0, 449)}, 360: {1: (1, {'@': 332}), 69: (1, {'@': 332}), 36: (1, {'@': 332}), 70: (1, {'@': 332}), 38: (1, {'@': 332}), 71: (1, {'@': 332}), 2: (1, {'@': 332}), 18: (1, {'@': 332}), 39: (1, {'@': 332}), 40: (1, {'@': 332}), 72: (1, {'@': 332}), 58: (1, {'@': 332}), 20: (1, {'@': 332}), 73: (1, {'@': 332}), 42: (1, {'@': 332}), 74: (1, {'@': 332}), 43: (1, {'@': 332}), 75: (1, {'@': 332}), 44: (1, {'@': 332}), 22: (1, {'@': 332}), 76: (1, {'@': 332}), 48: (1, {'@': 332}), 77: (1, {'@': 332}), 78: (1, {'@': 332}), 50: (1, {'@': 332}), 10: (1, {'@': 332}), 68: (1, {'@': 332}), 52: (1, {'@': 332}), 79: (1, {'@': 332}), 53: (1, {'@': 332}), 80: (1, {'@': 332}), 81: (1, {'@': 332}), 23: (1, {'@': 332}), 55: (1, {'@': 332}), 56: (1, {'@': 332}), 19: (1, {'@': 332}), 31: (1, {'@': 332}), 82: (1, {'@': 332}), 21: (1, {'@': 332}), 83: (1, {'@': 332}), 37: (1, {'@': 332}), 84: (1, {'@': 332}), 6: (1, {'@': 332}), 9: (1, {'@': 332}), 41: (1, {'@': 332}), 15: (1, {'@': 332}), 85: (1, {'@': 332}), 86: (1, {'@': 332}), 33: (1, {'@': 332}), 87: (1, {'@': 332}), 45: (1, {'@': 332}), 30: (1, {'@': 332}), 11: (1, {'@': 332}), 88: (1, {'@': 332}), 46: (1, {'@': 332}), 47: (1, {'@': 332}), 89: (1, {'@': 332}), 49: (1, {'@': 332}), 90: (1, {'@': 332}), 51: (1, {'@': 332}), 91: (1, {'@': 332}), 17: (1, {'@': 332}), 26: (1, {'@': 332}), 25: (1, {'@': 332}), 92: (1, {'@': 332}), 93: (1, {'@': 332}), 94: (1, {'@': 332}), 57: (1, {'@': 332}), 95: (1, {'@': 332}), 96: (1, {'@': 332}), 54: (1, {'@': 332}), 97: (1, {'@': 332}), 98: (1, {'@': 332}), 99: (1, {'@': 332}), 100: (1, {'@': 332}), 101: (1, {'@': 332}), 102: (1, {'@': 332}), 103: (1, {'@': 332}), 104: (1, {'@': 332}), 105: (1, {'@': 332}), 106: (1, {'@': 332}), 107: (1, {'@': 332}), 108: (1, {'@': 332}), 109: (1, {'@': 332})}, 361: {52: (1, {'@': 462}), 58: (1, {'@': 462}), 84: (1, {'@': 462})}, 362: {93: (1, {'@': 409})}, 363: {93: (1, {'@': 423}), 84: (1, {'@': 423})}, 364: {83: (1, {'@': 354}), 69: (1, {'@': 354}), 77: (1, {'@': 354}), 84: (1, {'@': 354}), 70: (1, {'@': 354}), 71: (1, {'@': 354}), 52: (1, {'@': 354}), 94: (1, {'@': 354}), 79: (1, {'@': 354}), 85: (1, {'@': 354}), 58: (1, {'@': 354}), 86: (1, {'@': 354}), 73: (1, {'@': 354}), 96: (1, {'@': 354}), 87: (1, {'@': 354}), 98: (1, {'@': 354}), 88: (1, {'@': 354}), 1: (1, {'@': 354}), 36: (1, {'@': 354}), 38: (1, {'@': 354}), 2: (1, {'@': 354}), 18: (1, {'@': 354}), 39: (1, {'@': 354}), 40: (1, {'@': 354}), 20: (1, {'@': 354}), 42: (1, {'@': 354}), 43: (1, {'@': 354}), 44: (1, {'@': 354}), 22: (1, {'@': 354}), 48: (1, {'@': 354}), 50: (1, {'@': 354}), 10: (1, {'@': 354}), 53: (1, {'@': 354}), 23: (1, {'@': 354}), 55: (1, {'@': 354}), 56: (1, {'@': 354}), 19: (1, {'@': 354}), 31: (1, {'@': 354}), 21: (1, {'@': 354}), 37: (1, {'@': 354}), 6: (1, {'@': 354}), 9: (1, {'@': 354}), 41: (1, {'@': 354}), 15: (1, {'@': 354}), 33: (1, {'@': 354}), 45: (1, {'@': 354}), 30: (1, {'@': 354}), 11: (1, {'@': 354}), 46: (1, {'@': 354}), 47: (1, {'@': 354}), 49: (1, {'@': 354}), 51: (1, {'@': 354}), 17: (1, {'@': 354}), 26: (1, {'@': 354}), 25: (1, {'@': 354}), 57: (1, {'@': 354}), 54: (1, {'@': 354}), 97: (1, {'@': 354}), 76: (1, {'@': 354}), 68: (1, {'@': 354}), 93: (1, {'@': 354})}, 365: {1: (1, {'@': 473}), 69: (1, {'@': 473}), 36: (1, {'@': 473}), 70: (1, {'@': 473}), 38: (1, {'@': 473}), 71: (1, {'@': 473}), 2: (1, {'@': 473}), 18: (1, {'@': 473}), 39: (1, {'@': 473}), 40: (1, {'@': 473}), 58: (1, {'@': 473}), 20: (1, {'@': 473}), 73: (1, {'@': 473}), 42: (1, {'@': 473}), 43: (1, {'@': 473}), 107: (1, {'@': 473}), 44: (1, {'@': 473}), 22: (1, {'@': 473}), 76: (1, {'@': 473}), 48: (1, {'@': 473}), 77: (1, {'@': 473}), 50: (1, {'@': 473}), 10: (1, {'@': 473}), 68: (1, {'@': 473}), 52: (1, {'@': 473}), 79: (1, {'@': 473}), 53: (1, {'@': 473}), 23: (1, {'@': 473}), 55: (1, {'@': 473}), 56: (1, {'@': 473}), 19: (1, {'@': 473}), 31: (1, {'@': 473}), 21: (1, {'@': 473}), 83: (1, {'@': 473}), 37: (1, {'@': 473}), 84: (1, {'@': 473}), 6: (1, {'@': 473}), 9: (1, {'@': 473}), 41: (1, {'@': 473}), 15: (1, {'@': 473}), 85: (1, {'@': 473}), 108: (1, {'@': 473}), 86: (1, {'@': 473}), 33: (1, {'@': 473}), 87: (1, {'@': 473}), 45: (1, {'@': 473}), 30: (1, {'@': 473}), 11: (1, {'@': 473}), 88: (1, {'@': 473}), 46: (1, {'@': 473}), 47: (1, {'@': 473}), 49: (1, {'@': 473}), 51: (1, {'@': 473}), 109: (1, {'@': 473}), 17: (1, {'@': 473}), 26: (1, {'@': 473}), 25: (1, {'@': 473}), 93: (1, {'@': 473}), 94: (1, {'@': 473}), 57: (1, {'@': 473}), 96: (1, {'@': 473}), 54: (1, {'@': 473}), 97: (1, {'@': 473}), 98: (1, {'@': 473})}, 366: {76: (1, {'@': 502}), 84: (1, {'@': 502})}, 367: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 64: (0, 80), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 145: (0, 63), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 68: (0, 106), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 97: (1, {'@': 363}), 84: (1, {'@': 363})}, 368: {58: (1, {'@': 213}), 52: (1, {'@': 213})}, 369: {39: (0, 179), 221: (0, 502), 76: (1, {'@': 442}), 93: (1, {'@': 442})}, 370: {84: (0, 577), 97: (1, {'@': 393}), 76: (1, {'@': 393})}, 371: {93: (0, 538)}, 372: {93: (1, {'@': 411})}, 373: {5: (0, 203), 6: (0, 32), 64: (0, 261), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 374: {93: (0, 314)}, 375: {93: (1, {'@': 410})}, 376: {52: (1, {'@': 451}), 58: (1, {'@': 451})}, 377: {19: (0, 16), 115: (0, 160), 45: (0, 18), 25: (0, 409), 35: (0, 234), 116: (0, 2)}, 378: {83: (1, {'@': 455}), 69: (1, {'@': 455}), 77: (1, {'@': 455}), 84: (1, {'@': 455}), 70: (1, {'@': 455}), 71: (1, {'@': 455}), 52: (1, {'@': 455}), 94: (1, {'@': 455}), 79: (1, {'@': 455}), 85: (1, {'@': 455}), 58: (1, {'@': 455}), 86: (1, {'@': 455}), 73: (1, {'@': 455}), 96: (1, {'@': 455}), 87: (1, {'@': 455}), 98: (1, {'@': 455}), 88: (1, {'@': 455}), 76: (1, {'@': 455}), 93: (1, {'@': 455}), 97: (1, {'@': 455})}, 379: {84: (0, 510), 80: (1, {'@': 373})}, 380: {84: (0, 520), 93: (1, {'@': 404})}, 381: {93: (0, 440), 37: (1, {'@': 353}), 84: (1, {'@': 353})}, 382: {58: (1, {'@': 215}), 52: (1, {'@': 215})}, 383: {160: (0, 380), 84: (0, 330), 93: (1, {'@': 408})}, 384: {1: (1, {'@': 331}), 69: (1, {'@': 331}), 36: (1, {'@': 331}), 70: (1, {'@': 331}), 38: (1, {'@': 331}), 71: (1, {'@': 331}), 2: (1, {'@': 331}), 18: (1, {'@': 331}), 39: (1, {'@': 331}), 40: (1, {'@': 331}), 72: (1, {'@': 331}), 58: (1, {'@': 331}), 20: (1, {'@': 331}), 73: (1, {'@': 331}), 42: (1, {'@': 331}), 74: (1, {'@': 331}), 43: (1, {'@': 331}), 75: (1, {'@': 331}), 44: (1, {'@': 331}), 22: (1, {'@': 331}), 76: (1, {'@': 331}), 48: (1, {'@': 331}), 77: (1, {'@': 331}), 78: (1, {'@': 331}), 50: (1, {'@': 331}), 10: (1, {'@': 331}), 68: (1, {'@': 331}), 52: (1, {'@': 331}), 79: (1, {'@': 331}), 53: (1, {'@': 331}), 80: (1, {'@': 331}), 81: (1, {'@': 331}), 23: (1, {'@': 331}), 55: (1, {'@': 331}), 56: (1, {'@': 331}), 19: (1, {'@': 331}), 31: (1, {'@': 331}), 82: (1, {'@': 331}), 21: (1, {'@': 331}), 83: (1, {'@': 331}), 37: (1, {'@': 331}), 84: (1, {'@': 331}), 6: (1, {'@': 331}), 9: (1, {'@': 331}), 41: (1, {'@': 331}), 15: (1, {'@': 331}), 85: (1, {'@': 331}), 86: (1, {'@': 331}), 33: (1, {'@': 331}), 87: (1, {'@': 331}), 45: (1, {'@': 331}), 30: (1, {'@': 331}), 11: (1, {'@': 331}), 88: (1, {'@': 331}), 46: (1, {'@': 331}), 47: (1, {'@': 331}), 89: (1, {'@': 331}), 49: (1, {'@': 331}), 90: (1, {'@': 331}), 51: (1, {'@': 331}), 91: (1, {'@': 331}), 17: (1, {'@': 331}), 26: (1, {'@': 331}), 25: (1, {'@': 331}), 92: (1, {'@': 331}), 93: (1, {'@': 331}), 94: (1, {'@': 331}), 57: (1, {'@': 331}), 95: (1, {'@': 331}), 96: (1, {'@': 331}), 54: (1, {'@': 331}), 97: (1, {'@': 331}), 98: (1, {'@': 331}), 99: (1, {'@': 331}), 100: (1, {'@': 331}), 101: (1, {'@': 331}), 102: (1, {'@': 331}), 103: (1, {'@': 331}), 104: (1, {'@': 331}), 105: (1, {'@': 331}), 106: (1, {'@': 331}), 107: (1, {'@': 331}), 108: (1, {'@': 331}), 109: (1, {'@': 331})}, 385: {208: (0, 566), 84: (0, 551), 76: (1, {'@': 390})}, 386: {0: (0, 36), 1: (0, 24), 2: (0, 137), 4: (0, 50), 6: (0, 32), 7: (0, 186), 12: (0, 471), 9: (0, 112), 10: (0, 284), 11: (0, 399), 13: (0, 453), 14: (0, 79), 15: (0, 414), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 23: (0, 70), 22: (0, 61), 24: (0, 419), 25: (0, 409), 27: (0, 66), 26: (0, 3), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 35: (0, 105)}, 387: {68: (1, {'@': 142})}, 388: {1: (1, {'@': 477}), 101: (1, {'@': 477}), 36: (1, {'@': 477}), 69: (1, {'@': 477}), 103: (1, {'@': 477}), 70: (1, {'@': 477}), 38: (1, {'@': 477}), 71: (1, {'@': 477}), 2: (1, {'@': 477}), 18: (1, {'@': 477}), 39: (1, {'@': 477}), 40: (1, {'@': 477}), 58: (1, {'@': 477}), 20: (1, {'@': 477}), 106: (1, {'@': 477}), 73: (1, {'@': 477}), 42: (1, {'@': 477}), 43: (1, {'@': 477}), 107: (1, {'@': 477}), 44: (1, {'@': 477}), 22: (1, {'@': 477}), 76: (1, {'@': 477}), 48: (1, {'@': 477}), 77: (1, {'@': 477}), 50: (1, {'@': 477}), 10: (1, {'@': 477}), 68: (1, {'@': 477}), 52: (1, {'@': 477}), 79: (1, {'@': 477}), 53: (1, {'@': 477}), 80: (1, {'@': 477}), 23: (1, {'@': 477}), 105: (1, {'@': 477}), 55: (1, {'@': 477}), 56: (1, {'@': 477}), 19: (1, {'@': 477}), 31: (1, {'@': 477}), 21: (1, {'@': 477}), 99: (1, {'@': 477}), 100: (1, {'@': 477}), 83: (1, {'@': 477}), 37: (1, {'@': 477}), 102: (1, {'@': 477}), 84: (1, {'@': 477}), 6: (1, {'@': 477}), 9: (1, {'@': 477}), 41: (1, {'@': 477}), 15: (1, {'@': 477}), 85: (1, {'@': 477}), 108: (1, {'@': 477}), 86: (1, {'@': 477}), 33: (1, {'@': 477}), 87: (1, {'@': 477}), 45: (1, {'@': 477}), 30: (1, {'@': 477}), 11: (1, {'@': 477}), 88: (1, {'@': 477}), 46: (1, {'@': 477}), 47: (1, {'@': 477}), 49: (1, {'@': 477}), 51: (1, {'@': 477}), 109: (1, {'@': 477}), 17: (1, {'@': 477}), 104: (1, {'@': 477}), 26: (1, {'@': 477}), 25: (1, {'@': 477}), 93: (1, {'@': 477}), 94: (1, {'@': 477}), 57: (1, {'@': 477}), 96: (1, {'@': 477}), 54: (1, {'@': 477}), 97: (1, {'@': 477}), 98: (1, {'@': 477})}, 389: {58: (1, {'@': 236}), 52: (1, {'@': 236})}, 390: {84: (0, 265), 80: (1, {'@': 376})}, 391: {84: (0, 161), 58: (1, {'@': 237}), 52: (1, {'@': 237})}, 392: {0: (0, 36), 1: (0, 24), 2: (0, 137), 3: (0, 255), 4: (0, 50), 45: (0, 0), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 15: (0, 414), 16: (0, 244), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 26: (0, 3), 27: (0, 66), 28: (0, 572), 29: (0, 559), 114: (0, 493), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 34: (0, 521), 35: (0, 105), 80: (1, {'@': 374})}, 393: {206: (0, 402), 209: (0, 418), 158: (0, 463), 37: (0, 411), 84: (0, 344), 207: (0, 457)}, 394: {84: (0, 575), 68: (1, {'@': 151})}, 395: {31: (1, {'@': 471}), 21: (1, {'@': 471}), 1: (1, {'@': 471}), 36: (1, {'@': 471}), 37: (1, {'@': 471}), 38: (1, {'@': 471}), 6: (1, {'@': 471}), 2: (1, {'@': 471}), 18: (1, {'@': 471}), 9: (1, {'@': 471}), 39: (1, {'@': 471}), 40: (1, {'@': 471}), 41: (1, {'@': 471}), 15: (1, {'@': 471}), 20: (1, {'@': 471}), 33: (1, {'@': 471}), 42: (1, {'@': 471}), 43: (1, {'@': 471}), 44: (1, {'@': 471}), 45: (1, {'@': 471}), 30: (1, {'@': 471}), 22: (1, {'@': 471}), 11: (1, {'@': 471}), 46: (1, {'@': 471}), 47: (1, {'@': 471}), 48: (1, {'@': 471}), 49: (1, {'@': 471}), 50: (1, {'@': 471}), 10: (1, {'@': 471}), 17: (1, {'@': 471}), 26: (1, {'@': 471}), 25: (1, {'@': 471}), 53: (1, {'@': 471}), 57: (1, {'@': 471}), 23: (1, {'@': 471}), 54: (1, {'@': 471}), 55: (1, {'@': 471}), 56: (1, {'@': 471}), 19: (1, {'@': 471})}, 396: {25: (1, {'@': 133}), 68: (1, {'@': 133}), 52: (1, {'@': 133}), 58: (1, {'@': 133}), 84: (1, {'@': 133}), 83: (1, {'@': 133}), 69: (1, {'@': 133}), 77: (1, {'@': 133}), 70: (1, {'@': 133}), 71: (1, {'@': 133}), 94: (1, {'@': 133}), 79: (1, {'@': 133}), 85: (1, {'@': 133}), 86: (1, {'@': 133}), 73: (1, {'@': 133}), 96: (1, {'@': 133}), 87: (1, {'@': 133}), 98: (1, {'@': 133}), 88: (1, {'@': 133}), 31: (1, {'@': 133}), 21: (1, {'@': 133}), 1: (1, {'@': 133}), 36: (1, {'@': 133}), 37: (1, {'@': 133}), 38: (1, {'@': 133}), 6: (1, {'@': 133}), 2: (1, {'@': 133}), 18: (1, {'@': 133}), 9: (1, {'@': 133}), 39: (1, {'@': 133}), 40: (1, {'@': 133}), 41: (1, {'@': 133}), 15: (1, {'@': 133}), 20: (1, {'@': 133}), 33: (1, {'@': 133}), 42: (1, {'@': 133}), 43: (1, {'@': 133}), 44: (1, {'@': 133}), 45: (1, {'@': 133}), 30: (1, {'@': 133}), 22: (1, {'@': 133}), 11: (1, {'@': 133}), 46: (1, {'@': 133}), 47: (1, {'@': 133}), 48: (1, {'@': 133}), 49: (1, {'@': 133}), 50: (1, {'@': 133}), 10: (1, {'@': 133}), 51: (1, {'@': 133}), 17: (1, {'@': 133}), 26: (1, {'@': 133}), 53: (1, {'@': 133}), 57: (1, {'@': 133}), 23: (1, {'@': 133}), 54: (1, {'@': 133}), 55: (1, {'@': 133}), 56: (1, {'@': 133}), 19: (1, {'@': 133}), 97: (1, {'@': 133}), 76: (1, {'@': 133}), 109: (1, {'@': 133}), 93: (1, {'@': 133})}, 397: {223: (0, 386), 224: (0, 406), 22: (0, 343), 10: (0, 505), 1: (1, {'@': 296}), 69: (1, {'@': 296}), 36: (1, {'@': 296}), 70: (1, {'@': 296}), 38: (1, {'@': 296}), 71: (1, {'@': 296}), 2: (1, {'@': 296}), 18: (1, {'@': 296}), 39: (1, {'@': 296}), 40: (1, {'@': 296}), 58: (1, {'@': 296}), 20: (1, {'@': 296}), 73: (1, {'@': 296}), 42: (1, {'@': 296}), 74: (1, {'@': 296}), 43: (1, {'@': 296}), 75: (1, {'@': 296}), 44: (1, {'@': 296}), 76: (1, {'@': 296}), 48: (1, {'@': 296}), 77: (1, {'@': 296}), 50: (1, {'@': 296}), 68: (1, {'@': 296}), 52: (1, {'@': 296}), 79: (1, {'@': 296}), 53: (1, {'@': 296}), 80: (1, {'@': 296}), 23: (1, {'@': 296}), 55: (1, {'@': 296}), 56: (1, {'@': 296}), 19: (1, {'@': 296}), 31: (1, {'@': 296}), 21: (1, {'@': 296}), 83: (1, {'@': 296}), 37: (1, {'@': 296}), 84: (1, {'@': 296}), 6: (1, {'@': 296}), 9: (1, {'@': 296}), 41: (1, {'@': 296}), 15: (1, {'@': 296}), 85: (1, {'@': 296}), 86: (1, {'@': 296}), 33: (1, {'@': 296}), 87: (1, {'@': 296}), 45: (1, {'@': 296}), 30: (1, {'@': 296}), 11: (1, {'@': 296}), 88: (1, {'@': 296}), 46: (1, {'@': 296}), 47: (1, {'@': 296}), 89: (1, {'@': 296}), 49: (1, {'@': 296}), 51: (1, {'@': 296}), 91: (1, {'@': 296}), 17: (1, {'@': 296}), 26: (1, {'@': 296}), 25: (1, {'@': 296}), 92: (1, {'@': 296}), 93: (1, {'@': 296}), 94: (1, {'@': 296}), 57: (1, {'@': 296}), 96: (1, {'@': 296}), 54: (1, {'@': 296}), 97: (1, {'@': 296}), 98: (1, {'@': 296}), 99: (1, {'@': 296}), 100: (1, {'@': 296}), 101: (1, {'@': 296}), 102: (1, {'@': 296}), 103: (1, {'@': 296}), 104: (1, {'@': 296}), 105: (1, {'@': 296}), 106: (1, {'@': 296}), 107: (1, {'@': 296}), 108: (1, {'@': 296}), 109: (1, {'@': 296})}, 398: {93: (0, 360)}, 399: {1: (1, {'@': 428}), 69: (1, {'@': 428}), 36: (1, {'@': 428}), 70: (1, {'@': 428}), 38: (1, {'@': 428}), 71: (1, {'@': 428}), 2: (1, {'@': 428}), 18: (1, {'@': 428}), 39: (1, {'@': 428}), 40: (1, {'@': 428}), 72: (1, {'@': 428}), 58: (1, {'@': 428}), 20: (1, {'@': 428}), 73: (1, {'@': 428}), 42: (1, {'@': 428}), 74: (1, {'@': 428}), 43: (1, {'@': 428}), 75: (1, {'@': 428}), 44: (1, {'@': 428}), 22: (1, {'@': 428}), 76: (1, {'@': 428}), 48: (1, {'@': 428}), 77: (1, {'@': 428}), 78: (1, {'@': 428}), 50: (1, {'@': 428}), 10: (1, {'@': 428}), 68: (1, {'@': 428}), 52: (1, {'@': 428}), 79: (1, {'@': 428}), 53: (1, {'@': 428}), 80: (1, {'@': 428}), 81: (1, {'@': 428}), 23: (1, {'@': 428}), 55: (1, {'@': 428}), 56: (1, {'@': 428}), 19: (1, {'@': 428}), 31: (1, {'@': 428}), 82: (1, {'@': 428}), 21: (1, {'@': 428}), 83: (1, {'@': 428}), 37: (1, {'@': 428}), 84: (1, {'@': 428}), 6: (1, {'@': 428}), 9: (1, {'@': 428}), 41: (1, {'@': 428}), 15: (1, {'@': 428}), 85: (1, {'@': 428}), 86: (1, {'@': 428}), 33: (1, {'@': 428}), 87: (1, {'@': 428}), 45: (1, {'@': 428}), 30: (1, {'@': 428}), 11: (1, {'@': 428}), 88: (1, {'@': 428}), 46: (1, {'@': 428}), 47: (1, {'@': 428}), 89: (1, {'@': 428}), 49: (1, {'@': 428}), 90: (1, {'@': 428}), 51: (1, {'@': 428}), 91: (1, {'@': 428}), 17: (1, {'@': 428}), 26: (1, {'@': 428}), 25: (1, {'@': 428}), 92: (1, {'@': 428}), 93: (1, {'@': 428}), 94: (1, {'@': 428}), 57: (1, {'@': 428}), 95: (1, {'@': 428}), 96: (1, {'@': 428}), 54: (1, {'@': 428}), 97: (1, {'@': 428}), 98: (1, {'@': 428}), 99: (1, {'@': 428}), 100: (1, {'@': 428}), 101: (1, {'@': 428}), 102: (1, {'@': 428}), 103: (1, {'@': 428}), 104: (1, {'@': 428}), 105: (1, {'@': 428}), 106: (1, {'@': 428}), 107: (1, {'@': 428}), 108: (1, {'@': 428}), 109: (1, {'@': 428})}, 400: {0: (0, 36), 1: (0, 24), 2: (0, 137), 4: (0, 50), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 3: (0, 582), 14: (0, 79), 15: (0, 414), 16: (0, 244), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 26: (0, 3), 27: (0, 66), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 35: (0, 105)}, 401: {}, 402: {37: (1, {'@': 511}), 39: (1, {'@': 511}), 76: (1, {'@': 511}), 93: (1, {'@': 511}), 97: (1, {'@': 511})}, 403: {31: (1, {'@': 322}), 21: (1, {'@': 322}), 1: (1, {'@': 322}), 6: (1, {'@': 322}), 2: (1, {'@': 322}), 18: (1, {'@': 322}), 9: (1, {'@': 322}), 15: (1, {'@': 322}), 20: (1, {'@': 322}), 33: (1, {'@': 322}), 30: (1, {'@': 322}), 22: (1, {'@': 322}), 11: (1, {'@': 322}), 10: (1, {'@': 322}), 17: (1, {'@': 322}), 26: (1, {'@': 322}), 25: (1, {'@': 322}), 23: (1, {'@': 322}), 19: (1, {'@': 322})}, 404: {217: (0, 111), 25: (0, 409), 35: (0, 603), 215: (0, 96), 81: (0, 464), 68: (1, {'@': 156})}, 405: {68: (1, {'@': 161})}, 406: {22: (0, 343), 10: (0, 505), 223: (0, 325), 1: (1, {'@': 295}), 69: (1, {'@': 295}), 36: (1, {'@': 295}), 70: (1, {'@': 295}), 38: (1, {'@': 295}), 71: (1, {'@': 295}), 2: (1, {'@': 295}), 18: (1, {'@': 295}), 39: (1, {'@': 295}), 40: (1, {'@': 295}), 58: (1, {'@': 295}), 20: (1, {'@': 295}), 73: (1, {'@': 295}), 42: (1, {'@': 295}), 74: (1, {'@': 295}), 43: (1, {'@': 295}), 75: (1, {'@': 295}), 44: (1, {'@': 295}), 76: (1, {'@': 295}), 48: (1, {'@': 295}), 77: (1, {'@': 295}), 50: (1, {'@': 295}), 68: (1, {'@': 295}), 52: (1, {'@': 295}), 79: (1, {'@': 295}), 53: (1, {'@': 295}), 80: (1, {'@': 295}), 23: (1, {'@': 295}), 55: (1, {'@': 295}), 56: (1, {'@': 295}), 19: (1, {'@': 295}), 31: (1, {'@': 295}), 21: (1, {'@': 295}), 83: (1, {'@': 295}), 37: (1, {'@': 295}), 84: (1, {'@': 295}), 6: (1, {'@': 295}), 9: (1, {'@': 295}), 41: (1, {'@': 295}), 15: (1, {'@': 295}), 85: (1, {'@': 295}), 86: (1, {'@': 295}), 33: (1, {'@': 295}), 87: (1, {'@': 295}), 45: (1, {'@': 295}), 30: (1, {'@': 295}), 11: (1, {'@': 295}), 88: (1, {'@': 295}), 46: (1, {'@': 295}), 47: (1, {'@': 295}), 89: (1, {'@': 295}), 49: (1, {'@': 295}), 51: (1, {'@': 295}), 91: (1, {'@': 295}), 17: (1, {'@': 295}), 26: (1, {'@': 295}), 25: (1, {'@': 295}), 92: (1, {'@': 295}), 93: (1, {'@': 295}), 94: (1, {'@': 295}), 57: (1, {'@': 295}), 96: (1, {'@': 295}), 54: (1, {'@': 295}), 97: (1, {'@': 295}), 98: (1, {'@': 295}), 99: (1, {'@': 295}), 100: (1, {'@': 295}), 101: (1, {'@': 295}), 102: (1, {'@': 295}), 103: (1, {'@': 295}), 104: (1, {'@': 295}), 105: (1, {'@': 295}), 106: (1, {'@': 295}), 107: (1, {'@': 295}), 108: (1, {'@': 295}), 109: (1, {'@': 295})}, 407: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 64: (0, 498), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 408: {39: (0, 246), 25: (1, {'@': 271}), 68: (1, {'@': 271}), 52: (1, {'@': 271}), 58: (1, {'@': 271}), 84: (1, {'@': 271}), 83: (1, {'@': 271}), 69: (1, {'@': 271}), 77: (1, {'@': 271}), 70: (1, {'@': 271}), 71: (1, {'@': 271}), 94: (1, {'@': 271}), 79: (1, {'@': 271}), 85: (1, {'@': 271}), 86: (1, {'@': 271}), 73: (1, {'@': 271}), 96: (1, {'@': 271}), 87: (1, {'@': 271}), 98: (1, {'@': 271}), 88: (1, {'@': 271}), 31: (1, {'@': 271}), 21: (1, {'@': 271}), 1: (1, {'@': 271}), 36: (1, {'@': 271}), 37: (1, {'@': 271}), 38: (1, {'@': 271}), 6: (1, {'@': 271}), 2: (1, {'@': 271}), 18: (1, {'@': 271}), 9: (1, {'@': 271}), 40: (1, {'@': 271}), 41: (1, {'@': 271}), 15: (1, {'@': 271}), 20: (1, {'@': 271}), 33: (1, {'@': 271}), 42: (1, {'@': 271}), 43: (1, {'@': 271}), 44: (1, {'@': 271}), 45: (1, {'@': 271}), 30: (1, {'@': 271}), 22: (1, {'@': 271}), 11: (1, {'@': 271}), 46: (1, {'@': 271}), 47: (1, {'@': 271}), 48: (1, {'@': 271}), 49: (1, {'@': 271}), 50: (1, {'@': 271}), 10: (1, {'@': 271}), 51: (1, {'@': 271}), 17: (1, {'@': 271}), 26: (1, {'@': 271}), 53: (1, {'@': 271}), 57: (1, {'@': 271}), 23: (1, {'@': 271}), 54: (1, {'@': 271}), 55: (1, {'@': 271}), 56: (1, {'@': 271}), 19: (1, {'@': 271}), 97: (1, {'@': 271}), 76: (1, {'@': 271}), 109: (1, {'@': 271}), 93: (1, {'@': 271})}, 409: {1: (1, {'@': 436}), 69: (1, {'@': 436}), 36: (1, {'@': 436}), 70: (1, {'@': 436}), 38: (1, {'@': 436}), 71: (1, {'@': 436}), 2: (1, {'@': 436}), 18: (1, {'@': 436}), 39: (1, {'@': 436}), 40: (1, {'@': 436}), 72: (1, {'@': 436}), 58: (1, {'@': 436}), 20: (1, {'@': 436}), 73: (1, {'@': 436}), 42: (1, {'@': 436}), 74: (1, {'@': 436}), 43: (1, {'@': 436}), 75: (1, {'@': 436}), 44: (1, {'@': 436}), 22: (1, {'@': 436}), 76: (1, {'@': 436}), 48: (1, {'@': 436}), 77: (1, {'@': 436}), 78: (1, {'@': 436}), 50: (1, {'@': 436}), 10: (1, {'@': 436}), 68: (1, {'@': 436}), 52: (1, {'@': 436}), 79: (1, {'@': 436}), 53: (1, {'@': 436}), 80: (1, {'@': 436}), 81: (1, {'@': 436}), 23: (1, {'@': 436}), 55: (1, {'@': 436}), 56: (1, {'@': 436}), 19: (1, {'@': 436}), 31: (1, {'@': 436}), 82: (1, {'@': 436}), 21: (1, {'@': 436}), 83: (1, {'@': 436}), 37: (1, {'@': 436}), 84: (1, {'@': 436}), 6: (1, {'@': 436}), 9: (1, {'@': 436}), 41: (1, {'@': 436}), 15: (1, {'@': 436}), 85: (1, {'@': 436}), 86: (1, {'@': 436}), 33: (1, {'@': 436}), 87: (1, {'@': 436}), 45: (1, {'@': 436}), 30: (1, {'@': 436}), 11: (1, {'@': 436}), 88: (1, {'@': 436}), 46: (1, {'@': 436}), 47: (1, {'@': 436}), 89: (1, {'@': 436}), 49: (1, {'@': 436}), 90: (1, {'@': 436}), 51: (1, {'@': 436}), 91: (1, {'@': 436}), 17: (1, {'@': 436}), 26: (1, {'@': 436}), 25: (1, {'@': 436}), 92: (1, {'@': 436}), 93: (1, {'@': 436}), 94: (1, {'@': 436}), 57: (1, {'@': 436}), 95: (1, {'@': 436}), 96: (1, {'@': 436}), 54: (1, {'@': 436}), 97: (1, {'@': 436}), 98: (1, {'@': 436}), 99: (1, {'@': 436}), 100: (1, {'@': 436}), 101: (1, {'@': 436}), 102: (1, {'@': 436}), 103: (1, {'@': 436}), 104: (1, {'@': 436}), 105: (1, {'@': 436}), 106: (1, {'@': 436}), 107: (1, {'@': 436}), 118: (1, {'@': 436}), 109: (1, {'@': 436}), 108: (1, {'@': 436})}, 410: {0: (0, 36), 1: (0, 24), 2: (0, 137), 3: (0, 255), 4: (0, 50), 45: (0, 0), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 15: (0, 414), 16: (0, 244), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 26: (0, 3), 27: (0, 66), 28: (0, 572), 29: (0, 559), 114: (0, 493), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 34: (0, 521), 35: (0, 105), 80: (1, {'@': 377})}, 411: {29: (0, 171), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 9: (0, 112), 20: (0, 415), 21: (0, 256), 25: (0, 409), 19: (0, 545), 27: (0, 66), 26: (0, 3), 114: (0, 216), 33: (0, 497), 35: (0, 105), 0: (0, 36), 1: (0, 24), 3: (0, 255), 45: (0, 0), 4: (0, 50), 11: (0, 399), 13: (0, 453), 14: (0, 79), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 113: (0, 473), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 412: {0: (0, 36), 1: (0, 24), 2: (0, 137), 3: (0, 255), 4: (0, 50), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 15: (0, 414), 16: (0, 244), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 26: (0, 3), 27: (0, 66), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 34: (0, 521), 29: (0, 448), 35: (0, 105)}, 413: {31: (1, {'@': 397}), 21: (1, {'@': 397}), 1: (1, {'@': 397}), 36: (1, {'@': 397}), 37: (1, {'@': 397}), 38: (1, {'@': 397}), 6: (1, {'@': 397}), 2: (1, {'@': 397}), 18: (1, {'@': 397}), 9: (1, {'@': 397}), 39: (1, {'@': 397}), 40: (1, {'@': 397}), 41: (1, {'@': 397}), 15: (1, {'@': 397}), 20: (1, {'@': 397}), 33: (1, {'@': 397}), 42: (1, {'@': 397}), 43: (1, {'@': 397}), 44: (1, {'@': 397}), 45: (1, {'@': 397}), 30: (1, {'@': 397}), 22: (1, {'@': 397}), 11: (1, {'@': 397}), 46: (1, {'@': 397}), 47: (1, {'@': 397}), 48: (1, {'@': 397}), 49: (1, {'@': 397}), 50: (1, {'@': 397}), 10: (1, {'@': 397}), 51: (1, {'@': 397}), 17: (1, {'@': 397}), 26: (1, {'@': 397}), 25: (1, {'@': 397}), 52: (1, {'@': 397}), 53: (1, {'@': 397}), 23: (1, {'@': 397}), 54: (1, {'@': 397}), 55: (1, {'@': 397}), 56: (1, {'@': 397}), 19: (1, {'@': 397}), 57: (1, {'@': 397})}, 414: {1: (1, {'@': 433}), 69: (1, {'@': 433}), 36: (1, {'@': 433}), 70: (1, {'@': 433}), 38: (1, {'@': 433}), 71: (1, {'@': 433}), 2: (1, {'@': 433}), 18: (1, {'@': 433}), 39: (1, {'@': 433}), 40: (1, {'@': 433}), 72: (1, {'@': 433}), 58: (1, {'@': 433}), 20: (1, {'@': 433}), 73: (1, {'@': 433}), 42: (1, {'@': 433}), 74: (1, {'@': 433}), 43: (1, {'@': 433}), 75: (1, {'@': 433}), 44: (1, {'@': 433}), 22: (1, {'@': 433}), 76: (1, {'@': 433}), 48: (1, {'@': 433}), 77: (1, {'@': 433}), 78: (1, {'@': 433}), 50: (1, {'@': 433}), 10: (1, {'@': 433}), 68: (1, {'@': 433}), 52: (1, {'@': 433}), 79: (1, {'@': 433}), 53: (1, {'@': 433}), 80: (1, {'@': 433}), 81: (1, {'@': 433}), 23: (1, {'@': 433}), 55: (1, {'@': 433}), 56: (1, {'@': 433}), 19: (1, {'@': 433}), 31: (1, {'@': 433}), 82: (1, {'@': 433}), 21: (1, {'@': 433}), 83: (1, {'@': 433}), 37: (1, {'@': 433}), 84: (1, {'@': 433}), 6: (1, {'@': 433}), 9: (1, {'@': 433}), 41: (1, {'@': 433}), 15: (1, {'@': 433}), 85: (1, {'@': 433}), 86: (1, {'@': 433}), 33: (1, {'@': 433}), 87: (1, {'@': 433}), 45: (1, {'@': 433}), 30: (1, {'@': 433}), 11: (1, {'@': 433}), 88: (1, {'@': 433}), 46: (1, {'@': 433}), 47: (1, {'@': 433}), 89: (1, {'@': 433}), 49: (1, {'@': 433}), 90: (1, {'@': 433}), 51: (1, {'@': 433}), 91: (1, {'@': 433}), 17: (1, {'@': 433}), 26: (1, {'@': 433}), 25: (1, {'@': 433}), 92: (1, {'@': 433}), 93: (1, {'@': 433}), 94: (1, {'@': 433}), 57: (1, {'@': 433}), 95: (1, {'@': 433}), 96: (1, {'@': 433}), 54: (1, {'@': 433}), 97: (1, {'@': 433}), 98: (1, {'@': 433}), 99: (1, {'@': 433}), 100: (1, {'@': 433}), 101: (1, {'@': 433}), 102: (1, {'@': 433}), 103: (1, {'@': 433}), 104: (1, {'@': 433}), 105: (1, {'@': 433}), 106: (1, {'@': 433}), 107: (1, {'@': 433}), 108: (1, {'@': 433}), 109: (1, {'@': 433})}, 415: {1: (1, {'@': 345}), 69: (1, {'@': 345}), 36: (1, {'@': 345}), 70: (1, {'@': 345}), 38: (1, {'@': 345}), 71: (1, {'@': 345}), 2: (1, {'@': 345}), 18: (1, {'@': 345}), 39: (1, {'@': 345}), 40: (1, {'@': 345}), 72: (1, {'@': 345}), 58: (1, {'@': 345}), 20: (1, {'@': 345}), 73: (1, {'@': 345}), 42: (1, {'@': 345}), 74: (1, {'@': 345}), 43: (1, {'@': 345}), 75: (1, {'@': 345}), 44: (1, {'@': 345}), 22: (1, {'@': 345}), 76: (1, {'@': 345}), 48: (1, {'@': 345}), 77: (1, {'@': 345}), 78: (1, {'@': 345}), 50: (1, {'@': 345}), 10: (1, {'@': 345}), 68: (1, {'@': 345}), 52: (1, {'@': 345}), 79: (1, {'@': 345}), 53: (1, {'@': 345}), 80: (1, {'@': 345}), 81: (1, {'@': 345}), 23: (1, {'@': 345}), 55: (1, {'@': 345}), 56: (1, {'@': 345}), 19: (1, {'@': 345}), 31: (1, {'@': 345}), 82: (1, {'@': 345}), 21: (1, {'@': 345}), 83: (1, {'@': 345}), 37: (1, {'@': 345}), 84: (1, {'@': 345}), 6: (1, {'@': 345}), 9: (1, {'@': 345}), 41: (1, {'@': 345}), 15: (1, {'@': 345}), 85: (1, {'@': 345}), 86: (1, {'@': 345}), 33: (1, {'@': 345}), 87: (1, {'@': 345}), 45: (1, {'@': 345}), 30: (1, {'@': 345}), 11: (1, {'@': 345}), 88: (1, {'@': 345}), 46: (1, {'@': 345}), 47: (1, {'@': 345}), 89: (1, {'@': 345}), 49: (1, {'@': 345}), 90: (1, {'@': 345}), 51: (1, {'@': 345}), 91: (1, {'@': 345}), 17: (1, {'@': 345}), 26: (1, {'@': 345}), 25: (1, {'@': 345}), 92: (1, {'@': 345}), 93: (1, {'@': 345}), 94: (1, {'@': 345}), 57: (1, {'@': 345}), 95: (1, {'@': 345}), 96: (1, {'@': 345}), 54: (1, {'@': 345}), 97: (1, {'@': 345}), 98: (1, {'@': 345}), 99: (1, {'@': 345}), 100: (1, {'@': 345}), 101: (1, {'@': 345}), 102: (1, {'@': 345}), 103: (1, {'@': 345}), 104: (1, {'@': 345}), 105: (1, {'@': 345}), 106: (1, {'@': 345}), 107: (1, {'@': 345}), 108: (1, {'@': 345}), 109: (1, {'@': 345})}, 416: {35: (0, 450), 219: (0, 478), 25: (0, 409), 84: (0, 482), 68: (1, {'@': 160})}, 417: {25: (1, {'@': 457}), 53: (1, {'@': 457}), 90: (1, {'@': 457})}, 418: {206: (0, 588), 37: (0, 411), 39: (1, {'@': 425}), 76: (1, {'@': 425}), 93: (1, {'@': 425}), 97: (1, {'@': 425})}, 419: {1: (1, {'@': 300}), 69: (1, {'@': 300}), 36: (1, {'@': 300}), 70: (1, {'@': 300}), 38: (1, {'@': 300}), 71: (1, {'@': 300}), 2: (1, {'@': 300}), 18: (1, {'@': 300}), 39: (1, {'@': 300}), 40: (1, {'@': 300}), 72: (1, {'@': 300}), 58: (1, {'@': 300}), 20: (1, {'@': 300}), 73: (1, {'@': 300}), 42: (1, {'@': 300}), 74: (1, {'@': 300}), 43: (1, {'@': 300}), 75: (1, {'@': 300}), 44: (1, {'@': 300}), 22: (1, {'@': 300}), 76: (1, {'@': 300}), 48: (1, {'@': 300}), 77: (1, {'@': 300}), 78: (1, {'@': 300}), 50: (1, {'@': 300}), 10: (1, {'@': 300}), 68: (1, {'@': 300}), 52: (1, {'@': 300}), 79: (1, {'@': 300}), 53: (1, {'@': 300}), 80: (1, {'@': 300}), 23: (1, {'@': 300}), 55: (1, {'@': 300}), 56: (1, {'@': 300}), 19: (1, {'@': 300}), 31: (1, {'@': 300}), 82: (1, {'@': 300}), 21: (1, {'@': 300}), 83: (1, {'@': 300}), 37: (1, {'@': 300}), 84: (1, {'@': 300}), 6: (1, {'@': 300}), 9: (1, {'@': 300}), 41: (1, {'@': 300}), 15: (1, {'@': 300}), 85: (1, {'@': 300}), 86: (1, {'@': 300}), 33: (1, {'@': 300}), 87: (1, {'@': 300}), 45: (1, {'@': 300}), 30: (1, {'@': 300}), 11: (1, {'@': 300}), 88: (1, {'@': 300}), 46: (1, {'@': 300}), 47: (1, {'@': 300}), 89: (1, {'@': 300}), 49: (1, {'@': 300}), 51: (1, {'@': 300}), 91: (1, {'@': 300}), 17: (1, {'@': 300}), 26: (1, {'@': 300}), 25: (1, {'@': 300}), 92: (1, {'@': 300}), 93: (1, {'@': 300}), 94: (1, {'@': 300}), 57: (1, {'@': 300}), 95: (1, {'@': 300}), 96: (1, {'@': 300}), 54: (1, {'@': 300}), 97: (1, {'@': 300}), 98: (1, {'@': 300}), 99: (1, {'@': 300}), 100: (1, {'@': 300}), 101: (1, {'@': 300}), 102: (1, {'@': 300}), 103: (1, {'@': 300}), 104: (1, {'@': 300}), 105: (1, {'@': 300}), 106: (1, {'@': 300}), 107: (1, {'@': 300}), 108: (1, {'@': 300}), 109: (1, {'@': 300})}, 420: {74: (0, 207), 31: (1, {'@': 289}), 21: (1, {'@': 289}), 1: (1, {'@': 289}), 83: (1, {'@': 289}), 69: (1, {'@': 289}), 36: (1, {'@': 289}), 37: (1, {'@': 289}), 84: (1, {'@': 289}), 70: (1, {'@': 289}), 38: (1, {'@': 289}), 71: (1, {'@': 289}), 6: (1, {'@': 289}), 2: (1, {'@': 289}), 18: (1, {'@': 289}), 9: (1, {'@': 289}), 39: (1, {'@': 289}), 40: (1, {'@': 289}), 41: (1, {'@': 289}), 15: (1, {'@': 289}), 85: (1, {'@': 289}), 58: (1, {'@': 289}), 20: (1, {'@': 289}), 86: (1, {'@': 289}), 33: (1, {'@': 289}), 73: (1, {'@': 289}), 42: (1, {'@': 289}), 43: (1, {'@': 289}), 44: (1, {'@': 289}), 87: (1, {'@': 289}), 45: (1, {'@': 289}), 30: (1, {'@': 289}), 22: (1, {'@': 289}), 11: (1, {'@': 289}), 88: (1, {'@': 289}), 46: (1, {'@': 289}), 76: (1, {'@': 289}), 48: (1, {'@': 289}), 47: (1, {'@': 289}), 77: (1, {'@': 289}), 49: (1, {'@': 289}), 50: (1, {'@': 289}), 10: (1, {'@': 289}), 51: (1, {'@': 289}), 91: (1, {'@': 289}), 17: (1, {'@': 289}), 26: (1, {'@': 289}), 25: (1, {'@': 289}), 68: (1, {'@': 289}), 52: (1, {'@': 289}), 93: (1, {'@': 289}), 94: (1, {'@': 289}), 79: (1, {'@': 289}), 53: (1, {'@': 289}), 57: (1, {'@': 289}), 56: (1, {'@': 289}), 80: (1, {'@': 289}), 23: (1, {'@': 289}), 96: (1, {'@': 289}), 54: (1, {'@': 289}), 55: (1, {'@': 289}), 97: (1, {'@': 289}), 98: (1, {'@': 289}), 19: (1, {'@': 289}), 99: (1, {'@': 289}), 100: (1, {'@': 289}), 101: (1, {'@': 289}), 102: (1, {'@': 289}), 105: (1, {'@': 289}), 106: (1, {'@': 289}), 103: (1, {'@': 289}), 104: (1, {'@': 289}), 107: (1, {'@': 289}), 108: (1, {'@': 289}), 109: (1, {'@': 289})}, 421: {0: (0, 36), 1: (0, 24), 2: (0, 137), 3: (0, 255), 4: (0, 50), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 66: (0, 431), 15: (0, 414), 16: (0, 244), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 26: (0, 3), 27: (0, 66), 28: (0, 572), 36: (0, 102), 30: (0, 225), 31: (0, 533), 29: (0, 10), 32: (0, 146), 34: (0, 521), 33: (0, 497), 63: (0, 589), 35: (0, 105)}, 422: {31: (1, {'@': 444}), 21: (1, {'@': 444}), 1: (1, {'@': 444}), 36: (1, {'@': 444}), 37: (1, {'@': 444}), 38: (1, {'@': 444}), 6: (1, {'@': 444}), 2: (1, {'@': 444}), 18: (1, {'@': 444}), 9: (1, {'@': 444}), 39: (1, {'@': 444}), 40: (1, {'@': 444}), 41: (1, {'@': 444}), 15: (1, {'@': 444}), 20: (1, {'@': 444}), 33: (1, {'@': 444}), 42: (1, {'@': 444}), 43: (1, {'@': 444}), 44: (1, {'@': 444}), 45: (1, {'@': 444}), 30: (1, {'@': 444}), 22: (1, {'@': 444}), 11: (1, {'@': 444}), 46: (1, {'@': 444}), 47: (1, {'@': 444}), 48: (1, {'@': 444}), 49: (1, {'@': 444}), 50: (1, {'@': 444}), 10: (1, {'@': 444}), 51: (1, {'@': 444}), 17: (1, {'@': 444}), 26: (1, {'@': 444}), 25: (1, {'@': 444}), 52: (1, {'@': 444}), 53: (1, {'@': 444}), 23: (1, {'@': 444}), 54: (1, {'@': 444}), 55: (1, {'@': 444}), 56: (1, {'@': 444}), 19: (1, {'@': 444})}, 423: {19: (0, 100)}, 424: {119: (0, 127), 48: (0, 196), 171: (0, 201), 5: (0, 203), 172: (0, 208), 42: (0, 209), 10: (0, 284), 122: (0, 285), 41: (0, 318), 49: (0, 282), 2: (0, 137), 16: (0, 244), 55: (0, 241), 35: (0, 235), 9: (0, 112), 21: (0, 256), 7: (0, 186), 126: (0, 296), 174: (0, 266), 175: (0, 323), 123: (0, 134), 127: (0, 97), 50: (0, 78), 61: (0, 64), 54: (0, 43), 38: (0, 75), 46: (0, 56), 26: (0, 3), 140: (0, 13), 29: (0, 10), 129: (0, 19), 40: (0, 69), 128: (0, 60), 130: (0, 27), 37: (0, 15), 1: (0, 24), 63: (0, 25), 4: (0, 50), 45: (0, 0), 132: (0, 72), 133: (0, 89), 134: (0, 76), 65: (0, 85), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 39: (0, 34), 0: (0, 36), 23: (0, 70), 22: (0, 61), 136: (0, 317), 47: (0, 5), 176: (0, 1), 3: (0, 255), 30: (0, 225), 32: (0, 146), 64: (0, 267), 177: (0, 299), 178: (0, 90), 6: (0, 32), 120: (0, 231), 121: (0, 30), 53: (0, 243), 8: (0, 276), 44: (0, 156), 179: (0, 339), 12: (0, 397), 114: (0, 364), 15: (0, 414), 57: (0, 199), 20: (0, 415), 124: (0, 332), 185: (0, 329), 125: (0, 334), 60: (0, 408), 25: (0, 409), 19: (0, 545), 181: (0, 77), 182: (0, 101), 27: (0, 66), 36: (0, 102), 183: (0, 113), 33: (0, 497), 131: (0, 425), 43: (0, 340), 184: (0, 358), 135: (0, 331), 11: (0, 399), 13: (0, 453), 18: (0, 558), 24: (0, 419), 56: (0, 456), 28: (0, 572), 31: (0, 533), 34: (0, 521), 138: (0, 449)}, 425: {58: (1, {'@': 176}), 52: (1, {'@': 176})}, 426: {84: (0, 211), 93: (1, {'@': 128})}, 427: {68: (1, {'@': 146})}, 428: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 119: (0, 539), 2: (0, 137), 12: (0, 397), 15: (0, 414), 114: (0, 364), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 45: (0, 0), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 64: (0, 267), 79: (1, {'@': 196}), 83: (1, {'@': 196}), 69: (1, {'@': 196}), 85: (1, {'@': 196}), 77: (1, {'@': 196}), 58: (1, {'@': 196}), 86: (1, {'@': 196}), 70: (1, {'@': 196}), 52: (1, {'@': 196}), 71: (1, {'@': 196}), 73: (1, {'@': 196}), 96: (1, {'@': 196}), 87: (1, {'@': 196}), 98: (1, {'@': 196}), 88: (1, {'@': 196}), 94: (1, {'@': 196})}, 429: {31: (1, {'@': 261}), 21: (1, {'@': 261}), 1: (1, {'@': 261}), 36: (1, {'@': 261}), 37: (1, {'@': 261}), 38: (1, {'@': 261}), 6: (1, {'@': 261}), 2: (1, {'@': 261}), 18: (1, {'@': 261}), 9: (1, {'@': 261}), 39: (1, {'@': 261}), 40: (1, {'@': 261}), 41: (1, {'@': 261}), 15: (1, {'@': 261}), 20: (1, {'@': 261}), 33: (1, {'@': 261}), 42: (1, {'@': 261}), 43: (1, {'@': 261}), 44: (1, {'@': 261}), 45: (1, {'@': 261}), 30: (1, {'@': 261}), 22: (1, {'@': 261}), 11: (1, {'@': 261}), 46: (1, {'@': 261}), 47: (1, {'@': 261}), 48: (1, {'@': 261}), 49: (1, {'@': 261}), 50: (1, {'@': 261}), 10: (1, {'@': 261}), 51: (1, {'@': 261}), 17: (1, {'@': 261}), 26: (1, {'@': 261}), 25: (1, {'@': 261}), 52: (1, {'@': 261}), 53: (1, {'@': 261}), 23: (1, {'@': 261}), 54: (1, {'@': 261}), 55: (1, {'@': 261}), 56: (1, {'@': 261}), 19: (1, {'@': 261}), 57: (1, {'@': 261})}, 430: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 45: (0, 356), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 199: (0, 273), 3: (0, 255), 4: (0, 50), 64: (0, 118), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 81: (0, 373), 23: (0, 70), 22: (0, 61), 24: (0, 419), 200: (0, 37), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 202: (0, 167)}, 431: {103: (1, {'@': 282}), 39: (1, {'@': 282}), 107: (1, {'@': 282}), 25: (1, {'@': 282}), 58: (1, {'@': 282}), 68: (1, {'@': 282}), 52: (1, {'@': 282}), 84: (1, {'@': 282}), 83: (1, {'@': 282}), 69: (1, {'@': 282}), 77: (1, {'@': 282}), 70: (1, {'@': 282}), 71: (1, {'@': 282}), 94: (1, {'@': 282}), 79: (1, {'@': 282}), 85: (1, {'@': 282}), 86: (1, {'@': 282}), 73: (1, {'@': 282}), 96: (1, {'@': 282}), 87: (1, {'@': 282}), 98: (1, {'@': 282}), 88: (1, {'@': 282}), 31: (1, {'@': 282}), 21: (1, {'@': 282}), 1: (1, {'@': 282}), 36: (1, {'@': 282}), 37: (1, {'@': 282}), 38: (1, {'@': 282}), 6: (1, {'@': 282}), 2: (1, {'@': 282}), 18: (1, {'@': 282}), 9: (1, {'@': 282}), 40: (1, {'@': 282}), 41: (1, {'@': 282}), 15: (1, {'@': 282}), 20: (1, {'@': 282}), 33: (1, {'@': 282}), 42: (1, {'@': 282}), 43: (1, {'@': 282}), 44: (1, {'@': 282}), 45: (1, {'@': 282}), 30: (1, {'@': 282}), 22: (1, {'@': 282}), 11: (1, {'@': 282}), 46: (1, {'@': 282}), 47: (1, {'@': 282}), 48: (1, {'@': 282}), 49: (1, {'@': 282}), 50: (1, {'@': 282}), 10: (1, {'@': 282}), 51: (1, {'@': 282}), 17: (1, {'@': 282}), 26: (1, {'@': 282}), 53: (1, {'@': 282}), 57: (1, {'@': 282}), 23: (1, {'@': 282}), 54: (1, {'@': 282}), 55: (1, {'@': 282}), 56: (1, {'@': 282}), 19: (1, {'@': 282}), 76: (1, {'@': 282}), 108: (1, {'@': 282}), 109: (1, {'@': 282}), 93: (1, {'@': 282}), 97: (1, {'@': 282})}, 432: {0: (0, 36), 1: (0, 24), 2: (0, 137), 6: (0, 32), 7: (0, 186), 9: (0, 112), 10: (0, 284), 11: (0, 399), 13: (0, 453), 14: (0, 79), 15: (0, 414), 17: (0, 7), 4: (0, 524), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 23: (0, 70), 22: (0, 61), 24: (0, 419), 25: (0, 409), 27: (0, 66), 26: (0, 3), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 35: (0, 105)}, 433: {68: (1, {'@': 145})}, 434: {25: (0, 409), 35: (0, 301)}, 435: {1: (1, {'@': 326}), 69: (1, {'@': 326}), 36: (1, {'@': 326}), 70: (1, {'@': 326}), 38: (1, {'@': 326}), 71: (1, {'@': 326}), 2: (1, {'@': 326}), 18: (1, {'@': 326}), 39: (1, {'@': 326}), 40: (1, {'@': 326}), 72: (1, {'@': 326}), 58: (1, {'@': 326}), 20: (1, {'@': 326}), 73: (1, {'@': 326}), 42: (1, {'@': 326}), 74: (1, {'@': 326}), 43: (1, {'@': 326}), 75: (1, {'@': 326}), 44: (1, {'@': 326}), 22: (1, {'@': 326}), 76: (1, {'@': 326}), 48: (1, {'@': 326}), 77: (1, {'@': 326}), 78: (1, {'@': 326}), 50: (1, {'@': 326}), 10: (1, {'@': 326}), 68: (1, {'@': 326}), 52: (1, {'@': 326}), 79: (1, {'@': 326}), 53: (1, {'@': 326}), 80: (1, {'@': 326}), 81: (1, {'@': 326}), 23: (1, {'@': 326}), 55: (1, {'@': 326}), 56: (1, {'@': 326}), 19: (1, {'@': 326}), 31: (1, {'@': 326}), 82: (1, {'@': 326}), 21: (1, {'@': 326}), 83: (1, {'@': 326}), 37: (1, {'@': 326}), 84: (1, {'@': 326}), 6: (1, {'@': 326}), 9: (1, {'@': 326}), 41: (1, {'@': 326}), 15: (1, {'@': 326}), 85: (1, {'@': 326}), 86: (1, {'@': 326}), 33: (1, {'@': 326}), 87: (1, {'@': 326}), 45: (1, {'@': 326}), 30: (1, {'@': 326}), 11: (1, {'@': 326}), 88: (1, {'@': 326}), 46: (1, {'@': 326}), 47: (1, {'@': 326}), 89: (1, {'@': 326}), 49: (1, {'@': 326}), 90: (1, {'@': 326}), 51: (1, {'@': 326}), 91: (1, {'@': 326}), 17: (1, {'@': 326}), 26: (1, {'@': 326}), 25: (1, {'@': 326}), 92: (1, {'@': 326}), 93: (1, {'@': 326}), 94: (1, {'@': 326}), 57: (1, {'@': 326}), 95: (1, {'@': 326}), 96: (1, {'@': 326}), 54: (1, {'@': 326}), 97: (1, {'@': 326}), 98: (1, {'@': 326}), 99: (1, {'@': 326}), 100: (1, {'@': 326}), 101: (1, {'@': 326}), 102: (1, {'@': 326}), 103: (1, {'@': 326}), 104: (1, {'@': 326}), 105: (1, {'@': 326}), 106: (1, {'@': 326}), 107: (1, {'@': 326}), 108: (1, {'@': 326}), 109: (1, {'@': 326})}, 436: {31: (1, {'@': 443}), 21: (1, {'@': 443}), 1: (1, {'@': 443}), 36: (1, {'@': 443}), 37: (1, {'@': 443}), 38: (1, {'@': 443}), 6: (1, {'@': 443}), 2: (1, {'@': 443}), 18: (1, {'@': 443}), 9: (1, {'@': 443}), 39: (1, {'@': 443}), 40: (1, {'@': 443}), 41: (1, {'@': 443}), 15: (1, {'@': 443}), 20: (1, {'@': 443}), 33: (1, {'@': 443}), 42: (1, {'@': 443}), 43: (1, {'@': 443}), 44: (1, {'@': 443}), 45: (1, {'@': 443}), 30: (1, {'@': 443}), 22: (1, {'@': 443}), 11: (1, {'@': 443}), 46: (1, {'@': 443}), 47: (1, {'@': 443}), 48: (1, {'@': 443}), 49: (1, {'@': 443}), 50: (1, {'@': 443}), 10: (1, {'@': 443}), 51: (1, {'@': 443}), 17: (1, {'@': 443}), 26: (1, {'@': 443}), 25: (1, {'@': 443}), 52: (1, {'@': 443}), 53: (1, {'@': 443}), 23: (1, {'@': 443}), 54: (1, {'@': 443}), 55: (1, {'@': 443}), 56: (1, {'@': 443}), 19: (1, {'@': 443})}, 437: {1: (1, {'@': 479}), 101: (1, {'@': 479}), 36: (1, {'@': 479}), 69: (1, {'@': 479}), 103: (1, {'@': 479}), 70: (1, {'@': 479}), 38: (1, {'@': 479}), 71: (1, {'@': 479}), 2: (1, {'@': 479}), 18: (1, {'@': 479}), 39: (1, {'@': 479}), 40: (1, {'@': 479}), 58: (1, {'@': 479}), 20: (1, {'@': 479}), 106: (1, {'@': 479}), 73: (1, {'@': 479}), 42: (1, {'@': 479}), 43: (1, {'@': 479}), 107: (1, {'@': 479}), 44: (1, {'@': 479}), 22: (1, {'@': 479}), 76: (1, {'@': 479}), 48: (1, {'@': 479}), 77: (1, {'@': 479}), 50: (1, {'@': 479}), 10: (1, {'@': 479}), 68: (1, {'@': 479}), 52: (1, {'@': 479}), 79: (1, {'@': 479}), 53: (1, {'@': 479}), 80: (1, {'@': 479}), 23: (1, {'@': 479}), 105: (1, {'@': 479}), 55: (1, {'@': 479}), 56: (1, {'@': 479}), 19: (1, {'@': 479}), 31: (1, {'@': 479}), 21: (1, {'@': 479}), 99: (1, {'@': 479}), 100: (1, {'@': 479}), 83: (1, {'@': 479}), 37: (1, {'@': 479}), 102: (1, {'@': 479}), 84: (1, {'@': 479}), 6: (1, {'@': 479}), 9: (1, {'@': 479}), 41: (1, {'@': 479}), 15: (1, {'@': 479}), 85: (1, {'@': 479}), 108: (1, {'@': 479}), 86: (1, {'@': 479}), 33: (1, {'@': 479}), 87: (1, {'@': 479}), 45: (1, {'@': 479}), 30: (1, {'@': 479}), 11: (1, {'@': 479}), 88: (1, {'@': 479}), 46: (1, {'@': 479}), 47: (1, {'@': 479}), 49: (1, {'@': 479}), 51: (1, {'@': 479}), 91: (1, {'@': 479}), 109: (1, {'@': 479}), 17: (1, {'@': 479}), 104: (1, {'@': 479}), 26: (1, {'@': 479}), 25: (1, {'@': 479}), 94: (1, {'@': 479}), 93: (1, {'@': 479}), 57: (1, {'@': 479}), 96: (1, {'@': 479}), 54: (1, {'@': 479}), 97: (1, {'@': 479}), 98: (1, {'@': 479})}, 438: {1: (1, {'@': 267}), 36: (1, {'@': 267}), 38: (1, {'@': 267}), 2: (1, {'@': 267}), 18: (1, {'@': 267}), 39: (1, {'@': 267}), 40: (1, {'@': 267}), 20: (1, {'@': 267}), 42: (1, {'@': 267}), 43: (1, {'@': 267}), 44: (1, {'@': 267}), 22: (1, {'@': 267}), 48: (1, {'@': 267}), 50: (1, {'@': 267}), 10: (1, {'@': 267}), 52: (1, {'@': 267}), 53: (1, {'@': 267}), 23: (1, {'@': 267}), 55: (1, {'@': 267}), 56: (1, {'@': 267}), 19: (1, {'@': 267}), 31: (1, {'@': 267}), 21: (1, {'@': 267}), 37: (1, {'@': 267}), 6: (1, {'@': 267}), 9: (1, {'@': 267}), 41: (1, {'@': 267}), 15: (1, {'@': 267}), 33: (1, {'@': 267}), 45: (1, {'@': 267}), 30: (1, {'@': 267}), 11: (1, {'@': 267}), 46: (1, {'@': 267}), 47: (1, {'@': 267}), 49: (1, {'@': 267}), 51: (1, {'@': 267}), 17: (1, {'@': 267}), 26: (1, {'@': 267}), 25: (1, {'@': 267}), 57: (1, {'@': 267}), 54: (1, {'@': 267}), 108: (1, {'@': 267}), 112: (1, {'@': 267})}, 439: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 64: (0, 363), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 440: {1: (1, {'@': 344}), 69: (1, {'@': 344}), 36: (1, {'@': 344}), 70: (1, {'@': 344}), 38: (1, {'@': 344}), 71: (1, {'@': 344}), 2: (1, {'@': 344}), 18: (1, {'@': 344}), 39: (1, {'@': 344}), 40: (1, {'@': 344}), 72: (1, {'@': 344}), 58: (1, {'@': 344}), 20: (1, {'@': 344}), 73: (1, {'@': 344}), 42: (1, {'@': 344}), 74: (1, {'@': 344}), 43: (1, {'@': 344}), 75: (1, {'@': 344}), 44: (1, {'@': 344}), 22: (1, {'@': 344}), 76: (1, {'@': 344}), 48: (1, {'@': 344}), 77: (1, {'@': 344}), 78: (1, {'@': 344}), 50: (1, {'@': 344}), 10: (1, {'@': 344}), 68: (1, {'@': 344}), 52: (1, {'@': 344}), 79: (1, {'@': 344}), 53: (1, {'@': 344}), 80: (1, {'@': 344}), 81: (1, {'@': 344}), 23: (1, {'@': 344}), 55: (1, {'@': 344}), 56: (1, {'@': 344}), 19: (1, {'@': 344}), 31: (1, {'@': 344}), 82: (1, {'@': 344}), 21: (1, {'@': 344}), 83: (1, {'@': 344}), 37: (1, {'@': 344}), 84: (1, {'@': 344}), 6: (1, {'@': 344}), 9: (1, {'@': 344}), 41: (1, {'@': 344}), 15: (1, {'@': 344}), 85: (1, {'@': 344}), 86: (1, {'@': 344}), 33: (1, {'@': 344}), 87: (1, {'@': 344}), 45: (1, {'@': 344}), 30: (1, {'@': 344}), 11: (1, {'@': 344}), 88: (1, {'@': 344}), 46: (1, {'@': 344}), 47: (1, {'@': 344}), 89: (1, {'@': 344}), 49: (1, {'@': 344}), 90: (1, {'@': 344}), 51: (1, {'@': 344}), 91: (1, {'@': 344}), 17: (1, {'@': 344}), 26: (1, {'@': 344}), 25: (1, {'@': 344}), 92: (1, {'@': 344}), 93: (1, {'@': 344}), 94: (1, {'@': 344}), 57: (1, {'@': 344}), 95: (1, {'@': 344}), 96: (1, {'@': 344}), 54: (1, {'@': 344}), 97: (1, {'@': 344}), 98: (1, {'@': 344}), 99: (1, {'@': 344}), 100: (1, {'@': 344}), 101: (1, {'@': 344}), 102: (1, {'@': 344}), 103: (1, {'@': 344}), 104: (1, {'@': 344}), 105: (1, {'@': 344}), 106: (1, {'@': 344}), 107: (1, {'@': 344}), 108: (1, {'@': 344}), 109: (1, {'@': 344})}, 441: {84: (0, 476), 68: (1, {'@': 140})}, 442: {84: (0, 583), 58: (1, {'@': 228}), 52: (1, {'@': 228})}, 443: {58: (1, {'@': 466}), 52: (1, {'@': 466}), 84: (1, {'@': 466})}, 444: {1: (1, {'@': 484}), 101: (1, {'@': 484}), 36: (1, {'@': 484}), 69: (1, {'@': 484}), 103: (1, {'@': 484}), 70: (1, {'@': 484}), 38: (1, {'@': 484}), 71: (1, {'@': 484}), 2: (1, {'@': 484}), 18: (1, {'@': 484}), 39: (1, {'@': 484}), 40: (1, {'@': 484}), 58: (1, {'@': 484}), 20: (1, {'@': 484}), 106: (1, {'@': 484}), 73: (1, {'@': 484}), 42: (1, {'@': 484}), 74: (1, {'@': 484}), 107: (1, {'@': 484}), 43: (1, {'@': 484}), 44: (1, {'@': 484}), 22: (1, {'@': 484}), 76: (1, {'@': 484}), 48: (1, {'@': 484}), 77: (1, {'@': 484}), 50: (1, {'@': 484}), 10: (1, {'@': 484}), 68: (1, {'@': 484}), 52: (1, {'@': 484}), 79: (1, {'@': 484}), 53: (1, {'@': 484}), 80: (1, {'@': 484}), 23: (1, {'@': 484}), 105: (1, {'@': 484}), 55: (1, {'@': 484}), 56: (1, {'@': 484}), 19: (1, {'@': 484}), 31: (1, {'@': 484}), 21: (1, {'@': 484}), 99: (1, {'@': 484}), 100: (1, {'@': 484}), 83: (1, {'@': 484}), 37: (1, {'@': 484}), 102: (1, {'@': 484}), 84: (1, {'@': 484}), 6: (1, {'@': 484}), 9: (1, {'@': 484}), 41: (1, {'@': 484}), 15: (1, {'@': 484}), 85: (1, {'@': 484}), 108: (1, {'@': 484}), 86: (1, {'@': 484}), 33: (1, {'@': 484}), 87: (1, {'@': 484}), 45: (1, {'@': 484}), 30: (1, {'@': 484}), 11: (1, {'@': 484}), 88: (1, {'@': 484}), 46: (1, {'@': 484}), 47: (1, {'@': 484}), 89: (1, {'@': 484}), 49: (1, {'@': 484}), 51: (1, {'@': 484}), 91: (1, {'@': 484}), 109: (1, {'@': 484}), 17: (1, {'@': 484}), 104: (1, {'@': 484}), 26: (1, {'@': 484}), 25: (1, {'@': 484}), 94: (1, {'@': 484}), 93: (1, {'@': 484}), 57: (1, {'@': 484}), 96: (1, {'@': 484}), 54: (1, {'@': 484}), 97: (1, {'@': 484}), 98: (1, {'@': 484})}, 445: {68: (0, 496)}, 446: {84: (0, 163), 93: (1, {'@': 124})}, 447: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 188: (0, 514), 62: (0, 552), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 64: (0, 550), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 52: (0, 599)}, 448: {1: (1, {'@': 478}), 101: (1, {'@': 478}), 36: (1, {'@': 478}), 69: (1, {'@': 478}), 103: (1, {'@': 478}), 70: (1, {'@': 478}), 38: (1, {'@': 478}), 71: (1, {'@': 478}), 2: (1, {'@': 478}), 18: (1, {'@': 478}), 39: (1, {'@': 478}), 40: (1, {'@': 478}), 58: (1, {'@': 478}), 20: (1, {'@': 478}), 106: (1, {'@': 478}), 73: (1, {'@': 478}), 42: (1, {'@': 478}), 43: (1, {'@': 478}), 107: (1, {'@': 478}), 44: (1, {'@': 478}), 22: (1, {'@': 478}), 76: (1, {'@': 478}), 48: (1, {'@': 478}), 77: (1, {'@': 478}), 50: (1, {'@': 478}), 10: (1, {'@': 478}), 68: (1, {'@': 478}), 52: (1, {'@': 478}), 79: (1, {'@': 478}), 53: (1, {'@': 478}), 80: (1, {'@': 478}), 23: (1, {'@': 478}), 105: (1, {'@': 478}), 55: (1, {'@': 478}), 56: (1, {'@': 478}), 19: (1, {'@': 478}), 31: (1, {'@': 478}), 21: (1, {'@': 478}), 99: (1, {'@': 478}), 100: (1, {'@': 478}), 83: (1, {'@': 478}), 37: (1, {'@': 478}), 102: (1, {'@': 478}), 84: (1, {'@': 478}), 6: (1, {'@': 478}), 9: (1, {'@': 478}), 41: (1, {'@': 478}), 15: (1, {'@': 478}), 85: (1, {'@': 478}), 108: (1, {'@': 478}), 86: (1, {'@': 478}), 33: (1, {'@': 478}), 87: (1, {'@': 478}), 45: (1, {'@': 478}), 30: (1, {'@': 478}), 11: (1, {'@': 478}), 88: (1, {'@': 478}), 46: (1, {'@': 478}), 47: (1, {'@': 478}), 49: (1, {'@': 478}), 51: (1, {'@': 478}), 109: (1, {'@': 478}), 17: (1, {'@': 478}), 104: (1, {'@': 478}), 26: (1, {'@': 478}), 25: (1, {'@': 478}), 93: (1, {'@': 478}), 94: (1, {'@': 478}), 57: (1, {'@': 478}), 96: (1, {'@': 478}), 54: (1, {'@': 478}), 97: (1, {'@': 478}), 98: (1, {'@': 478})}, 449: {58: (1, {'@': 202}), 52: (1, {'@': 202})}, 450: {219: (0, 394), 84: (0, 515), 68: (1, {'@': 154})}, 451: {68: (1, {'@': 147}), 84: (1, {'@': 147})}, 452: {84: (0, 507), 93: (1, {'@': 104})}, 453: {1: (1, {'@': 342}), 69: (1, {'@': 342}), 36: (1, {'@': 342}), 70: (1, {'@': 342}), 38: (1, {'@': 342}), 71: (1, {'@': 342}), 2: (1, {'@': 342}), 18: (1, {'@': 342}), 39: (1, {'@': 342}), 40: (1, {'@': 342}), 72: (1, {'@': 342}), 58: (1, {'@': 342}), 20: (1, {'@': 342}), 73: (1, {'@': 342}), 42: (1, {'@': 342}), 74: (1, {'@': 342}), 43: (1, {'@': 342}), 75: (1, {'@': 342}), 44: (1, {'@': 342}), 22: (1, {'@': 342}), 76: (1, {'@': 342}), 48: (1, {'@': 342}), 77: (1, {'@': 342}), 78: (1, {'@': 342}), 50: (1, {'@': 342}), 10: (1, {'@': 342}), 68: (1, {'@': 342}), 52: (1, {'@': 342}), 79: (1, {'@': 342}), 53: (1, {'@': 342}), 80: (1, {'@': 342}), 81: (1, {'@': 342}), 23: (1, {'@': 342}), 55: (1, {'@': 342}), 56: (1, {'@': 342}), 19: (1, {'@': 342}), 31: (1, {'@': 342}), 82: (1, {'@': 342}), 21: (1, {'@': 342}), 83: (1, {'@': 342}), 37: (1, {'@': 342}), 84: (1, {'@': 342}), 6: (1, {'@': 342}), 9: (1, {'@': 342}), 41: (1, {'@': 342}), 15: (1, {'@': 342}), 85: (1, {'@': 342}), 86: (1, {'@': 342}), 33: (1, {'@': 342}), 87: (1, {'@': 342}), 45: (1, {'@': 342}), 30: (1, {'@': 342}), 11: (1, {'@': 342}), 88: (1, {'@': 342}), 46: (1, {'@': 342}), 47: (1, {'@': 342}), 89: (1, {'@': 342}), 49: (1, {'@': 342}), 90: (1, {'@': 342}), 51: (1, {'@': 342}), 91: (1, {'@': 342}), 17: (1, {'@': 342}), 26: (1, {'@': 342}), 25: (1, {'@': 342}), 92: (1, {'@': 342}), 93: (1, {'@': 342}), 94: (1, {'@': 342}), 57: (1, {'@': 342}), 95: (1, {'@': 342}), 96: (1, {'@': 342}), 54: (1, {'@': 342}), 97: (1, {'@': 342}), 98: (1, {'@': 342}), 99: (1, {'@': 342}), 100: (1, {'@': 342}), 101: (1, {'@': 342}), 102: (1, {'@': 342}), 103: (1, {'@': 342}), 104: (1, {'@': 342}), 105: (1, {'@': 342}), 106: (1, {'@': 342}), 107: (1, {'@': 342}), 108: (1, {'@': 342}), 109: (1, {'@': 342})}, 454: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 68: (0, 106), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 64: (0, 153), 24: (0, 419), 28: (0, 572), 145: (0, 42), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 97: (1, {'@': 367}), 84: (1, {'@': 367})}, 455: {93: (1, {'@': 120})}, 456: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 64: (0, 391), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 457: {39: (0, 179), 221: (0, 537), 97: (1, {'@': 438}), 93: (1, {'@': 438})}, 458: {119: (0, 300), 48: (0, 196), 54: (0, 43), 5: (0, 203), 6: (0, 32), 7: (0, 186), 120: (0, 231), 121: (0, 30), 53: (0, 243), 8: (0, 276), 42: (0, 209), 44: (0, 156), 10: (0, 284), 122: (0, 285), 41: (0, 318), 2: (0, 137), 12: (0, 397), 114: (0, 364), 16: (0, 244), 15: (0, 414), 35: (0, 31), 9: (0, 112), 21: (0, 256), 20: (0, 415), 124: (0, 332), 125: (0, 334), 126: (0, 296), 60: (0, 408), 127: (0, 97), 25: (0, 409), 61: (0, 64), 19: (0, 545), 38: (0, 75), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 40: (0, 69), 128: (0, 60), 123: (0, 297), 130: (0, 27), 1: (0, 24), 0: (0, 36), 63: (0, 25), 4: (0, 50), 45: (0, 0), 3: (0, 255), 131: (0, 425), 132: (0, 72), 43: (0, 340), 133: (0, 89), 134: (0, 76), 65: (0, 85), 135: (0, 331), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 52: (0, 571), 17: (0, 7), 18: (0, 558), 64: (0, 267), 23: (0, 70), 22: (0, 61), 136: (0, 317), 24: (0, 419), 56: (0, 456), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 138: (0, 449)}, 459: {84: (0, 405), 68: (1, {'@': 162})}, 460: {1: (1, {'@': 330}), 69: (1, {'@': 330}), 36: (1, {'@': 330}), 70: (1, {'@': 330}), 38: (1, {'@': 330}), 71: (1, {'@': 330}), 2: (1, {'@': 330}), 18: (1, {'@': 330}), 39: (1, {'@': 330}), 40: (1, {'@': 330}), 72: (1, {'@': 330}), 58: (1, {'@': 330}), 20: (1, {'@': 330}), 73: (1, {'@': 330}), 42: (1, {'@': 330}), 74: (1, {'@': 330}), 43: (1, {'@': 330}), 75: (1, {'@': 330}), 44: (1, {'@': 330}), 22: (1, {'@': 330}), 76: (1, {'@': 330}), 48: (1, {'@': 330}), 77: (1, {'@': 330}), 78: (1, {'@': 330}), 50: (1, {'@': 330}), 10: (1, {'@': 330}), 68: (1, {'@': 330}), 52: (1, {'@': 330}), 79: (1, {'@': 330}), 53: (1, {'@': 330}), 80: (1, {'@': 330}), 81: (1, {'@': 330}), 23: (1, {'@': 330}), 55: (1, {'@': 330}), 56: (1, {'@': 330}), 19: (1, {'@': 330}), 31: (1, {'@': 330}), 82: (1, {'@': 330}), 21: (1, {'@': 330}), 83: (1, {'@': 330}), 37: (1, {'@': 330}), 84: (1, {'@': 330}), 6: (1, {'@': 330}), 9: (1, {'@': 330}), 41: (1, {'@': 330}), 15: (1, {'@': 330}), 85: (1, {'@': 330}), 86: (1, {'@': 330}), 33: (1, {'@': 330}), 87: (1, {'@': 330}), 45: (1, {'@': 330}), 30: (1, {'@': 330}), 11: (1, {'@': 330}), 88: (1, {'@': 330}), 46: (1, {'@': 330}), 47: (1, {'@': 330}), 89: (1, {'@': 330}), 49: (1, {'@': 330}), 90: (1, {'@': 330}), 51: (1, {'@': 330}), 91: (1, {'@': 330}), 17: (1, {'@': 330}), 26: (1, {'@': 330}), 25: (1, {'@': 330}), 92: (1, {'@': 330}), 93: (1, {'@': 330}), 94: (1, {'@': 330}), 57: (1, {'@': 330}), 95: (1, {'@': 330}), 96: (1, {'@': 330}), 54: (1, {'@': 330}), 97: (1, {'@': 330}), 98: (1, {'@': 330}), 99: (1, {'@': 330}), 100: (1, {'@': 330}), 101: (1, {'@': 330}), 102: (1, {'@': 330}), 103: (1, {'@': 330}), 104: (1, {'@': 330}), 105: (1, {'@': 330}), 106: (1, {'@': 330}), 107: (1, {'@': 330}), 108: (1, {'@': 330}), 109: (1, {'@': 330})}, 461: {45: (0, 416), 25: (0, 409), 35: (0, 603), 81: (0, 464), 217: (0, 387), 216: (0, 522), 215: (0, 540), 68: (1, {'@': 143})}, 462: {1: (1, {'@': 333}), 69: (1, {'@': 333}), 36: (1, {'@': 333}), 70: (1, {'@': 333}), 38: (1, {'@': 333}), 71: (1, {'@': 333}), 2: (1, {'@': 333}), 18: (1, {'@': 333}), 39: (1, {'@': 333}), 40: (1, {'@': 333}), 72: (1, {'@': 333}), 58: (1, {'@': 333}), 20: (1, {'@': 333}), 73: (1, {'@': 333}), 42: (1, {'@': 333}), 74: (1, {'@': 333}), 43: (1, {'@': 333}), 75: (1, {'@': 333}), 44: (1, {'@': 333}), 22: (1, {'@': 333}), 76: (1, {'@': 333}), 48: (1, {'@': 333}), 77: (1, {'@': 333}), 78: (1, {'@': 333}), 50: (1, {'@': 333}), 10: (1, {'@': 333}), 68: (1, {'@': 333}), 52: (1, {'@': 333}), 79: (1, {'@': 333}), 53: (1, {'@': 333}), 80: (1, {'@': 333}), 81: (1, {'@': 333}), 23: (1, {'@': 333}), 55: (1, {'@': 333}), 56: (1, {'@': 333}), 19: (1, {'@': 333}), 31: (1, {'@': 333}), 82: (1, {'@': 333}), 21: (1, {'@': 333}), 83: (1, {'@': 333}), 37: (1, {'@': 333}), 84: (1, {'@': 333}), 6: (1, {'@': 333}), 9: (1, {'@': 333}), 41: (1, {'@': 333}), 15: (1, {'@': 333}), 85: (1, {'@': 333}), 86: (1, {'@': 333}), 33: (1, {'@': 333}), 87: (1, {'@': 333}), 45: (1, {'@': 333}), 30: (1, {'@': 333}), 11: (1, {'@': 333}), 88: (1, {'@': 333}), 46: (1, {'@': 333}), 47: (1, {'@': 333}), 89: (1, {'@': 333}), 49: (1, {'@': 333}), 90: (1, {'@': 333}), 51: (1, {'@': 333}), 91: (1, {'@': 333}), 17: (1, {'@': 333}), 26: (1, {'@': 333}), 25: (1, {'@': 333}), 92: (1, {'@': 333}), 93: (1, {'@': 333}), 94: (1, {'@': 333}), 57: (1, {'@': 333}), 95: (1, {'@': 333}), 96: (1, {'@': 333}), 54: (1, {'@': 333}), 97: (1, {'@': 333}), 98: (1, {'@': 333}), 99: (1, {'@': 333}), 100: (1, {'@': 333}), 101: (1, {'@': 333}), 102: (1, {'@': 333}), 103: (1, {'@': 333}), 104: (1, {'@': 333}), 105: (1, {'@': 333}), 106: (1, {'@': 333}), 107: (1, {'@': 333}), 108: (1, {'@': 333}), 109: (1, {'@': 333})}, 463: {84: (0, 535), 93: (1, {'@': 351})}, 464: {25: (0, 409), 35: (0, 459)}, 465: {225: (0, 189)}, 466: {68: (0, 367), 97: (1, {'@': 359}), 84: (1, {'@': 359})}, 467: {108: (0, 556)}, 468: {76: (1, {'@': 439})}, 469: {206: (0, 402), 209: (0, 418), 158: (0, 370), 37: (0, 411), 84: (0, 604), 207: (0, 457), 97: (1, {'@': 395})}, 470: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 64: (0, 309), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 195: (0, 598), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 471: {36: (1, {'@': 487}), 103: (1, {'@': 487}), 70: (1, {'@': 487}), 38: (1, {'@': 487}), 71: (1, {'@': 487}), 2: (1, {'@': 487}), 18: (1, {'@': 487}), 39: (1, {'@': 487}), 20: (1, {'@': 487}), 74: (1, {'@': 487}), 75: (1, {'@': 487}), 22: (1, {'@': 487}), 76: (1, {'@': 487}), 50: (1, {'@': 487}), 52: (1, {'@': 487}), 23: (1, {'@': 487}), 19: (1, {'@': 487}), 21: (1, {'@': 487}), 102: (1, {'@': 487}), 84: (1, {'@': 487}), 15: (1, {'@': 487}), 85: (1, {'@': 487}), 108: (1, {'@': 487}), 46: (1, {'@': 487}), 89: (1, {'@': 487}), 109: (1, {'@': 487}), 26: (1, {'@': 487}), 25: (1, {'@': 487}), 94: (1, {'@': 487}), 93: (1, {'@': 487}), 57: (1, {'@': 487}), 96: (1, {'@': 487}), 54: (1, {'@': 487}), 98: (1, {'@': 487}), 1: (1, {'@': 487}), 101: (1, {'@': 487}), 69: (1, {'@': 487}), 40: (1, {'@': 487}), 58: (1, {'@': 487}), 106: (1, {'@': 487}), 73: (1, {'@': 487}), 42: (1, {'@': 487}), 43: (1, {'@': 487}), 107: (1, {'@': 487}), 44: (1, {'@': 487}), 48: (1, {'@': 487}), 77: (1, {'@': 487}), 10: (1, {'@': 487}), 68: (1, {'@': 487}), 79: (1, {'@': 487}), 53: (1, {'@': 487}), 80: (1, {'@': 487}), 105: (1, {'@': 487}), 55: (1, {'@': 487}), 56: (1, {'@': 487}), 31: (1, {'@': 487}), 99: (1, {'@': 487}), 100: (1, {'@': 487}), 83: (1, {'@': 487}), 37: (1, {'@': 487}), 6: (1, {'@': 487}), 9: (1, {'@': 487}), 41: (1, {'@': 487}), 86: (1, {'@': 487}), 33: (1, {'@': 487}), 87: (1, {'@': 487}), 45: (1, {'@': 487}), 30: (1, {'@': 487}), 11: (1, {'@': 487}), 88: (1, {'@': 487}), 47: (1, {'@': 487}), 49: (1, {'@': 487}), 51: (1, {'@': 487}), 91: (1, {'@': 487}), 17: (1, {'@': 487}), 104: (1, {'@': 487}), 92: (1, {'@': 487}), 97: (1, {'@': 487})}, 472: {36: (1, {'@': 488}), 103: (1, {'@': 488}), 70: (1, {'@': 488}), 38: (1, {'@': 488}), 71: (1, {'@': 488}), 2: (1, {'@': 488}), 18: (1, {'@': 488}), 39: (1, {'@': 488}), 20: (1, {'@': 488}), 74: (1, {'@': 488}), 75: (1, {'@': 488}), 22: (1, {'@': 488}), 76: (1, {'@': 488}), 50: (1, {'@': 488}), 52: (1, {'@': 488}), 23: (1, {'@': 488}), 19: (1, {'@': 488}), 21: (1, {'@': 488}), 102: (1, {'@': 488}), 84: (1, {'@': 488}), 15: (1, {'@': 488}), 85: (1, {'@': 488}), 108: (1, {'@': 488}), 46: (1, {'@': 488}), 89: (1, {'@': 488}), 109: (1, {'@': 488}), 26: (1, {'@': 488}), 25: (1, {'@': 488}), 94: (1, {'@': 488}), 93: (1, {'@': 488}), 57: (1, {'@': 488}), 96: (1, {'@': 488}), 54: (1, {'@': 488}), 98: (1, {'@': 488}), 1: (1, {'@': 488}), 101: (1, {'@': 488}), 69: (1, {'@': 488}), 40: (1, {'@': 488}), 58: (1, {'@': 488}), 106: (1, {'@': 488}), 73: (1, {'@': 488}), 42: (1, {'@': 488}), 43: (1, {'@': 488}), 107: (1, {'@': 488}), 44: (1, {'@': 488}), 48: (1, {'@': 488}), 77: (1, {'@': 488}), 10: (1, {'@': 488}), 68: (1, {'@': 488}), 79: (1, {'@': 488}), 53: (1, {'@': 488}), 80: (1, {'@': 488}), 105: (1, {'@': 488}), 55: (1, {'@': 488}), 56: (1, {'@': 488}), 31: (1, {'@': 488}), 99: (1, {'@': 488}), 100: (1, {'@': 488}), 83: (1, {'@': 488}), 37: (1, {'@': 488}), 6: (1, {'@': 488}), 9: (1, {'@': 488}), 41: (1, {'@': 488}), 86: (1, {'@': 488}), 33: (1, {'@': 488}), 87: (1, {'@': 488}), 45: (1, {'@': 488}), 30: (1, {'@': 488}), 11: (1, {'@': 488}), 88: (1, {'@': 488}), 47: (1, {'@': 488}), 49: (1, {'@': 488}), 51: (1, {'@': 488}), 91: (1, {'@': 488}), 17: (1, {'@': 488}), 104: (1, {'@': 488}), 92: (1, {'@': 488}), 97: (1, {'@': 488})}, 473: {80: (0, 554)}, 474: {1: (1, {'@': 337}), 69: (1, {'@': 337}), 36: (1, {'@': 337}), 70: (1, {'@': 337}), 38: (1, {'@': 337}), 71: (1, {'@': 337}), 2: (1, {'@': 337}), 18: (1, {'@': 337}), 39: (1, {'@': 337}), 40: (1, {'@': 337}), 72: (1, {'@': 337}), 58: (1, {'@': 337}), 20: (1, {'@': 337}), 73: (1, {'@': 337}), 42: (1, {'@': 337}), 74: (1, {'@': 337}), 43: (1, {'@': 337}), 75: (1, {'@': 337}), 44: (1, {'@': 337}), 22: (1, {'@': 337}), 76: (1, {'@': 337}), 48: (1, {'@': 337}), 77: (1, {'@': 337}), 78: (1, {'@': 337}), 50: (1, {'@': 337}), 10: (1, {'@': 337}), 68: (1, {'@': 337}), 52: (1, {'@': 337}), 79: (1, {'@': 337}), 53: (1, {'@': 337}), 80: (1, {'@': 337}), 81: (1, {'@': 337}), 23: (1, {'@': 337}), 55: (1, {'@': 337}), 56: (1, {'@': 337}), 19: (1, {'@': 337}), 31: (1, {'@': 337}), 82: (1, {'@': 337}), 21: (1, {'@': 337}), 83: (1, {'@': 337}), 37: (1, {'@': 337}), 84: (1, {'@': 337}), 6: (1, {'@': 337}), 9: (1, {'@': 337}), 41: (1, {'@': 337}), 15: (1, {'@': 337}), 85: (1, {'@': 337}), 86: (1, {'@': 337}), 33: (1, {'@': 337}), 87: (1, {'@': 337}), 45: (1, {'@': 337}), 30: (1, {'@': 337}), 11: (1, {'@': 337}), 88: (1, {'@': 337}), 46: (1, {'@': 337}), 47: (1, {'@': 337}), 89: (1, {'@': 337}), 49: (1, {'@': 337}), 90: (1, {'@': 337}), 51: (1, {'@': 337}), 91: (1, {'@': 337}), 17: (1, {'@': 337}), 26: (1, {'@': 337}), 25: (1, {'@': 337}), 92: (1, {'@': 337}), 93: (1, {'@': 337}), 94: (1, {'@': 337}), 57: (1, {'@': 337}), 95: (1, {'@': 337}), 96: (1, {'@': 337}), 54: (1, {'@': 337}), 97: (1, {'@': 337}), 98: (1, {'@': 337}), 99: (1, {'@': 337}), 100: (1, {'@': 337}), 101: (1, {'@': 337}), 102: (1, {'@': 337}), 103: (1, {'@': 337}), 104: (1, {'@': 337}), 105: (1, {'@': 337}), 106: (1, {'@': 337}), 107: (1, {'@': 337}), 108: (1, {'@': 337}), 109: (1, {'@': 337})}, 475: {1: (1, {'@': 483}), 101: (1, {'@': 483}), 36: (1, {'@': 483}), 69: (1, {'@': 483}), 103: (1, {'@': 483}), 70: (1, {'@': 483}), 38: (1, {'@': 483}), 71: (1, {'@': 483}), 2: (1, {'@': 483}), 18: (1, {'@': 483}), 39: (1, {'@': 483}), 40: (1, {'@': 483}), 58: (1, {'@': 483}), 20: (1, {'@': 483}), 106: (1, {'@': 483}), 73: (1, {'@': 483}), 42: (1, {'@': 483}), 74: (1, {'@': 483}), 107: (1, {'@': 483}), 43: (1, {'@': 483}), 44: (1, {'@': 483}), 22: (1, {'@': 483}), 76: (1, {'@': 483}), 48: (1, {'@': 483}), 77: (1, {'@': 483}), 50: (1, {'@': 483}), 10: (1, {'@': 483}), 68: (1, {'@': 483}), 52: (1, {'@': 483}), 79: (1, {'@': 483}), 53: (1, {'@': 483}), 80: (1, {'@': 483}), 23: (1, {'@': 483}), 105: (1, {'@': 483}), 55: (1, {'@': 483}), 56: (1, {'@': 483}), 19: (1, {'@': 483}), 31: (1, {'@': 483}), 21: (1, {'@': 483}), 99: (1, {'@': 483}), 100: (1, {'@': 483}), 83: (1, {'@': 483}), 37: (1, {'@': 483}), 102: (1, {'@': 483}), 84: (1, {'@': 483}), 6: (1, {'@': 483}), 9: (1, {'@': 483}), 41: (1, {'@': 483}), 15: (1, {'@': 483}), 85: (1, {'@': 483}), 108: (1, {'@': 483}), 86: (1, {'@': 483}), 33: (1, {'@': 483}), 87: (1, {'@': 483}), 45: (1, {'@': 483}), 30: (1, {'@': 483}), 11: (1, {'@': 483}), 88: (1, {'@': 483}), 46: (1, {'@': 483}), 47: (1, {'@': 483}), 89: (1, {'@': 483}), 49: (1, {'@': 483}), 51: (1, {'@': 483}), 91: (1, {'@': 483}), 109: (1, {'@': 483}), 17: (1, {'@': 483}), 104: (1, {'@': 483}), 26: (1, {'@': 483}), 25: (1, {'@': 483}), 94: (1, {'@': 483}), 93: (1, {'@': 483}), 57: (1, {'@': 483}), 96: (1, {'@': 483}), 54: (1, {'@': 483}), 97: (1, {'@': 483}), 98: (1, {'@': 483})}, 476: {45: (0, 416), 25: (0, 409), 35: (0, 603), 81: (0, 464), 217: (0, 68), 216: (0, 136), 215: (0, 96), 68: (1, {'@': 139})}, 477: {58: (1, {'@': 181}), 52: (1, {'@': 181})}, 478: {84: (0, 404), 68: (1, {'@': 157})}, 479: {68: (0, 553)}, 480: {68: (0, 495)}, 481: {68: (0, 82)}, 482: {217: (0, 511), 25: (0, 409), 35: (0, 603), 215: (0, 540), 81: (0, 464), 68: (1, {'@': 159})}, 483: {93: (1, {'@': 119})}, 484: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 60: (0, 543), 10: (0, 284), 169: (0, 227), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 9: (0, 112), 20: (0, 415), 21: (0, 256), 170: (0, 594), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 35: (0, 105), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 350), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 485: {93: (1, {'@': 220}), 84: (1, {'@': 220}), 52: (1, {'@': 220}), 58: (1, {'@': 220})}, 486: {1: (1, {'@': 334}), 69: (1, {'@': 334}), 36: (1, {'@': 334}), 70: (1, {'@': 334}), 38: (1, {'@': 334}), 71: (1, {'@': 334}), 2: (1, {'@': 334}), 18: (1, {'@': 334}), 39: (1, {'@': 334}), 40: (1, {'@': 334}), 72: (1, {'@': 334}), 58: (1, {'@': 334}), 20: (1, {'@': 334}), 73: (1, {'@': 334}), 42: (1, {'@': 334}), 74: (1, {'@': 334}), 43: (1, {'@': 334}), 75: (1, {'@': 334}), 44: (1, {'@': 334}), 22: (1, {'@': 334}), 76: (1, {'@': 334}), 48: (1, {'@': 334}), 77: (1, {'@': 334}), 78: (1, {'@': 334}), 50: (1, {'@': 334}), 10: (1, {'@': 334}), 68: (1, {'@': 334}), 52: (1, {'@': 334}), 79: (1, {'@': 334}), 53: (1, {'@': 334}), 80: (1, {'@': 334}), 81: (1, {'@': 334}), 23: (1, {'@': 334}), 55: (1, {'@': 334}), 56: (1, {'@': 334}), 19: (1, {'@': 334}), 31: (1, {'@': 334}), 82: (1, {'@': 334}), 21: (1, {'@': 334}), 83: (1, {'@': 334}), 37: (1, {'@': 334}), 84: (1, {'@': 334}), 6: (1, {'@': 334}), 9: (1, {'@': 334}), 41: (1, {'@': 334}), 15: (1, {'@': 334}), 85: (1, {'@': 334}), 86: (1, {'@': 334}), 33: (1, {'@': 334}), 87: (1, {'@': 334}), 45: (1, {'@': 334}), 30: (1, {'@': 334}), 11: (1, {'@': 334}), 88: (1, {'@': 334}), 46: (1, {'@': 334}), 47: (1, {'@': 334}), 89: (1, {'@': 334}), 49: (1, {'@': 334}), 90: (1, {'@': 334}), 51: (1, {'@': 334}), 91: (1, {'@': 334}), 17: (1, {'@': 334}), 26: (1, {'@': 334}), 25: (1, {'@': 334}), 92: (1, {'@': 334}), 93: (1, {'@': 334}), 94: (1, {'@': 334}), 57: (1, {'@': 334}), 95: (1, {'@': 334}), 96: (1, {'@': 334}), 54: (1, {'@': 334}), 97: (1, {'@': 334}), 98: (1, {'@': 334}), 99: (1, {'@': 334}), 100: (1, {'@': 334}), 101: (1, {'@': 334}), 102: (1, {'@': 334}), 103: (1, {'@': 334}), 104: (1, {'@': 334}), 105: (1, {'@': 334}), 106: (1, {'@': 334}), 107: (1, {'@': 334}), 108: (1, {'@': 334}), 109: (1, {'@': 334})}, 487: {58: (1, {'@': 211}), 52: (1, {'@': 211})}, 488: {76: (1, {'@': 501}), 84: (1, {'@': 501})}, 489: {58: (1, {'@': 500}), 68: (1, {'@': 500}), 52: (1, {'@': 500}), 84: (1, {'@': 500})}, 490: {103: (1, {'@': 281}), 39: (1, {'@': 281}), 107: (1, {'@': 281}), 25: (1, {'@': 281}), 58: (1, {'@': 281}), 68: (1, {'@': 281}), 52: (1, {'@': 281}), 84: (1, {'@': 281}), 83: (1, {'@': 281}), 69: (1, {'@': 281}), 77: (1, {'@': 281}), 70: (1, {'@': 281}), 71: (1, {'@': 281}), 94: (1, {'@': 281}), 79: (1, {'@': 281}), 85: (1, {'@': 281}), 86: (1, {'@': 281}), 73: (1, {'@': 281}), 96: (1, {'@': 281}), 87: (1, {'@': 281}), 98: (1, {'@': 281}), 88: (1, {'@': 281}), 31: (1, {'@': 281}), 21: (1, {'@': 281}), 1: (1, {'@': 281}), 36: (1, {'@': 281}), 37: (1, {'@': 281}), 38: (1, {'@': 281}), 6: (1, {'@': 281}), 2: (1, {'@': 281}), 18: (1, {'@': 281}), 9: (1, {'@': 281}), 40: (1, {'@': 281}), 41: (1, {'@': 281}), 15: (1, {'@': 281}), 20: (1, {'@': 281}), 33: (1, {'@': 281}), 42: (1, {'@': 281}), 43: (1, {'@': 281}), 44: (1, {'@': 281}), 45: (1, {'@': 281}), 30: (1, {'@': 281}), 22: (1, {'@': 281}), 11: (1, {'@': 281}), 46: (1, {'@': 281}), 47: (1, {'@': 281}), 48: (1, {'@': 281}), 49: (1, {'@': 281}), 50: (1, {'@': 281}), 10: (1, {'@': 281}), 51: (1, {'@': 281}), 17: (1, {'@': 281}), 26: (1, {'@': 281}), 53: (1, {'@': 281}), 57: (1, {'@': 281}), 23: (1, {'@': 281}), 54: (1, {'@': 281}), 55: (1, {'@': 281}), 56: (1, {'@': 281}), 19: (1, {'@': 281}), 76: (1, {'@': 281}), 108: (1, {'@': 281}), 109: (1, {'@': 281}), 93: (1, {'@': 281}), 97: (1, {'@': 281})}, 491: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 64: (0, 489), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 58: (1, {'@': 380}), 52: (1, {'@': 380}), 68: (1, {'@': 380})}, 492: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 64: (0, 170), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 493: {80: (1, {'@': 496}), 84: (1, {'@': 496})}, 494: {5: (0, 203), 6: (0, 32), 147: (0, 154), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 565), 9: (0, 112), 149: (0, 555), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 64: (0, 549), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 81: (0, 596), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 153: (0, 140), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 495: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 64: (0, 534), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 496: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 64: (0, 396), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 497: {1: (1, {'@': 348}), 69: (1, {'@': 348}), 36: (1, {'@': 348}), 70: (1, {'@': 348}), 38: (1, {'@': 348}), 71: (1, {'@': 348}), 2: (1, {'@': 348}), 18: (1, {'@': 348}), 39: (1, {'@': 348}), 40: (1, {'@': 348}), 72: (1, {'@': 348}), 58: (1, {'@': 348}), 20: (1, {'@': 348}), 73: (1, {'@': 348}), 42: (1, {'@': 348}), 74: (1, {'@': 348}), 43: (1, {'@': 348}), 75: (1, {'@': 348}), 44: (1, {'@': 348}), 22: (1, {'@': 348}), 76: (1, {'@': 348}), 48: (1, {'@': 348}), 77: (1, {'@': 348}), 78: (1, {'@': 348}), 50: (1, {'@': 348}), 10: (1, {'@': 348}), 68: (1, {'@': 348}), 52: (1, {'@': 348}), 79: (1, {'@': 348}), 53: (1, {'@': 348}), 80: (1, {'@': 348}), 81: (1, {'@': 348}), 23: (1, {'@': 348}), 55: (1, {'@': 348}), 56: (1, {'@': 348}), 19: (1, {'@': 348}), 31: (1, {'@': 348}), 82: (1, {'@': 348}), 21: (1, {'@': 348}), 83: (1, {'@': 348}), 37: (1, {'@': 348}), 84: (1, {'@': 348}), 6: (1, {'@': 348}), 9: (1, {'@': 348}), 41: (1, {'@': 348}), 15: (1, {'@': 348}), 85: (1, {'@': 348}), 86: (1, {'@': 348}), 33: (1, {'@': 348}), 87: (1, {'@': 348}), 45: (1, {'@': 348}), 30: (1, {'@': 348}), 11: (1, {'@': 348}), 88: (1, {'@': 348}), 46: (1, {'@': 348}), 47: (1, {'@': 348}), 89: (1, {'@': 348}), 49: (1, {'@': 348}), 90: (1, {'@': 348}), 51: (1, {'@': 348}), 91: (1, {'@': 348}), 17: (1, {'@': 348}), 26: (1, {'@': 348}), 25: (1, {'@': 348}), 92: (1, {'@': 348}), 93: (1, {'@': 348}), 94: (1, {'@': 348}), 57: (1, {'@': 348}), 95: (1, {'@': 348}), 96: (1, {'@': 348}), 54: (1, {'@': 348}), 97: (1, {'@': 348}), 98: (1, {'@': 348}), 99: (1, {'@': 348}), 100: (1, {'@': 348}), 101: (1, {'@': 348}), 102: (1, {'@': 348}), 103: (1, {'@': 348}), 104: (1, {'@': 348}), 105: (1, {'@': 348}), 106: (1, {'@': 348}), 107: (1, {'@': 348}), 108: (1, {'@': 348}), 109: (1, {'@': 348})}, 498: {25: (1, {'@': 134}), 68: (1, {'@': 134}), 52: (1, {'@': 134}), 58: (1, {'@': 134}), 84: (1, {'@': 134}), 83: (1, {'@': 134}), 69: (1, {'@': 134}), 77: (1, {'@': 134}), 70: (1, {'@': 134}), 71: (1, {'@': 134}), 94: (1, {'@': 134}), 79: (1, {'@': 134}), 85: (1, {'@': 134}), 86: (1, {'@': 134}), 73: (1, {'@': 134}), 96: (1, {'@': 134}), 87: (1, {'@': 134}), 98: (1, {'@': 134}), 88: (1, {'@': 134}), 31: (1, {'@': 134}), 21: (1, {'@': 134}), 1: (1, {'@': 134}), 36: (1, {'@': 134}), 37: (1, {'@': 134}), 38: (1, {'@': 134}), 6: (1, {'@': 134}), 2: (1, {'@': 134}), 18: (1, {'@': 134}), 9: (1, {'@': 134}), 39: (1, {'@': 134}), 40: (1, {'@': 134}), 41: (1, {'@': 134}), 15: (1, {'@': 134}), 20: (1, {'@': 134}), 33: (1, {'@': 134}), 42: (1, {'@': 134}), 43: (1, {'@': 134}), 44: (1, {'@': 134}), 45: (1, {'@': 134}), 30: (1, {'@': 134}), 22: (1, {'@': 134}), 11: (1, {'@': 134}), 46: (1, {'@': 134}), 47: (1, {'@': 134}), 48: (1, {'@': 134}), 49: (1, {'@': 134}), 50: (1, {'@': 134}), 10: (1, {'@': 134}), 51: (1, {'@': 134}), 17: (1, {'@': 134}), 26: (1, {'@': 134}), 53: (1, {'@': 134}), 57: (1, {'@': 134}), 23: (1, {'@': 134}), 54: (1, {'@': 134}), 55: (1, {'@': 134}), 56: (1, {'@': 134}), 19: (1, {'@': 134}), 97: (1, {'@': 134}), 76: (1, {'@': 134}), 109: (1, {'@': 134}), 93: (1, {'@': 134})}, 499: {52: (0, 304)}, 500: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 195: (0, 519), 60: (0, 408), 64: (0, 309), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 501: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 81: (0, 560), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 64: (0, 480), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 163: (0, 516), 76: (1, {'@': 387})}, 502: {76: (1, {'@': 441}), 93: (1, {'@': 441})}, 503: {5: (0, 203), 6: (0, 32), 147: (0, 154), 7: (0, 186), 8: (0, 276), 151: (0, 178), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 565), 9: (0, 112), 78: (0, 193), 149: (0, 555), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 64: (0, 549), 27: (0, 66), 26: (0, 3), 45: (0, 573), 36: (0, 102), 29: (0, 10), 33: (0, 497), 150: (0, 593), 0: (0, 36), 1: (0, 24), 81: (0, 596), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 152: (0, 585), 28: (0, 572), 30: (0, 225), 153: (0, 73), 31: (0, 533), 32: (0, 146), 34: (0, 521), 93: (1, {'@': 115})}, 504: {193: (0, 110), 90: (0, 245), 53: (1, {'@': 231}), 58: (1, {'@': 231}), 52: (1, {'@': 231}), 109: (1, {'@': 231}), 84: (1, {'@': 231})}, 505: {31: (1, {'@': 304}), 21: (1, {'@': 304}), 1: (1, {'@': 304}), 6: (1, {'@': 304}), 2: (1, {'@': 304}), 18: (1, {'@': 304}), 9: (1, {'@': 304}), 15: (1, {'@': 304}), 20: (1, {'@': 304}), 33: (1, {'@': 304}), 30: (1, {'@': 304}), 22: (1, {'@': 304}), 11: (1, {'@': 304}), 10: (1, {'@': 304}), 17: (1, {'@': 304}), 26: (1, {'@': 304}), 25: (1, {'@': 304}), 23: (1, {'@': 304}), 19: (1, {'@': 304})}, 506: {116: (0, 308), 115: (0, 160), 25: (0, 409), 45: (0, 321), 35: (0, 234), 19: (0, 561)}, 507: {78: (0, 237), 5: (0, 203), 6: (0, 32), 153: (0, 324), 7: (0, 186), 8: (0, 276), 151: (0, 252), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 565), 9: (0, 112), 149: (0, 555), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 64: (0, 549), 27: (0, 66), 26: (0, 3), 45: (0, 573), 36: (0, 102), 29: (0, 10), 33: (0, 497), 150: (0, 593), 0: (0, 36), 1: (0, 24), 63: (0, 25), 81: (0, 596), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 147: (0, 116), 152: (0, 585), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 93: (1, {'@': 103})}, 508: {58: (1, {'@': 499}), 68: (1, {'@': 499}), 52: (1, {'@': 499}), 84: (1, {'@': 499})}, 509: {36: (1, {'@': 486}), 103: (1, {'@': 486}), 38: (1, {'@': 486}), 70: (1, {'@': 486}), 71: (1, {'@': 486}), 2: (1, {'@': 486}), 18: (1, {'@': 486}), 39: (1, {'@': 486}), 20: (1, {'@': 486}), 74: (1, {'@': 486}), 75: (1, {'@': 486}), 22: (1, {'@': 486}), 76: (1, {'@': 486}), 50: (1, {'@': 486}), 52: (1, {'@': 486}), 23: (1, {'@': 486}), 19: (1, {'@': 486}), 21: (1, {'@': 486}), 102: (1, {'@': 486}), 84: (1, {'@': 486}), 15: (1, {'@': 486}), 85: (1, {'@': 486}), 108: (1, {'@': 486}), 46: (1, {'@': 486}), 89: (1, {'@': 486}), 109: (1, {'@': 486}), 26: (1, {'@': 486}), 25: (1, {'@': 486}), 93: (1, {'@': 486}), 94: (1, {'@': 486}), 57: (1, {'@': 486}), 96: (1, {'@': 486}), 54: (1, {'@': 486}), 98: (1, {'@': 486}), 1: (1, {'@': 486}), 101: (1, {'@': 486}), 69: (1, {'@': 486}), 40: (1, {'@': 486}), 58: (1, {'@': 486}), 106: (1, {'@': 486}), 42: (1, {'@': 486}), 43: (1, {'@': 486}), 44: (1, {'@': 486}), 107: (1, {'@': 486}), 73: (1, {'@': 486}), 48: (1, {'@': 486}), 77: (1, {'@': 486}), 10: (1, {'@': 486}), 68: (1, {'@': 486}), 79: (1, {'@': 486}), 53: (1, {'@': 486}), 80: (1, {'@': 486}), 105: (1, {'@': 486}), 55: (1, {'@': 486}), 56: (1, {'@': 486}), 31: (1, {'@': 486}), 99: (1, {'@': 486}), 100: (1, {'@': 486}), 83: (1, {'@': 486}), 37: (1, {'@': 486}), 6: (1, {'@': 486}), 9: (1, {'@': 486}), 41: (1, {'@': 486}), 86: (1, {'@': 486}), 33: (1, {'@': 486}), 87: (1, {'@': 486}), 45: (1, {'@': 486}), 30: (1, {'@': 486}), 11: (1, {'@': 486}), 88: (1, {'@': 486}), 47: (1, {'@': 486}), 49: (1, {'@': 486}), 51: (1, {'@': 486}), 91: (1, {'@': 486}), 17: (1, {'@': 486}), 104: (1, {'@': 486}), 92: (1, {'@': 486}), 97: (1, {'@': 486})}, 510: {0: (0, 36), 1: (0, 24), 2: (0, 137), 3: (0, 255), 4: (0, 50), 45: (0, 0), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 114: (0, 33), 12: (0, 397), 13: (0, 453), 14: (0, 79), 15: (0, 414), 16: (0, 244), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 29: (0, 86), 26: (0, 3), 27: (0, 66), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 34: (0, 521), 35: (0, 105), 80: (1, {'@': 372})}, 511: {68: (1, {'@': 158})}, 512: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 64: (0, 118), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 200: (0, 37), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 513: {31: (1, {'@': 256}), 21: (1, {'@': 256}), 1: (1, {'@': 256}), 36: (1, {'@': 256}), 37: (1, {'@': 256}), 38: (1, {'@': 256}), 6: (1, {'@': 256}), 2: (1, {'@': 256}), 18: (1, {'@': 256}), 9: (1, {'@': 256}), 39: (1, {'@': 256}), 40: (1, {'@': 256}), 41: (1, {'@': 256}), 15: (1, {'@': 256}), 20: (1, {'@': 256}), 33: (1, {'@': 256}), 42: (1, {'@': 256}), 43: (1, {'@': 256}), 44: (1, {'@': 256}), 45: (1, {'@': 256}), 30: (1, {'@': 256}), 22: (1, {'@': 256}), 11: (1, {'@': 256}), 46: (1, {'@': 256}), 47: (1, {'@': 256}), 48: (1, {'@': 256}), 49: (1, {'@': 256}), 50: (1, {'@': 256}), 10: (1, {'@': 256}), 51: (1, {'@': 256}), 17: (1, {'@': 256}), 26: (1, {'@': 256}), 25: (1, {'@': 256}), 52: (1, {'@': 256}), 53: (1, {'@': 256}), 23: (1, {'@': 256}), 54: (1, {'@': 256}), 55: (1, {'@': 256}), 56: (1, {'@': 256}), 19: (1, {'@': 256}), 57: (1, {'@': 256})}, 514: {31: (1, {'@': 396}), 21: (1, {'@': 396}), 1: (1, {'@': 396}), 36: (1, {'@': 396}), 37: (1, {'@': 396}), 38: (1, {'@': 396}), 6: (1, {'@': 396}), 2: (1, {'@': 396}), 18: (1, {'@': 396}), 9: (1, {'@': 396}), 39: (1, {'@': 396}), 40: (1, {'@': 396}), 41: (1, {'@': 396}), 15: (1, {'@': 396}), 20: (1, {'@': 396}), 33: (1, {'@': 396}), 42: (1, {'@': 396}), 43: (1, {'@': 396}), 44: (1, {'@': 396}), 45: (1, {'@': 396}), 30: (1, {'@': 396}), 22: (1, {'@': 396}), 11: (1, {'@': 396}), 46: (1, {'@': 396}), 47: (1, {'@': 396}), 48: (1, {'@': 396}), 49: (1, {'@': 396}), 50: (1, {'@': 396}), 10: (1, {'@': 396}), 51: (1, {'@': 396}), 17: (1, {'@': 396}), 26: (1, {'@': 396}), 25: (1, {'@': 396}), 52: (1, {'@': 396}), 53: (1, {'@': 396}), 23: (1, {'@': 396}), 54: (1, {'@': 396}), 55: (1, {'@': 396}), 56: (1, {'@': 396}), 19: (1, {'@': 396}), 57: (1, {'@': 396})}, 515: {25: (0, 409), 35: (0, 603), 217: (0, 130), 215: (0, 540), 81: (0, 464), 68: (1, {'@': 153})}, 516: {76: (1, {'@': 503}), 84: (1, {'@': 503})}, 517: {97: (0, 462)}, 518: {119: (0, 300), 48: (0, 196), 54: (0, 43), 5: (0, 203), 6: (0, 32), 7: (0, 186), 120: (0, 231), 121: (0, 30), 53: (0, 243), 8: (0, 276), 42: (0, 209), 44: (0, 156), 10: (0, 284), 122: (0, 285), 41: (0, 318), 2: (0, 137), 12: (0, 397), 123: (0, 134), 16: (0, 244), 114: (0, 364), 15: (0, 414), 35: (0, 31), 9: (0, 112), 21: (0, 256), 52: (0, 465), 20: (0, 415), 124: (0, 332), 125: (0, 334), 126: (0, 296), 60: (0, 408), 137: (0, 568), 127: (0, 97), 25: (0, 409), 61: (0, 64), 19: (0, 545), 38: (0, 75), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 40: (0, 69), 128: (0, 60), 129: (0, 438), 130: (0, 27), 1: (0, 24), 0: (0, 36), 63: (0, 25), 4: (0, 50), 45: (0, 0), 3: (0, 255), 131: (0, 425), 132: (0, 72), 43: (0, 340), 133: (0, 89), 134: (0, 76), 65: (0, 85), 135: (0, 331), 11: (0, 399), 14: (0, 79), 13: (0, 453), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 64: (0, 267), 23: (0, 70), 22: (0, 61), 136: (0, 317), 24: (0, 419), 56: (0, 456), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 138: (0, 449)}, 519: {68: (1, {'@': 470}), 84: (1, {'@': 470})}, 520: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 199: (0, 357), 2: (0, 137), 12: (0, 397), 45: (0, 356), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 203: (0, 287), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 64: (0, 118), 200: (0, 263), 43: (0, 340), 202: (0, 280), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 81: (0, 373), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 93: (1, {'@': 403})}, 521: {1: (1, {'@': 286}), 69: (1, {'@': 286}), 36: (1, {'@': 286}), 70: (1, {'@': 286}), 38: (1, {'@': 286}), 71: (1, {'@': 286}), 2: (1, {'@': 286}), 18: (1, {'@': 286}), 39: (1, {'@': 286}), 40: (1, {'@': 286}), 58: (1, {'@': 286}), 20: (1, {'@': 286}), 73: (1, {'@': 286}), 42: (1, {'@': 286}), 43: (1, {'@': 286}), 44: (1, {'@': 286}), 22: (1, {'@': 286}), 76: (1, {'@': 286}), 48: (1, {'@': 286}), 77: (1, {'@': 286}), 50: (1, {'@': 286}), 10: (1, {'@': 286}), 68: (1, {'@': 286}), 52: (1, {'@': 286}), 79: (1, {'@': 286}), 53: (1, {'@': 286}), 80: (1, {'@': 286}), 23: (1, {'@': 286}), 55: (1, {'@': 286}), 56: (1, {'@': 286}), 19: (1, {'@': 286}), 31: (1, {'@': 286}), 21: (1, {'@': 286}), 83: (1, {'@': 286}), 37: (1, {'@': 286}), 84: (1, {'@': 286}), 6: (1, {'@': 286}), 9: (1, {'@': 286}), 41: (1, {'@': 286}), 15: (1, {'@': 286}), 85: (1, {'@': 286}), 86: (1, {'@': 286}), 33: (1, {'@': 286}), 87: (1, {'@': 286}), 45: (1, {'@': 286}), 30: (1, {'@': 286}), 11: (1, {'@': 286}), 88: (1, {'@': 286}), 46: (1, {'@': 286}), 47: (1, {'@': 286}), 49: (1, {'@': 286}), 51: (1, {'@': 286}), 17: (1, {'@': 286}), 26: (1, {'@': 286}), 25: (1, {'@': 286}), 93: (1, {'@': 286}), 94: (1, {'@': 286}), 57: (1, {'@': 286}), 96: (1, {'@': 286}), 54: (1, {'@': 286}), 97: (1, {'@': 286}), 98: (1, {'@': 286}), 99: (1, {'@': 286}), 100: (1, {'@': 286}), 101: (1, {'@': 286}), 102: (1, {'@': 286}), 105: (1, {'@': 286}), 106: (1, {'@': 286}), 103: (1, {'@': 286}), 104: (1, {'@': 286}), 107: (1, {'@': 286}), 108: (1, {'@': 286}), 109: (1, {'@': 286})}, 522: {68: (1, {'@': 141})}, 523: {1: (1, {'@': 481}), 101: (1, {'@': 481}), 36: (1, {'@': 481}), 69: (1, {'@': 481}), 103: (1, {'@': 481}), 70: (1, {'@': 481}), 38: (1, {'@': 481}), 71: (1, {'@': 481}), 2: (1, {'@': 481}), 18: (1, {'@': 481}), 39: (1, {'@': 481}), 40: (1, {'@': 481}), 58: (1, {'@': 481}), 20: (1, {'@': 481}), 106: (1, {'@': 481}), 73: (1, {'@': 481}), 42: (1, {'@': 481}), 74: (1, {'@': 481}), 107: (1, {'@': 481}), 43: (1, {'@': 481}), 44: (1, {'@': 481}), 22: (1, {'@': 481}), 76: (1, {'@': 481}), 48: (1, {'@': 481}), 77: (1, {'@': 481}), 50: (1, {'@': 481}), 10: (1, {'@': 481}), 68: (1, {'@': 481}), 52: (1, {'@': 481}), 79: (1, {'@': 481}), 53: (1, {'@': 481}), 80: (1, {'@': 481}), 23: (1, {'@': 481}), 105: (1, {'@': 481}), 55: (1, {'@': 481}), 56: (1, {'@': 481}), 19: (1, {'@': 481}), 31: (1, {'@': 481}), 21: (1, {'@': 481}), 99: (1, {'@': 481}), 100: (1, {'@': 481}), 83: (1, {'@': 481}), 37: (1, {'@': 481}), 102: (1, {'@': 481}), 84: (1, {'@': 481}), 6: (1, {'@': 481}), 9: (1, {'@': 481}), 41: (1, {'@': 481}), 15: (1, {'@': 481}), 85: (1, {'@': 481}), 108: (1, {'@': 481}), 86: (1, {'@': 481}), 33: (1, {'@': 481}), 87: (1, {'@': 481}), 45: (1, {'@': 481}), 30: (1, {'@': 481}), 11: (1, {'@': 481}), 88: (1, {'@': 481}), 46: (1, {'@': 481}), 47: (1, {'@': 481}), 49: (1, {'@': 481}), 51: (1, {'@': 481}), 91: (1, {'@': 481}), 109: (1, {'@': 481}), 17: (1, {'@': 481}), 104: (1, {'@': 481}), 26: (1, {'@': 481}), 25: (1, {'@': 481}), 93: (1, {'@': 481}), 94: (1, {'@': 481}), 57: (1, {'@': 481}), 96: (1, {'@': 481}), 54: (1, {'@': 481}), 97: (1, {'@': 481}), 98: (1, {'@': 481})}, 524: {36: (1, {'@': 490}), 103: (1, {'@': 490}), 70: (1, {'@': 490}), 38: (1, {'@': 490}), 71: (1, {'@': 490}), 2: (1, {'@': 490}), 18: (1, {'@': 490}), 39: (1, {'@': 490}), 20: (1, {'@': 490}), 74: (1, {'@': 490}), 75: (1, {'@': 490}), 22: (1, {'@': 490}), 76: (1, {'@': 490}), 78: (1, {'@': 490}), 50: (1, {'@': 490}), 52: (1, {'@': 490}), 23: (1, {'@': 490}), 19: (1, {'@': 490}), 21: (1, {'@': 490}), 102: (1, {'@': 490}), 84: (1, {'@': 490}), 15: (1, {'@': 490}), 85: (1, {'@': 490}), 108: (1, {'@': 490}), 46: (1, {'@': 490}), 89: (1, {'@': 490}), 109: (1, {'@': 490}), 26: (1, {'@': 490}), 25: (1, {'@': 490}), 93: (1, {'@': 490}), 94: (1, {'@': 490}), 57: (1, {'@': 490}), 96: (1, {'@': 490}), 54: (1, {'@': 490}), 98: (1, {'@': 490}), 1: (1, {'@': 490}), 101: (1, {'@': 490}), 69: (1, {'@': 490}), 40: (1, {'@': 490}), 72: (1, {'@': 490}), 58: (1, {'@': 490}), 106: (1, {'@': 490}), 73: (1, {'@': 490}), 42: (1, {'@': 490}), 43: (1, {'@': 490}), 107: (1, {'@': 490}), 44: (1, {'@': 490}), 48: (1, {'@': 490}), 77: (1, {'@': 490}), 10: (1, {'@': 490}), 68: (1, {'@': 490}), 79: (1, {'@': 490}), 53: (1, {'@': 490}), 80: (1, {'@': 490}), 105: (1, {'@': 490}), 55: (1, {'@': 490}), 56: (1, {'@': 490}), 31: (1, {'@': 490}), 82: (1, {'@': 490}), 99: (1, {'@': 490}), 100: (1, {'@': 490}), 83: (1, {'@': 490}), 37: (1, {'@': 490}), 6: (1, {'@': 490}), 9: (1, {'@': 490}), 41: (1, {'@': 490}), 86: (1, {'@': 490}), 33: (1, {'@': 490}), 87: (1, {'@': 490}), 45: (1, {'@': 490}), 30: (1, {'@': 490}), 11: (1, {'@': 490}), 88: (1, {'@': 490}), 47: (1, {'@': 490}), 49: (1, {'@': 490}), 51: (1, {'@': 490}), 91: (1, {'@': 490}), 17: (1, {'@': 490}), 104: (1, {'@': 490}), 92: (1, {'@': 490}), 95: (1, {'@': 490}), 97: (1, {'@': 490})}, 525: {58: (1, {'@': 453}), 77: (1, {'@': 453}), 52: (1, {'@': 453})}, 526: {93: (1, {'@': 121}), 84: (1, {'@': 121})}, 527: {97: (0, 578)}, 528: {226: (0, 92), 227: (0, 155), 166: (0, 119), 112: (0, 109), 1: (1, {'@': 250}), 36: (1, {'@': 250}), 38: (1, {'@': 250}), 2: (1, {'@': 250}), 18: (1, {'@': 250}), 39: (1, {'@': 250}), 40: (1, {'@': 250}), 20: (1, {'@': 250}), 42: (1, {'@': 250}), 43: (1, {'@': 250}), 44: (1, {'@': 250}), 22: (1, {'@': 250}), 48: (1, {'@': 250}), 50: (1, {'@': 250}), 10: (1, {'@': 250}), 52: (1, {'@': 250}), 53: (1, {'@': 250}), 23: (1, {'@': 250}), 55: (1, {'@': 250}), 56: (1, {'@': 250}), 19: (1, {'@': 250}), 31: (1, {'@': 250}), 21: (1, {'@': 250}), 37: (1, {'@': 250}), 6: (1, {'@': 250}), 9: (1, {'@': 250}), 41: (1, {'@': 250}), 15: (1, {'@': 250}), 108: (1, {'@': 250}), 33: (1, {'@': 250}), 45: (1, {'@': 250}), 30: (1, {'@': 250}), 11: (1, {'@': 250}), 46: (1, {'@': 250}), 47: (1, {'@': 250}), 49: (1, {'@': 250}), 51: (1, {'@': 250}), 17: (1, {'@': 250}), 26: (1, {'@': 250}), 25: (1, {'@': 250}), 57: (1, {'@': 250}), 54: (1, {'@': 250})}, 529: {84: (0, 590), 93: (1, {'@': 421})}, 530: {93: (0, 460)}, 531: {97: (0, 176)}, 532: {58: (1, {'@': 454}), 77: (1, {'@': 454}), 52: (1, {'@': 454})}, 533: {1: (1, {'@': 347}), 69: (1, {'@': 347}), 36: (1, {'@': 347}), 70: (1, {'@': 347}), 38: (1, {'@': 347}), 71: (1, {'@': 347}), 2: (1, {'@': 347}), 18: (1, {'@': 347}), 39: (1, {'@': 347}), 40: (1, {'@': 347}), 72: (1, {'@': 347}), 58: (1, {'@': 347}), 20: (1, {'@': 347}), 73: (1, {'@': 347}), 42: (1, {'@': 347}), 74: (1, {'@': 347}), 43: (1, {'@': 347}), 75: (1, {'@': 347}), 44: (1, {'@': 347}), 22: (1, {'@': 347}), 76: (1, {'@': 347}), 48: (1, {'@': 347}), 77: (1, {'@': 347}), 78: (1, {'@': 347}), 50: (1, {'@': 347}), 10: (1, {'@': 347}), 68: (1, {'@': 347}), 52: (1, {'@': 347}), 79: (1, {'@': 347}), 53: (1, {'@': 347}), 80: (1, {'@': 347}), 81: (1, {'@': 347}), 23: (1, {'@': 347}), 55: (1, {'@': 347}), 56: (1, {'@': 347}), 19: (1, {'@': 347}), 31: (1, {'@': 347}), 82: (1, {'@': 347}), 21: (1, {'@': 347}), 83: (1, {'@': 347}), 37: (1, {'@': 347}), 84: (1, {'@': 347}), 6: (1, {'@': 347}), 9: (1, {'@': 347}), 41: (1, {'@': 347}), 15: (1, {'@': 347}), 85: (1, {'@': 347}), 86: (1, {'@': 347}), 33: (1, {'@': 347}), 87: (1, {'@': 347}), 45: (1, {'@': 347}), 30: (1, {'@': 347}), 11: (1, {'@': 347}), 88: (1, {'@': 347}), 46: (1, {'@': 347}), 47: (1, {'@': 347}), 89: (1, {'@': 347}), 49: (1, {'@': 347}), 90: (1, {'@': 347}), 51: (1, {'@': 347}), 91: (1, {'@': 347}), 17: (1, {'@': 347}), 26: (1, {'@': 347}), 25: (1, {'@': 347}), 92: (1, {'@': 347}), 93: (1, {'@': 347}), 94: (1, {'@': 347}), 57: (1, {'@': 347}), 95: (1, {'@': 347}), 96: (1, {'@': 347}), 54: (1, {'@': 347}), 97: (1, {'@': 347}), 98: (1, {'@': 347}), 99: (1, {'@': 347}), 100: (1, {'@': 347}), 101: (1, {'@': 347}), 102: (1, {'@': 347}), 103: (1, {'@': 347}), 104: (1, {'@': 347}), 105: (1, {'@': 347}), 106: (1, {'@': 347}), 107: (1, {'@': 347}), 108: (1, {'@': 347}), 109: (1, {'@': 347})}, 534: {37: (1, {'@': 391}), 76: (1, {'@': 391}), 84: (1, {'@': 391})}, 535: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 119: (0, 539), 2: (0, 137), 12: (0, 397), 15: (0, 414), 114: (0, 364), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 45: (0, 0), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 64: (0, 267), 93: (1, {'@': 350})}, 536: {25: (1, {'@': 463}), 90: (1, {'@': 463}), 53: (1, {'@': 463}), 58: (1, {'@': 463}), 84: (1, {'@': 463}), 109: (1, {'@': 463}), 52: (1, {'@': 463})}, 537: {97: (1, {'@': 437}), 93: (1, {'@': 437})}, 538: {68: (0, 117)}, 539: {83: (1, {'@': 456}), 69: (1, {'@': 456}), 77: (1, {'@': 456}), 84: (1, {'@': 456}), 70: (1, {'@': 456}), 71: (1, {'@': 456}), 52: (1, {'@': 456}), 94: (1, {'@': 456}), 79: (1, {'@': 456}), 85: (1, {'@': 456}), 58: (1, {'@': 456}), 86: (1, {'@': 456}), 73: (1, {'@': 456}), 96: (1, {'@': 456}), 87: (1, {'@': 456}), 98: (1, {'@': 456}), 88: (1, {'@': 456}), 76: (1, {'@': 456}), 93: (1, {'@': 456}), 97: (1, {'@': 456})}, 540: {68: (1, {'@': 449}), 84: (1, {'@': 449})}, 541: {84: (0, 349), 76: (1, {'@': 384})}, 542: {68: (0, 141)}, 543: {97: (1, {'@': 275}), 93: (1, {'@': 275}), 76: (1, {'@': 275})}, 544: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 64: (0, 118), 200: (0, 263), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 81: (0, 373), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 202: (0, 248)}, 545: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 119: (0, 393), 2: (0, 137), 12: (0, 397), 15: (0, 414), 114: (0, 364), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 4: (0, 50), 45: (0, 0), 3: (0, 255), 64: (0, 381), 43: (0, 340), 65: (0, 85), 11: (0, 399), 93: (0, 384), 155: (0, 398), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 228: (0, 530), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 546: {68: (0, 195)}, 547: {0: (0, 36), 1: (0, 24), 2: (0, 137), 3: (0, 255), 4: (0, 50), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 15: (0, 414), 16: (0, 244), 29: (0, 366), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 26: (0, 3), 27: (0, 66), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 34: (0, 521), 35: (0, 105)}, 548: {119: (0, 300), 48: (0, 196), 54: (0, 43), 5: (0, 203), 6: (0, 32), 7: (0, 186), 120: (0, 231), 121: (0, 30), 53: (0, 243), 8: (0, 276), 42: (0, 209), 44: (0, 156), 10: (0, 284), 122: (0, 285), 41: (0, 318), 2: (0, 137), 12: (0, 397), 123: (0, 134), 16: (0, 244), 114: (0, 364), 15: (0, 414), 35: (0, 31), 9: (0, 112), 21: (0, 256), 52: (0, 465), 20: (0, 415), 124: (0, 332), 125: (0, 334), 126: (0, 296), 60: (0, 408), 127: (0, 97), 25: (0, 409), 61: (0, 64), 19: (0, 545), 38: (0, 75), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 40: (0, 69), 128: (0, 60), 129: (0, 438), 130: (0, 27), 1: (0, 24), 0: (0, 36), 63: (0, 25), 4: (0, 50), 45: (0, 0), 3: (0, 255), 131: (0, 425), 137: (0, 242), 132: (0, 72), 43: (0, 340), 133: (0, 89), 134: (0, 76), 65: (0, 85), 135: (0, 331), 11: (0, 399), 14: (0, 79), 13: (0, 453), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 64: (0, 267), 23: (0, 70), 22: (0, 61), 136: (0, 317), 24: (0, 419), 56: (0, 456), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 138: (0, 449)}, 549: {25: (0, 409), 35: (0, 200)}, 550: {25: (0, 409), 35: (0, 499)}, 551: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 163: (0, 488), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 64: (0, 480), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 81: (0, 547), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 76: (1, {'@': 389})}, 552: {1: (1, {'@': 399}), 36: (1, {'@': 399}), 38: (1, {'@': 399}), 2: (1, {'@': 399}), 18: (1, {'@': 399}), 39: (1, {'@': 399}), 40: (1, {'@': 399}), 20: (1, {'@': 399}), 42: (1, {'@': 399}), 43: (1, {'@': 399}), 44: (1, {'@': 399}), 22: (1, {'@': 399}), 48: (1, {'@': 399}), 50: (1, {'@': 399}), 10: (1, {'@': 399}), 52: (1, {'@': 399}), 53: (1, {'@': 399}), 23: (1, {'@': 399}), 55: (1, {'@': 399}), 56: (1, {'@': 399}), 19: (1, {'@': 399}), 31: (1, {'@': 399}), 21: (1, {'@': 399}), 37: (1, {'@': 399}), 6: (1, {'@': 399}), 9: (1, {'@': 399}), 41: (1, {'@': 399}), 15: (1, {'@': 399}), 33: (1, {'@': 399}), 45: (1, {'@': 399}), 30: (1, {'@': 399}), 11: (1, {'@': 399}), 46: (1, {'@': 399}), 47: (1, {'@': 399}), 49: (1, {'@': 399}), 51: (1, {'@': 399}), 17: (1, {'@': 399}), 26: (1, {'@': 399}), 25: (1, {'@': 399}), 57: (1, {'@': 399}), 54: (1, {'@': 399})}, 553: {119: (0, 300), 48: (0, 196), 54: (0, 43), 5: (0, 203), 6: (0, 32), 7: (0, 186), 120: (0, 231), 121: (0, 30), 53: (0, 243), 8: (0, 276), 42: (0, 209), 44: (0, 156), 10: (0, 284), 137: (0, 188), 122: (0, 285), 41: (0, 318), 2: (0, 137), 12: (0, 397), 123: (0, 134), 16: (0, 244), 114: (0, 364), 15: (0, 414), 35: (0, 31), 9: (0, 112), 21: (0, 256), 52: (0, 465), 20: (0, 415), 124: (0, 332), 125: (0, 334), 126: (0, 296), 60: (0, 408), 127: (0, 97), 25: (0, 409), 61: (0, 64), 19: (0, 545), 38: (0, 75), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 40: (0, 69), 128: (0, 60), 129: (0, 438), 130: (0, 27), 1: (0, 24), 0: (0, 36), 63: (0, 25), 4: (0, 50), 45: (0, 0), 3: (0, 255), 131: (0, 425), 132: (0, 72), 43: (0, 340), 133: (0, 89), 134: (0, 76), 65: (0, 85), 135: (0, 331), 11: (0, 399), 14: (0, 79), 13: (0, 453), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 64: (0, 267), 23: (0, 70), 22: (0, 61), 136: (0, 317), 24: (0, 419), 56: (0, 456), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 138: (0, 449)}, 554: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 60: (0, 45), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 9: (0, 112), 20: (0, 415), 21: (0, 256), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 35: (0, 105), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 555: {77: (0, 492), 93: (1, {'@': 130}), 84: (1, {'@': 130})}, 556: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 64: (0, 38), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 557: {5: (0, 203), 6: (0, 32), 147: (0, 154), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 151: (0, 240), 15: (0, 414), 16: (0, 244), 35: (0, 565), 9: (0, 112), 149: (0, 555), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 64: (0, 549), 45: (0, 573), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 150: (0, 593), 0: (0, 36), 1: (0, 24), 63: (0, 25), 81: (0, 596), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 153: (0, 249), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 152: (0, 585), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 93: (1, {'@': 111})}, 558: {1: (1, {'@': 435}), 69: (1, {'@': 435}), 36: (1, {'@': 435}), 70: (1, {'@': 435}), 38: (1, {'@': 435}), 71: (1, {'@': 435}), 2: (1, {'@': 435}), 18: (1, {'@': 435}), 39: (1, {'@': 435}), 40: (1, {'@': 435}), 72: (1, {'@': 435}), 58: (1, {'@': 435}), 20: (1, {'@': 435}), 73: (1, {'@': 435}), 42: (1, {'@': 435}), 74: (1, {'@': 435}), 43: (1, {'@': 435}), 75: (1, {'@': 435}), 44: (1, {'@': 435}), 22: (1, {'@': 435}), 76: (1, {'@': 435}), 48: (1, {'@': 435}), 77: (1, {'@': 435}), 78: (1, {'@': 435}), 50: (1, {'@': 435}), 10: (1, {'@': 435}), 68: (1, {'@': 435}), 52: (1, {'@': 435}), 79: (1, {'@': 435}), 53: (1, {'@': 435}), 80: (1, {'@': 435}), 81: (1, {'@': 435}), 23: (1, {'@': 435}), 55: (1, {'@': 435}), 56: (1, {'@': 435}), 19: (1, {'@': 435}), 31: (1, {'@': 435}), 82: (1, {'@': 435}), 21: (1, {'@': 435}), 83: (1, {'@': 435}), 37: (1, {'@': 435}), 84: (1, {'@': 435}), 6: (1, {'@': 435}), 9: (1, {'@': 435}), 41: (1, {'@': 435}), 15: (1, {'@': 435}), 85: (1, {'@': 435}), 86: (1, {'@': 435}), 33: (1, {'@': 435}), 87: (1, {'@': 435}), 45: (1, {'@': 435}), 30: (1, {'@': 435}), 11: (1, {'@': 435}), 88: (1, {'@': 435}), 46: (1, {'@': 435}), 47: (1, {'@': 435}), 89: (1, {'@': 435}), 49: (1, {'@': 435}), 90: (1, {'@': 435}), 51: (1, {'@': 435}), 91: (1, {'@': 435}), 17: (1, {'@': 435}), 26: (1, {'@': 435}), 25: (1, {'@': 435}), 92: (1, {'@': 435}), 93: (1, {'@': 435}), 94: (1, {'@': 435}), 57: (1, {'@': 435}), 95: (1, {'@': 435}), 96: (1, {'@': 435}), 54: (1, {'@': 435}), 97: (1, {'@': 435}), 98: (1, {'@': 435}), 99: (1, {'@': 435}), 100: (1, {'@': 435}), 101: (1, {'@': 435}), 102: (1, {'@': 435}), 103: (1, {'@': 435}), 104: (1, {'@': 435}), 105: (1, {'@': 435}), 106: (1, {'@': 435}), 107: (1, {'@': 435}), 108: (1, {'@': 435}), 109: (1, {'@': 435})}, 559: {80: (1, {'@': 495}), 84: (1, {'@': 495})}, 560: {0: (0, 36), 1: (0, 24), 2: (0, 137), 3: (0, 255), 4: (0, 50), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 15: (0, 414), 16: (0, 244), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 26: (0, 3), 27: (0, 66), 28: (0, 572), 30: (0, 225), 31: (0, 533), 29: (0, 298), 32: (0, 146), 33: (0, 497), 34: (0, 521), 35: (0, 105)}, 561: {115: (0, 160), 25: (0, 409), 116: (0, 21), 35: (0, 234)}, 562: {25: (0, 409), 35: (0, 485)}, 563: {35: (0, 504), 25: (0, 409), 140: (0, 306), 53: (0, 506)}, 564: {52: (1, {'@': 461}), 58: (1, {'@': 461}), 84: (1, {'@': 461})}, 565: {118: (0, 138), 84: (1, {'@': 132}), 93: (1, {'@': 132}), 77: (1, {'@': 132}), 82: (1, {'@': 341}), 89: (1, {'@': 341}), 45: (1, {'@': 341}), 99: (1, {'@': 341}), 100: (1, {'@': 341}), 101: (1, {'@': 341}), 78: (1, {'@': 341}), 36: (1, {'@': 341}), 102: (1, {'@': 341}), 90: (1, {'@': 341}), 10: (1, {'@': 341}), 91: (1, {'@': 341}), 103: (1, {'@': 341}), 104: (1, {'@': 341}), 25: (1, {'@': 341}), 92: (1, {'@': 341}), 9: (1, {'@': 341}), 39: (1, {'@': 341}), 72: (1, {'@': 341}), 95: (1, {'@': 341}), 80: (1, {'@': 341}), 81: (1, {'@': 341}), 105: (1, {'@': 341}), 106: (1, {'@': 341}), 74: (1, {'@': 341}), 107: (1, {'@': 341}), 75: (1, {'@': 341}), 22: (1, {'@': 341}), 19: (1, {'@': 341})}, 566: {84: (0, 501), 76: (1, {'@': 388})}, 567: {68: (0, 518)}, 568: {31: (1, {'@': 92}), 21: (1, {'@': 92}), 1: (1, {'@': 92}), 36: (1, {'@': 92}), 37: (1, {'@': 92}), 38: (1, {'@': 92}), 6: (1, {'@': 92}), 2: (1, {'@': 92}), 18: (1, {'@': 92}), 9: (1, {'@': 92}), 39: (1, {'@': 92}), 40: (1, {'@': 92}), 41: (1, {'@': 92}), 15: (1, {'@': 92}), 20: (1, {'@': 92}), 33: (1, {'@': 92}), 42: (1, {'@': 92}), 43: (1, {'@': 92}), 44: (1, {'@': 92}), 45: (1, {'@': 92}), 30: (1, {'@': 92}), 22: (1, {'@': 92}), 11: (1, {'@': 92}), 46: (1, {'@': 92}), 47: (1, {'@': 92}), 48: (1, {'@': 92}), 49: (1, {'@': 92}), 50: (1, {'@': 92}), 10: (1, {'@': 92}), 51: (1, {'@': 92}), 17: (1, {'@': 92}), 26: (1, {'@': 92}), 25: (1, {'@': 92}), 52: (1, {'@': 92}), 53: (1, {'@': 92}), 23: (1, {'@': 92}), 54: (1, {'@': 92}), 55: (1, {'@': 92}), 56: (1, {'@': 92}), 19: (1, {'@': 92}), 57: (1, {'@': 92})}, 569: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 64: (0, 118), 200: (0, 263), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 81: (0, 373), 23: (0, 70), 22: (0, 61), 24: (0, 419), 202: (0, 185), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 570: {187: (0, 452), 84: (0, 503), 93: (1, {'@': 116})}, 571: {31: (1, {'@': 165}), 21: (1, {'@': 165}), 1: (1, {'@': 165}), 36: (1, {'@': 165}), 37: (1, {'@': 165}), 38: (1, {'@': 165}), 6: (1, {'@': 165}), 2: (1, {'@': 165}), 18: (1, {'@': 165}), 9: (1, {'@': 165}), 39: (1, {'@': 165}), 40: (1, {'@': 165}), 41: (1, {'@': 165}), 15: (1, {'@': 165}), 20: (1, {'@': 165}), 33: (1, {'@': 165}), 42: (1, {'@': 165}), 43: (1, {'@': 165}), 44: (1, {'@': 165}), 45: (1, {'@': 165}), 30: (1, {'@': 165}), 22: (1, {'@': 165}), 11: (1, {'@': 165}), 46: (1, {'@': 165}), 47: (1, {'@': 165}), 48: (1, {'@': 165}), 49: (1, {'@': 165}), 50: (1, {'@': 165}), 10: (1, {'@': 165}), 51: (1, {'@': 165}), 17: (1, {'@': 165}), 26: (1, {'@': 165}), 25: (1, {'@': 165}), 52: (1, {'@': 165}), 53: (1, {'@': 165}), 57: (1, {'@': 165}), 23: (1, {'@': 165}), 54: (1, {'@': 165}), 55: (1, {'@': 165}), 56: (1, {'@': 165}), 19: (1, {'@': 165}), 108: (1, {'@': 165}), 112: (1, {'@': 165})}, 572: {1: (1, {'@': 491}), 69: (1, {'@': 491}), 36: (1, {'@': 491}), 70: (1, {'@': 491}), 38: (1, {'@': 491}), 71: (1, {'@': 491}), 2: (1, {'@': 491}), 18: (1, {'@': 491}), 39: (1, {'@': 491}), 40: (1, {'@': 491}), 72: (1, {'@': 491}), 58: (1, {'@': 491}), 20: (1, {'@': 491}), 73: (1, {'@': 491}), 42: (1, {'@': 491}), 74: (1, {'@': 491}), 43: (1, {'@': 491}), 75: (1, {'@': 491}), 44: (1, {'@': 491}), 22: (1, {'@': 491}), 76: (1, {'@': 491}), 48: (1, {'@': 491}), 77: (1, {'@': 491}), 78: (1, {'@': 491}), 50: (1, {'@': 491}), 10: (1, {'@': 491}), 68: (1, {'@': 491}), 52: (1, {'@': 491}), 79: (1, {'@': 491}), 53: (1, {'@': 491}), 80: (1, {'@': 491}), 81: (1, {'@': 491}), 23: (1, {'@': 491}), 55: (1, {'@': 491}), 56: (1, {'@': 491}), 19: (1, {'@': 491}), 31: (1, {'@': 491}), 82: (1, {'@': 491}), 21: (1, {'@': 491}), 83: (1, {'@': 491}), 37: (1, {'@': 491}), 84: (1, {'@': 491}), 6: (1, {'@': 491}), 9: (1, {'@': 491}), 41: (1, {'@': 491}), 15: (1, {'@': 491}), 85: (1, {'@': 491}), 86: (1, {'@': 491}), 33: (1, {'@': 491}), 87: (1, {'@': 491}), 45: (1, {'@': 491}), 30: (1, {'@': 491}), 11: (1, {'@': 491}), 88: (1, {'@': 491}), 46: (1, {'@': 491}), 47: (1, {'@': 491}), 89: (1, {'@': 491}), 49: (1, {'@': 491}), 90: (1, {'@': 491}), 51: (1, {'@': 491}), 91: (1, {'@': 491}), 17: (1, {'@': 491}), 26: (1, {'@': 491}), 25: (1, {'@': 491}), 92: (1, {'@': 491}), 93: (1, {'@': 491}), 94: (1, {'@': 491}), 57: (1, {'@': 491}), 95: (1, {'@': 491}), 96: (1, {'@': 491}), 54: (1, {'@': 491}), 97: (1, {'@': 491}), 98: (1, {'@': 491}), 99: (1, {'@': 491}), 100: (1, {'@': 491}), 101: (1, {'@': 491}), 102: (1, {'@': 491}), 103: (1, {'@': 491}), 104: (1, {'@': 491}), 105: (1, {'@': 491}), 106: (1, {'@': 491}), 107: (1, {'@': 491}), 108: (1, {'@': 491}), 109: (1, {'@': 491})}, 573: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 565), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 64: (0, 549), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 149: (0, 526), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 93: (1, {'@': 122}), 84: (1, {'@': 122})}, 574: {31: (1, {'@': 265}), 21: (1, {'@': 265}), 1: (1, {'@': 265}), 36: (1, {'@': 265}), 37: (1, {'@': 265}), 38: (1, {'@': 265}), 6: (1, {'@': 265}), 2: (1, {'@': 265}), 18: (1, {'@': 265}), 9: (1, {'@': 265}), 39: (1, {'@': 265}), 40: (1, {'@': 265}), 41: (1, {'@': 265}), 15: (1, {'@': 265}), 20: (1, {'@': 265}), 33: (1, {'@': 265}), 42: (1, {'@': 265}), 43: (1, {'@': 265}), 44: (1, {'@': 265}), 45: (1, {'@': 265}), 30: (1, {'@': 265}), 22: (1, {'@': 265}), 11: (1, {'@': 265}), 46: (1, {'@': 265}), 47: (1, {'@': 265}), 48: (1, {'@': 265}), 49: (1, {'@': 265}), 50: (1, {'@': 265}), 10: (1, {'@': 265}), 51: (1, {'@': 265}), 17: (1, {'@': 265}), 26: (1, {'@': 265}), 25: (1, {'@': 265}), 52: (1, {'@': 265}), 53: (1, {'@': 265}), 23: (1, {'@': 265}), 54: (1, {'@': 265}), 55: (1, {'@': 265}), 56: (1, {'@': 265}), 19: (1, {'@': 265}), 57: (1, {'@': 265})}, 575: {25: (0, 409), 217: (0, 218), 35: (0, 603), 215: (0, 96), 81: (0, 464), 68: (1, {'@': 150})}, 576: {0: (0, 36), 1: (0, 24), 2: (0, 137), 4: (0, 50), 5: (0, 203), 6: (0, 32), 7: (0, 186), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 15: (0, 414), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 8: (0, 444), 27: (0, 66), 26: (0, 3), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 33: (0, 497), 35: (0, 105)}, 577: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 119: (0, 539), 2: (0, 137), 12: (0, 397), 15: (0, 414), 114: (0, 364), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 45: (0, 0), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 64: (0, 267), 97: (1, {'@': 392}), 76: (1, {'@': 392})}, 578: {1: (1, {'@': 327}), 69: (1, {'@': 327}), 36: (1, {'@': 327}), 70: (1, {'@': 327}), 38: (1, {'@': 327}), 71: (1, {'@': 327}), 2: (1, {'@': 327}), 18: (1, {'@': 327}), 39: (1, {'@': 327}), 40: (1, {'@': 327}), 72: (1, {'@': 327}), 58: (1, {'@': 327}), 20: (1, {'@': 327}), 73: (1, {'@': 327}), 42: (1, {'@': 327}), 74: (1, {'@': 327}), 43: (1, {'@': 327}), 75: (1, {'@': 327}), 44: (1, {'@': 327}), 22: (1, {'@': 327}), 76: (1, {'@': 327}), 48: (1, {'@': 327}), 77: (1, {'@': 327}), 78: (1, {'@': 327}), 50: (1, {'@': 327}), 10: (1, {'@': 327}), 68: (1, {'@': 327}), 52: (1, {'@': 327}), 79: (1, {'@': 327}), 53: (1, {'@': 327}), 80: (1, {'@': 327}), 81: (1, {'@': 327}), 23: (1, {'@': 327}), 55: (1, {'@': 327}), 56: (1, {'@': 327}), 19: (1, {'@': 327}), 31: (1, {'@': 327}), 82: (1, {'@': 327}), 21: (1, {'@': 327}), 83: (1, {'@': 327}), 37: (1, {'@': 327}), 84: (1, {'@': 327}), 6: (1, {'@': 327}), 9: (1, {'@': 327}), 41: (1, {'@': 327}), 15: (1, {'@': 327}), 85: (1, {'@': 327}), 86: (1, {'@': 327}), 33: (1, {'@': 327}), 87: (1, {'@': 327}), 45: (1, {'@': 327}), 30: (1, {'@': 327}), 11: (1, {'@': 327}), 88: (1, {'@': 327}), 46: (1, {'@': 327}), 47: (1, {'@': 327}), 89: (1, {'@': 327}), 49: (1, {'@': 327}), 90: (1, {'@': 327}), 51: (1, {'@': 327}), 91: (1, {'@': 327}), 17: (1, {'@': 327}), 26: (1, {'@': 327}), 25: (1, {'@': 327}), 92: (1, {'@': 327}), 93: (1, {'@': 327}), 94: (1, {'@': 327}), 57: (1, {'@': 327}), 95: (1, {'@': 327}), 96: (1, {'@': 327}), 54: (1, {'@': 327}), 97: (1, {'@': 327}), 98: (1, {'@': 327}), 99: (1, {'@': 327}), 100: (1, {'@': 327}), 101: (1, {'@': 327}), 102: (1, {'@': 327}), 103: (1, {'@': 327}), 104: (1, {'@': 327}), 105: (1, {'@': 327}), 106: (1, {'@': 327}), 107: (1, {'@': 327}), 108: (1, {'@': 327}), 109: (1, {'@': 327})}, 579: {156: (0, 327), 84: (0, 222), 58: (1, {'@': 235}), 52: (1, {'@': 235})}, 580: {93: (0, 479)}, 581: {0: (0, 36), 1: (0, 24), 2: (0, 137), 3: (0, 255), 4: (0, 50), 5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 9: (0, 112), 10: (0, 284), 11: (0, 399), 12: (0, 397), 13: (0, 453), 14: (0, 79), 66: (0, 431), 15: (0, 414), 16: (0, 244), 17: (0, 7), 18: (0, 558), 19: (0, 545), 20: (0, 415), 21: (0, 256), 29: (0, 10), 22: (0, 61), 23: (0, 70), 24: (0, 419), 25: (0, 409), 26: (0, 3), 27: (0, 66), 28: (0, 572), 36: (0, 102), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 33: (0, 497), 63: (0, 336), 35: (0, 105)}, 582: {1: (1, {'@': 480}), 101: (1, {'@': 480}), 36: (1, {'@': 480}), 69: (1, {'@': 480}), 103: (1, {'@': 480}), 70: (1, {'@': 480}), 38: (1, {'@': 480}), 71: (1, {'@': 480}), 2: (1, {'@': 480}), 18: (1, {'@': 480}), 39: (1, {'@': 480}), 40: (1, {'@': 480}), 58: (1, {'@': 480}), 20: (1, {'@': 480}), 106: (1, {'@': 480}), 73: (1, {'@': 480}), 42: (1, {'@': 480}), 43: (1, {'@': 480}), 107: (1, {'@': 480}), 44: (1, {'@': 480}), 22: (1, {'@': 480}), 76: (1, {'@': 480}), 48: (1, {'@': 480}), 77: (1, {'@': 480}), 50: (1, {'@': 480}), 10: (1, {'@': 480}), 68: (1, {'@': 480}), 52: (1, {'@': 480}), 79: (1, {'@': 480}), 53: (1, {'@': 480}), 80: (1, {'@': 480}), 23: (1, {'@': 480}), 105: (1, {'@': 480}), 55: (1, {'@': 480}), 56: (1, {'@': 480}), 19: (1, {'@': 480}), 31: (1, {'@': 480}), 21: (1, {'@': 480}), 99: (1, {'@': 480}), 100: (1, {'@': 480}), 83: (1, {'@': 480}), 37: (1, {'@': 480}), 102: (1, {'@': 480}), 84: (1, {'@': 480}), 6: (1, {'@': 480}), 9: (1, {'@': 480}), 41: (1, {'@': 480}), 15: (1, {'@': 480}), 85: (1, {'@': 480}), 108: (1, {'@': 480}), 86: (1, {'@': 480}), 33: (1, {'@': 480}), 87: (1, {'@': 480}), 45: (1, {'@': 480}), 30: (1, {'@': 480}), 11: (1, {'@': 480}), 88: (1, {'@': 480}), 46: (1, {'@': 480}), 47: (1, {'@': 480}), 49: (1, {'@': 480}), 51: (1, {'@': 480}), 91: (1, {'@': 480}), 109: (1, {'@': 480}), 17: (1, {'@': 480}), 104: (1, {'@': 480}), 26: (1, {'@': 480}), 25: (1, {'@': 480}), 94: (1, {'@': 480}), 93: (1, {'@': 480}), 57: (1, {'@': 480}), 96: (1, {'@': 480}), 54: (1, {'@': 480}), 97: (1, {'@': 480}), 98: (1, {'@': 480})}, 583: {35: (0, 504), 140: (0, 159), 25: (0, 409), 196: (0, 361)}, 584: {68: (0, 180)}, 585: {84: (0, 494), 187: (0, 446), 229: (0, 483), 93: (1, {'@': 126})}, 586: {84: (0, 500), 68: (1, {'@': 257})}, 587: {93: (1, {'@': 118})}, 588: {37: (1, {'@': 512}), 39: (1, {'@': 512}), 76: (1, {'@': 512}), 93: (1, {'@': 512}), 97: (1, {'@': 512})}, 589: {1: (1, {'@': 476}), 69: (1, {'@': 476}), 36: (1, {'@': 476}), 103: (1, {'@': 476}), 70: (1, {'@': 476}), 38: (1, {'@': 476}), 71: (1, {'@': 476}), 2: (1, {'@': 476}), 18: (1, {'@': 476}), 39: (1, {'@': 476}), 40: (1, {'@': 476}), 58: (1, {'@': 476}), 20: (1, {'@': 476}), 73: (1, {'@': 476}), 42: (1, {'@': 476}), 43: (1, {'@': 476}), 107: (1, {'@': 476}), 44: (1, {'@': 476}), 22: (1, {'@': 476}), 76: (1, {'@': 476}), 48: (1, {'@': 476}), 77: (1, {'@': 476}), 50: (1, {'@': 476}), 10: (1, {'@': 476}), 68: (1, {'@': 476}), 52: (1, {'@': 476}), 79: (1, {'@': 476}), 53: (1, {'@': 476}), 23: (1, {'@': 476}), 55: (1, {'@': 476}), 56: (1, {'@': 476}), 19: (1, {'@': 476}), 31: (1, {'@': 476}), 21: (1, {'@': 476}), 83: (1, {'@': 476}), 37: (1, {'@': 476}), 84: (1, {'@': 476}), 6: (1, {'@': 476}), 9: (1, {'@': 476}), 41: (1, {'@': 476}), 15: (1, {'@': 476}), 85: (1, {'@': 476}), 108: (1, {'@': 476}), 86: (1, {'@': 476}), 33: (1, {'@': 476}), 87: (1, {'@': 476}), 45: (1, {'@': 476}), 30: (1, {'@': 476}), 11: (1, {'@': 476}), 88: (1, {'@': 476}), 46: (1, {'@': 476}), 47: (1, {'@': 476}), 49: (1, {'@': 476}), 51: (1, {'@': 476}), 109: (1, {'@': 476}), 17: (1, {'@': 476}), 26: (1, {'@': 476}), 25: (1, {'@': 476}), 94: (1, {'@': 476}), 93: (1, {'@': 476}), 57: (1, {'@': 476}), 96: (1, {'@': 476}), 54: (1, {'@': 476}), 97: (1, {'@': 476}), 98: (1, {'@': 476})}, 590: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 64: (0, 118), 200: (0, 263), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 591: {93: (1, {'@': 117})}, 592: {115: (0, 160), 25: (0, 409), 116: (0, 59), 35: (0, 234)}, 593: {84: (0, 494), 187: (0, 446), 229: (0, 455), 93: (1, {'@': 126})}, 594: {97: (1, {'@': 276}), 93: (1, {'@': 276}), 76: (1, {'@': 276})}, 595: {84: (0, 544), 93: (1, {'@': 417})}, 596: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 35: (0, 565), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 64: (0, 549), 27: (0, 66), 26: (0, 3), 149: (0, 426), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521)}, 597: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 16: (0, 244), 163: (0, 488), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 64: (0, 480), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 81: (0, 547), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 76: (1, {'@': 385})}, 598: {68: (1, {'@': 469}), 84: (1, {'@': 469})}, 599: {225: (0, 4)}, 600: {80: (0, 191)}, 601: {1: (1, {'@': 482}), 101: (1, {'@': 482}), 36: (1, {'@': 482}), 69: (1, {'@': 482}), 103: (1, {'@': 482}), 70: (1, {'@': 482}), 38: (1, {'@': 482}), 71: (1, {'@': 482}), 2: (1, {'@': 482}), 18: (1, {'@': 482}), 39: (1, {'@': 482}), 40: (1, {'@': 482}), 58: (1, {'@': 482}), 20: (1, {'@': 482}), 106: (1, {'@': 482}), 73: (1, {'@': 482}), 42: (1, {'@': 482}), 74: (1, {'@': 482}), 107: (1, {'@': 482}), 43: (1, {'@': 482}), 44: (1, {'@': 482}), 22: (1, {'@': 482}), 76: (1, {'@': 482}), 48: (1, {'@': 482}), 77: (1, {'@': 482}), 50: (1, {'@': 482}), 10: (1, {'@': 482}), 68: (1, {'@': 482}), 52: (1, {'@': 482}), 79: (1, {'@': 482}), 53: (1, {'@': 482}), 80: (1, {'@': 482}), 23: (1, {'@': 482}), 105: (1, {'@': 482}), 55: (1, {'@': 482}), 56: (1, {'@': 482}), 19: (1, {'@': 482}), 31: (1, {'@': 482}), 21: (1, {'@': 482}), 99: (1, {'@': 482}), 100: (1, {'@': 482}), 83: (1, {'@': 482}), 37: (1, {'@': 482}), 102: (1, {'@': 482}), 84: (1, {'@': 482}), 6: (1, {'@': 482}), 9: (1, {'@': 482}), 41: (1, {'@': 482}), 15: (1, {'@': 482}), 85: (1, {'@': 482}), 108: (1, {'@': 482}), 86: (1, {'@': 482}), 33: (1, {'@': 482}), 87: (1, {'@': 482}), 45: (1, {'@': 482}), 30: (1, {'@': 482}), 11: (1, {'@': 482}), 88: (1, {'@': 482}), 46: (1, {'@': 482}), 47: (1, {'@': 482}), 49: (1, {'@': 482}), 51: (1, {'@': 482}), 91: (1, {'@': 482}), 109: (1, {'@': 482}), 17: (1, {'@': 482}), 104: (1, {'@': 482}), 26: (1, {'@': 482}), 25: (1, {'@': 482}), 93: (1, {'@': 482}), 94: (1, {'@': 482}), 57: (1, {'@': 482}), 96: (1, {'@': 482}), 54: (1, {'@': 482}), 97: (1, {'@': 482}), 98: (1, {'@': 482})}, 602: {76: (1, {'@': 427}), 93: (1, {'@': 427}), 97: (1, {'@': 427})}, 603: {77: (0, 220), 68: (1, {'@': 148}), 84: (1, {'@': 148})}, 604: {5: (0, 203), 6: (0, 32), 7: (0, 186), 8: (0, 276), 10: (0, 284), 2: (0, 137), 12: (0, 397), 15: (0, 414), 114: (0, 364), 16: (0, 244), 35: (0, 31), 9: (0, 112), 20: (0, 415), 21: (0, 256), 60: (0, 408), 119: (0, 378), 25: (0, 409), 61: (0, 64), 19: (0, 545), 27: (0, 66), 26: (0, 3), 36: (0, 102), 29: (0, 10), 33: (0, 497), 0: (0, 36), 1: (0, 24), 63: (0, 25), 3: (0, 255), 45: (0, 0), 4: (0, 50), 43: (0, 340), 65: (0, 85), 11: (0, 399), 13: (0, 453), 14: (0, 79), 66: (0, 431), 67: (0, 162), 17: (0, 7), 18: (0, 558), 23: (0, 70), 22: (0, 61), 24: (0, 419), 28: (0, 572), 30: (0, 225), 31: (0, 533), 32: (0, 146), 34: (0, 521), 64: (0, 267), 97: (1, {'@': 394}), 76: (1, {'@': 394})}}, 'start_states': {'start': 182}, 'end_states': {'start': 401}}, '__type__': 'ParsingFrontend'}, 'rules': [{'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}, {'@': 220}, {'@': 221}, {'@': 222}, {'@': 223}, {'@': 224}, {'@': 225}, {'@': 226}, {'@': 227}, {'@': 228}, {'@': 229}, {'@': 230}, {'@': 231}, {'@': 232}, {'@': 233}, {'@': 234}, {'@': 235}, {'@': 236}, {'@': 237}, {'@': 238}, {'@': 239}, {'@': 240}, {'@': 241}, {'@': 242}, {'@': 243}, {'@': 244}, {'@': 245}, {'@': 246}, {'@': 247}, {'@': 248}, {'@': 249}, {'@': 250}, {'@': 251}, {'@': 252}, {'@': 253}, {'@': 254}, {'@': 255}, {'@': 256}, {'@': 257}, {'@': 258}, {'@': 259}, {'@': 260}, {'@': 261}, {'@': 262}, {'@': 263}, {'@': 264}, {'@': 265}, {'@': 266}, {'@': 267}, {'@': 268}, {'@': 269}, {'@': 270}, {'@': 271}, {'@': 272}, {'@': 273}, {'@': 274}, {'@': 275}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 337}, {'@': 338}, {'@': 339}, {'@': 340}, {'@': 341}, {'@': 342}, {'@': 343}, {'@': 344}, {'@': 345}, {'@': 346}, {'@': 347}, {'@': 348}, {'@': 349}, {'@': 350}, {'@': 351}, {'@': 352}, {'@': 353}, {'@': 354}, {'@': 355}, {'@': 356}, {'@': 357}, {'@': 358}, {'@': 359}, {'@': 360}, {'@': 361}, {'@': 362}, {'@': 363}, {'@': 364}, {'@': 365}, {'@': 366}, {'@': 367}, {'@': 368}, {'@': 369}, {'@': 370}, {'@': 371}, {'@': 372}, {'@': 373}, {'@': 374}, {'@': 375}, {'@': 376}, {'@': 377}, {'@': 378}, {'@': 379}, {'@': 380}, {'@': 381}, {'@': 382}, {'@': 383}, {'@': 384}, {'@': 385}, {'@': 386}, {'@': 387}, {'@': 388}, {'@': 389}, {'@': 390}, {'@': 391}, {'@': 392}, {'@': 393}, {'@': 394}, {'@': 395}, {'@': 396}, {'@': 397}, {'@': 398}, {'@': 399}, {'@': 400}, {'@': 401}, {'@': 402}, {'@': 403}, {'@': 404}, {'@': 405}, {'@': 406}, {'@': 407}, {'@': 408}, {'@': 409}, {'@': 410}, {'@': 411}, {'@': 412}, {'@': 413}, {'@': 414}, {'@': 415}, {'@': 416}, {'@': 417}, {'@': 418}, {'@': 419}, {'@': 420}, {'@': 421}, {'@': 422}, {'@': 423}, {'@': 424}, {'@': 425}, {'@': 426}, {'@': 427}, {'@': 428}, {'@': 429}, {'@': 430}, {'@': 431}, {'@': 432}, {'@': 433}, {'@': 434}, {'@': 435}, {'@': 436}, {'@': 437}, {'@': 438}, {'@': 439}, {'@': 440}, {'@': 441}, {'@': 442}, {'@': 443}, {'@': 444}, {'@': 445}, {'@': 446}, {'@': 447}, {'@': 448}, {'@': 449}, {'@': 450}, {'@': 451}, {'@': 452}, {'@': 453}, {'@': 454}, {'@': 455}, {'@': 456}, {'@': 457}, {'@': 458}, {'@': 459}, {'@': 460}, {'@': 461}, {'@': 462}, {'@': 463}, {'@': 464}, {'@': 465}, {'@': 466}, {'@': 467}, {'@': 468}, {'@': 469}, {'@': 470}, {'@': 471}, {'@': 472}, {'@': 473}, {'@': 474}, {'@': 475}, {'@': 476}, {'@': 477}, {'@': 478}, {'@': 479}, {'@': 480}, {'@': 481}, {'@': 482}, {'@': 483}, {'@': 484}, {'@': 485}, {'@': 486}, {'@': 487}, {'@': 488}, {'@': 489}, {'@': 490}, {'@': 491}, {'@': 492}, {'@': 493}, {'@': 494}, {'@': 495}, {'@': 496}, {'@': 497}, {'@': 498}, {'@': 499}, {'@': 500}, {'@': 501}, {'@': 502}, {'@': 503}, {'@': 504}, {'@': 505}, {'@': 506}, {'@': 507}, {'@': 508}, {'@': 509}, {'@': 510}, {'@': 511}, {'@': 512}], 'options': {'debug': False, 'strict': False, 'keep_all_tokens': False, 'tree_class': None, 'cache': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': 'normal', 'ambiguity': 'auto', 'regex': False, 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0, 'use_bytes': False, 'ordered_sets': True, 'import_paths': [], 'source_path': None, '_plugins': {}}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], 'raw': '"/"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 1: {'name': '_NEWLINE', 'pattern': {'value': '(?:(?:\\/\\/[^\n]*|\r?\n[\t ]*))+', 'flags': [], 'raw': None, '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 2: {'name': '__IGNORE_0', 'pattern': {'value': '[\t \x0c]+', 'flags': [], 'raw': '/[\\t \\f]+/', '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 3: {'name': '__IGNORE_1', 'pattern': {'value': '\\\\[\t \x0c]*\r?\n', 'flags': [], 'raw': '/\\\\[\\t \\f]*\\r?\\n/', '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 4: {'name': 'NAME', 'pattern': {'value': '[^\\W\\d]\\w*', 'flags': [], 'raw': '/[^\\W\\d]\\w*/', '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 5: {'name': 'COMMENT', 'pattern': {'value': '\\/\\/[^\n]*', 'flags': [], 'raw': '/\\/\\/[^\\n]*/', '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 6: {'name': 'STRING', 'pattern': {'value': '([ubf]?r?|r[ubf])("(?!"").*?(?<!\\\\)(\\\\\\\\)*?"|\'(?!\'\').*?(?<!\\\\)(\\\\\\\\)*?\')', 'flags': ['i'], 'raw': '/([ubf]?r?|r[ubf])("(?!"").*?(?<!\\\\)(\\\\\\\\)*?"|\'(?!\'\').*?(?<!\\\\)(\\\\\\\\)*?\')/i', '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 7: {'name': 'LONG_STRING', 'pattern': {'value': '([ubf]?r?|r[ubf])(""".*?(?<!\\\\)(\\\\\\\\)*?"""|\'\'\'.*?(?<!\\\\)(\\\\\\\\)*?\'\'\')', 'flags': ['i', 's'], 'raw': '/([ubf]?r?|r[ubf])(""".*?(?<!\\\\)(\\\\\\\\)*?"""|\'\'\'.*?(?<!\\\\)(\\\\\\\\)*?\'\'\')/is', '_width': [6, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 8: {'name': 'DEC_NUMBER', 'pattern': {'value': '(?:0(?:(?:_)?0)*(?![1-9])|[1-9](?:(?:_)?[0-9])*)', 'flags': [], 'raw': None, '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 9: {'name': 'HEX_NUMBER', 'pattern': {'value': '0(?:x|X)(?:(?:_)?(?:[0-9]|[a-f]|[A-F]))+', 'flags': [], 'raw': None, '_width': [3, 4294967295], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 10: {'name': 'OCT_NUMBER', 'pattern': {'value': '0(?:o|O)(?:(?:_)?[0-7])+', 'flags': [], 'raw': None, '_width': [3, 4294967295], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 11: {'name': 'BIN_NUMBER', 'pattern': {'value': '0(?:b|B)(?:(?:_)?[0-1])+', 'flags': [], 'raw': None, '_width': [3, 4294967295], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 12: {'name': 'FLOAT_NUMBER', 'pattern': {'value': '(?:[0-9](?:(?:_)?[0-9])*(?:e|E)(?:(?:\\+|\\-))?[0-9](?:(?:_)?[0-9])*|(?:[0-9](?:(?:_)?[0-9])*\\.(?:[0-9](?:(?:_)?[0-9])*)?|\\.[0-9](?:(?:_)?[0-9])*)(?:(?:e|E)(?:(?:\\+|\\-))?[0-9](?:(?:_)?[0-9])*)?)', 'flags': [], 'raw': None, '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 13: {'name': 'IMAG_NUMBER', 'pattern': {'value': '(?:(?:[0-9](?:(?:_)?[0-9])*(?:e|E)(?:(?:\\+|\\-))?[0-9](?:(?:_)?[0-9])*|(?:[0-9](?:(?:_)?[0-9])*\\.(?:[0-9](?:(?:_)?[0-9])*)?|\\.[0-9](?:(?:_)?[0-9])*)(?:(?:e|E)(?:(?:\\+|\\-))?[0-9](?:(?:_)?[0-9])*)?)|[0-9](?:(?:_)?[0-9])*)(?:J|j)', 'flags': [], 'raw': None, '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 14: {'name': 'DEF', 'pattern': {'value': 'def', 'flags': [], 'raw': '"def"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 15: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], 'raw': '"("', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 16: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], 'raw': '")"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 17: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], 'raw': '":"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 18: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], 'raw': '","', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 19: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], 'raw': '"*"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 20: {'name': '__ANON_0', 'pattern': {'value': '**', 'flags': [], 'raw': '"**"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 21: {'name': 'EQUAL', 'pattern': {'value': '=', 'flags': [], 'raw': '"="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 22: {'name': 'LAMBDA', 'pattern': {'value': 'lambda', 'flags': [], 'raw': '"lambda"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 23: {'name': 'SEMICOLON', 'pattern': {'value': ';', 'flags': [], 'raw': '";"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 24: {'name': '__ANON_1', 'pattern': {'value': '+=', 'flags': [], 'raw': '"+="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 25: {'name': '__ANON_2', 'pattern': {'value': '-=', 'flags': [], 'raw': '"-="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 26: {'name': '__ANON_3', 'pattern': {'value': '*=', 'flags': [], 'raw': '"*="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 27: {'name': '__ANON_4', 'pattern': {'value': '@=', 'flags': [], 'raw': '"@="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 28: {'name': '__ANON_5', 'pattern': {'value': '/=', 'flags': [], 'raw': '"/="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 29: {'name': '__ANON_6', 'pattern': {'value': '%=', 'flags': [], 'raw': '"%="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 30: {'name': '__ANON_7', 'pattern': {'value': '&=', 'flags': [], 'raw': '"&="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 31: {'name': '__ANON_8', 'pattern': {'value': '|=', 'flags': [], 'raw': '"|="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 32: {'name': '__ANON_9', 'pattern': {'value': '^=', 'flags': [], 'raw': '"^="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 33: {'name': '__ANON_10', 'pattern': {'value': '<<=', 'flags': [], 'raw': '"<<="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 34: {'name': '__ANON_11', 'pattern': {'value': '>>=', 'flags': [], 'raw': '">>="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 35: {'name': '__ANON_12', 'pattern': {'value': '**=', 'flags': [], 'raw': '"**="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 36: {'name': '__ANON_13', 'pattern': {'value': '//=', 'flags': [], 'raw': '"//="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 37: {'name': 'PASS', 'pattern': {'value': 'pass', 'flags': [], 'raw': '"pass"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 38: {'name': 'BREAK', 'pattern': {'value': 'break', 'flags': [], 'raw': '"break"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 39: {'name': 'CONTINUE', 'pattern': {'value': 'continue', 'flags': [], 'raw': '"continue"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 40: {'name': 'RETURN', 'pattern': {'value': 'return', 'flags': [], 'raw': '"return"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 41: {'name': 'IMPORT', 'pattern': {'value': 'import', 'flags': [], 'raw': '"import"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 42: {'name': 'FROM', 'pattern': {'value': 'from', 'flags': [], 'raw': '"from"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 43: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], 'raw': '"."', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 44: {'name': 'AS', 'pattern': {'value': 'as', 'flags': [], 'raw': '"as"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 45: {'name': 'GLOBAL', 'pattern': {'value': 'global', 'flags': [], 'raw': '"global"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 46: {'name': 'NONLOCAL', 'pattern': {'value': 'nonlocal', 'flags': [], 'raw': '"nonlocal"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 47: {'name': 'ASSERT', 'pattern': {'value': 'assert', 'flags': [], 'raw': '"assert"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 48: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], 'raw': '"else"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 49: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], 'raw': '"if"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 50: {'name': 'ELIF', 'pattern': {'value': 'elif', 'flags': [], 'raw': '"elif"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 51: {'name': 'WHILE', 'pattern': {'value': 'while', 'flags': [], 'raw': '"while"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 52: {'name': 'FOR', 'pattern': {'value': 'for', 'flags': [], 'raw': '"for"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 53: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], 'raw': '"in"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 54: {'name': 'WITH', 'pattern': {'value': 'with', 'flags': [], 'raw': '"with"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 55: {'name': '__ANON_14', 'pattern': {'value': ':=', 'flags': [], 'raw': '":="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 56: {'name': 'OR', 'pattern': {'value': 'or', 'flags': [], 'raw': '"or"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 57: {'name': 'AND', 'pattern': {'value': 'and', 'flags': [], 'raw': '"and"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 58: {'name': 'NOT', 'pattern': {'value': 'not', 'flags': [], 'raw': '"not"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 59: {'name': 'VBAR', 'pattern': {'value': '|', 'flags': [], 'raw': '"|"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 60: {'name': 'CIRCUMFLEX', 'pattern': {'value': '^', 'flags': [], 'raw': '"^"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 61: {'name': 'AMPERSAND', 'pattern': {'value': '&', 'flags': [], 'raw': '"&"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 62: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], 'raw': '"+"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 63: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], 'raw': '"-"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 64: {'name': 'TILDE', 'pattern': {'value': '~', 'flags': [], 'raw': '"~"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 65: {'name': '__ANON_15', 'pattern': {'value': '<<', 'flags': [], 'raw': '"<<"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 66: {'name': '__ANON_16', 'pattern': {'value': '>>', 'flags': [], 'raw': '">>"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 67: {'name': 'AT', 'pattern': {'value': '@', 'flags': [], 'raw': '"@"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 68: {'name': 'PERCENT', 'pattern': {'value': '%', 'flags': [], 'raw': '"%"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 69: {'name': '__ANON_17', 'pattern': {'value': '//', 'flags': [], 'raw': '"//"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 70: {'name': 'LESSTHAN', 'pattern': {'value': '<', 'flags': [], 'raw': '"<"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 71: {'name': 'MORETHAN', 'pattern': {'value': '>', 'flags': [], 'raw': '">"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 72: {'name': '__ANON_18', 'pattern': {'value': '==', 'flags': [], 'raw': '"=="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 73: {'name': '__ANON_19', 'pattern': {'value': '>=', 'flags': [], 'raw': '">="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 74: {'name': '__ANON_20', 'pattern': {'value': '<=', 'flags': [], 'raw': '"<="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 75: {'name': '__ANON_21', 'pattern': {'value': '!=', 'flags': [], 'raw': '"!="', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 76: {'name': 'IS', 'pattern': {'value': 'is', 'flags': [], 'raw': '"is"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 77: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], 'raw': '"["', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 78: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], 'raw': '"]"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 79: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], 'raw': '"{"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 80: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], 'raw': '"}"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 81: {'name': '__ANON_22', 'pattern': {'value': '...', 'flags': [], 'raw': '"..."', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 82: {'name': 'NULL', 'pattern': {'value': 'null', 'flags': [], 'raw': '"null"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 83: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], 'raw': '"true"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 84: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], 'raw': '"false"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 85: {'name': 'STRUCT', 'pattern': {'value': 'struct', 'flags': [], 'raw': '"struct"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 86: {'name': 'UNION', 'pattern': {'value': 'union', 'flags': [], 'raw': '"union"', '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 87: {'origin': {'name': Token('RULE', 'start'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': Token('RULE', 'start'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': Token('RULE', 'funcdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'returntype', '__type__': 'NonTerminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'parameters', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': Token('RULE', 'funcdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'returntype', '__type__': 'NonTerminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, False, True, False, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': Token('RULE', 'funcdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'parameters', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, False, False, False, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': Token('RULE', 'funcdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, False, True, False, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'starparams', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwparams', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'starparams', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwparams', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'starparams', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwparams', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'starparams', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwparams', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__parameters_star_1', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'starparams', '__type__': 'NonTerminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwparams', '__type__': 'NonTerminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}], 'order': 19, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'starparams', '__type__': 'NonTerminal'}], 'order': 20, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwparams', '__type__': 'NonTerminal'}], 'order': 21, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 22, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}], 'order': 23, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'starparams', '__type__': 'NonTerminal'}], 'order': 24, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'kwparams', '__type__': 'NonTerminal'}], 'order': 25, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': Token('RULE', 'starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'starparam', '__type__': 'NonTerminal'}, {'name': 'poststarparams', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': Token('RULE', 'starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'starguard', '__type__': 'NonTerminal'}, {'name': 'poststarparams', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': Token('RULE', 'starparam'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typedparam', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': Token('RULE', 'starguard'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': Token('RULE', 'poststarparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwparams', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': Token('RULE', 'poststarparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__parameters_star_1', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': Token('RULE', 'poststarparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwparams', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': Token('RULE', 'poststarparams'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (True,), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': Token('RULE', 'kwparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typedparam', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': Token('RULE', 'kwparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typedparam', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': Token('RULE', 'paramvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typedparam', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': Token('RULE', 'paramvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typedparam', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': Token('RULE', 'typedparam'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': Token('RULE', 'typedparam'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': Token('RULE', 'lambdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LAMBDA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_params', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': Token('RULE', 'lambdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LAMBDA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': Token('RULE', 'lambdef_nocond'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LAMBDA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_params', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test_nocond', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': Token('RULE', 'lambdef_nocond'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LAMBDA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test_nocond', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_starparams', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_starparams', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_starparams', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': Token('RULE', 'lambda_paramvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': Token('RULE', 'lambda_paramvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': Token('RULE', 'lambda_kwparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': Token('RULE', 'lambda_kwparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': Token('RULE', 'stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'compound_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': Token('RULE', 'stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'simple_stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': Token('RULE', 'simple_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'small_stmt', '__type__': 'NonTerminal'}, {'name': '__simple_stmt_star_3', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': Token('RULE', 'simple_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'small_stmt', '__type__': 'NonTerminal'}, {'name': '__simple_stmt_star_3', '__type__': 'NonTerminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': Token('RULE', 'simple_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'small_stmt', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': Token('RULE', 'simple_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'small_stmt', '__type__': 'NonTerminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assign_stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pass_stmt', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'flow_stmt', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_stmt', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'global_stmt', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'nonlocal_stmt', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assert_stmt', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': Token('RULE', 'expr_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'testlist_star_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'augassign', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assign', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': Token('RULE', 'assign'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'testlist_star_expr', '__type__': 'NonTerminal'}, {'name': '__assign_plus_4', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': Token('RULE', 'augassign'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'testlist_star_expr', '__type__': 'NonTerminal'}, {'name': 'augassign_op', '__type__': 'NonTerminal'}, {'name': 'testlist', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_1', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_2', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_3', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_4', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_5', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_6', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_7', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_8', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_9', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_10', 'filter_out': False, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_11', 'filter_out': False, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_13', 'filter_out': False, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': Token('RULE', 'testlist_star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': Token('RULE', 'testlist_star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': '__testlist_star_expr_plus_5', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': Token('RULE', 'testlist_star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': '__testlist_star_expr_plus_5', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': Token('RULE', 'testlist_star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': Token('RULE', 'pass_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PASS', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': Token('RULE', 'flow_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'break_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': Token('RULE', 'flow_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'continue_stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': Token('RULE', 'flow_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'return_stmt', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': Token('RULE', 'break_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BREAK', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': Token('RULE', 'continue_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONTINUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': Token('RULE', 'return_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'testlist', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': Token('RULE', 'return_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': Token('RULE', 'import_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': Token('RULE', 'import_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_from', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': Token('RULE', 'import_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_as_names', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dots', '__type__': 'NonTerminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dots', '__type__': 'NonTerminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_names', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dots', '__type__': 'NonTerminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_names', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_names', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 215: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_names', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dots', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dots', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_names', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dots', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_names', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': Token('RULE', 'dots'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__dots_plus_6', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 220: {'origin': {'name': Token('RULE', 'import_as_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name', '__type__': 'NonTerminal'}, {'name': 'AS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': Token('RULE', 'import_as_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': Token('RULE', 'dotted_as_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'AS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 223: {'origin': {'name': Token('RULE', 'dotted_as_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dotted_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 224: {'origin': {'name': Token('RULE', 'import_as_names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_as_name', '__type__': 'NonTerminal'}, {'name': '__import_as_names_star_7', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 225: {'origin': {'name': Token('RULE', 'import_as_names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_as_name', '__type__': 'NonTerminal'}, {'name': '__import_as_names_star_7', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': Token('RULE', 'import_as_names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_as_name', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': Token('RULE', 'import_as_names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_as_name', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': Token('RULE', 'dotted_as_names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dotted_as_name', '__type__': 'NonTerminal'}, {'name': '__dotted_as_names_star_8', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 229: {'origin': {'name': Token('RULE', 'dotted_as_names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dotted_as_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': Token('RULE', 'dotted_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name', '__type__': 'NonTerminal'}, {'name': '__dotted_name_star_9', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': Token('RULE', 'dotted_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': Token('RULE', 'global_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GLOBAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': '__global_stmt_star_10', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': Token('RULE', 'global_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GLOBAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 234: {'origin': {'name': Token('RULE', 'nonlocal_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NONLOCAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': '__global_stmt_star_10', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': Token('RULE', 'nonlocal_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NONLOCAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': Token('RULE', 'assert_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ASSERT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': Token('RULE', 'assert_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ASSERT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'if_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'while_stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'for_stmt', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'macro_with_block_stmt', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'with_stmt', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 243: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'funcdef', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'structdef', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'uniondef', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var_decl_init', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': Token('RULE', 'if_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'elifs', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': Token('RULE', 'if_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'elifs', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': Token('RULE', 'elifs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__elifs_star_11', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': Token('RULE', 'elifs'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 251: {'origin': {'name': Token('RULE', 'elif_'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': Token('RULE', 'while_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': Token('RULE', 'while_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 254: {'origin': {'name': Token('RULE', 'for_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exprlist', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'testlist', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 255: {'origin': {'name': Token('RULE', 'for_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exprlist', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'testlist', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 256: {'origin': {'name': Token('RULE', 'with_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WITH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'with_items', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 257: {'origin': {'name': Token('RULE', 'with_items'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'with_item', '__type__': 'NonTerminal'}, {'name': '__with_items_star_12', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 258: {'origin': {'name': Token('RULE', 'with_items'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'with_item', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 259: {'origin': {'name': Token('RULE', 'with_item'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'AS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 260: {'origin': {'name': Token('RULE', 'with_item'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 261: {'origin': {'name': Token('RULE', 'macro_with_block_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 262: {'origin': {'name': Token('RULE', 'var_decl_init'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typed_uninit_var_decl', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 263: {'origin': {'name': Token('RULE', 'var_decl_init'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typed_or_init_var_decl', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 264: {'origin': {'name': Token('RULE', 'typed_uninit_var_decl'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 265: {'origin': {'name': Token('RULE', 'typed_or_init_var_decl'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test_or_star_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 266: {'origin': {'name': Token('RULE', 'typed_or_init_var_decl'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test_or_star_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (True, False, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': Token('RULE', 'suite'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'simple_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 268: {'origin': {'name': Token('RULE', 'suite'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_INDENT', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__suite_plus_13', '__type__': 'NonTerminal'}, {'name': '_DEDENT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 269: {'origin': {'name': Token('RULE', 'returntype'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 270: {'origin': {'name': Token('RULE', 'test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'or_test', '__type__': 'NonTerminal'}, {'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'or_test', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 271: {'origin': {'name': Token('RULE', 'test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'or_test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 272: {'origin': {'name': Token('RULE', 'test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambdef', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 273: {'origin': {'name': Token('RULE', 'test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assign_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 274: {'origin': {'name': Token('RULE', 'assign_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name', '__type__': 'NonTerminal'}, {'name': '__ANON_14', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 275: {'origin': {'name': Token('RULE', 'test_nocond'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'or_test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 276: {'origin': {'name': Token('RULE', 'test_nocond'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambdef_nocond', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 277: {'origin': {'name': Token('RULE', 'or_test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'and_test', '__type__': 'NonTerminal'}, {'name': '__or_test_star_14', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 278: {'origin': {'name': Token('RULE', 'or_test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'and_test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 279: {'origin': {'name': Token('RULE', 'and_test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'not_test_', '__type__': 'NonTerminal'}, {'name': '__and_test_star_15', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 280: {'origin': {'name': Token('RULE', 'and_test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'not_test_', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 281: {'origin': {'name': Token('RULE', 'not_test_'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'not_test_', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'not_test', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 282: {'origin': {'name': Token('RULE', 'not_test_'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comparison', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 283: {'origin': {'name': Token('RULE', 'comparison'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__comparison_star_16', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 284: {'origin': {'name': Token('RULE', 'comparison'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 285: {'origin': {'name': Token('RULE', 'star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 286: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'or_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 287: {'origin': {'name': Token('RULE', 'or_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'xor_expr', '__type__': 'NonTerminal'}, {'name': '__or_expr_star_17', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 288: {'origin': {'name': Token('RULE', 'or_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'xor_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 289: {'origin': {'name': Token('RULE', 'xor_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'and_expr', '__type__': 'NonTerminal'}, {'name': '__xor_expr_star_18', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 290: {'origin': {'name': Token('RULE', 'xor_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'and_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 291: {'origin': {'name': Token('RULE', 'and_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'shift_expr', '__type__': 'NonTerminal'}, {'name': '__and_expr_star_19', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 292: {'origin': {'name': Token('RULE', 'and_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'shift_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 293: {'origin': {'name': Token('RULE', 'shift_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arith_expr', '__type__': 'NonTerminal'}, {'name': '__shift_expr_star_20', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 294: {'origin': {'name': Token('RULE', 'shift_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arith_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 295: {'origin': {'name': Token('RULE', 'arith_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': '__arith_expr_star_21', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 296: {'origin': {'name': Token('RULE', 'arith_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 297: {'origin': {'name': Token('RULE', 'term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'factor', '__type__': 'NonTerminal'}, {'name': '__term_star_22', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 298: {'origin': {'name': Token('RULE', 'term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'factor', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 299: {'origin': {'name': Token('RULE', 'factor'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_unary_op', '__type__': 'NonTerminal'}, {'name': 'factor', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 300: {'origin': {'name': Token('RULE', 'factor'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'power', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 301: {'origin': {'name': Token('RULE', '_unary_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 302: {'origin': {'name': Token('RULE', '_unary_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 303: {'origin': {'name': Token('RULE', '_unary_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TILDE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 304: {'origin': {'name': Token('RULE', '_add_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 305: {'origin': {'name': Token('RULE', '_add_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 306: {'origin': {'name': Token('RULE', '_shift_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 307: {'origin': {'name': Token('RULE', '_shift_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_16', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 308: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 309: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 310: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 311: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 312: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_17', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 313: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LESSTHAN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 314: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MORETHAN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 315: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_18', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 316: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_19', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 317: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_20', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 318: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_21', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 319: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 320: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NOT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 321: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 322: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'NOT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 323: {'origin': {'name': Token('RULE', 'power'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'factor', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 324: {'origin': {'name': Token('RULE', 'power'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 325: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arguments', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'funccall', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 326: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'funccall', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 327: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'subscriptlist', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'getitem', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 328: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'getattr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 329: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 330: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_tuple_inner', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 331: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 332: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'comprehension{test_or_star_expr}', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'tuple_comprehension', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 333: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_exprlist', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 334: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 335: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'comprehension{test_or_star_expr}', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'list_comprehension', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 336: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_dict_exprlist', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'dict', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 337: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'dict', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 338: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'comprehension{key_value}', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'dict_comprehension', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 339: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_exprlist', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'set', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 340: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'comprehension{test}', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': 'set_comprehension', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 341: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'name', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'ident', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 342: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'number', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 343: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string_concat', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 344: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 345: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_22', 'filter_out': True, '__type__': 'Terminal'}], 'order': 15, 'alias': 'ellipsis', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 346: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NULL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 16, 'alias': 'const_null', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 347: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 17, 'alias': 'const_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 348: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 18, 'alias': 'const_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 349: {'origin': {'name': Token('RULE', 'string_concat'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__string_concat_plus_23', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 350: {'origin': {'name': Token('RULE', '_tuple_inner'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': '__testlist_star_expr_plus_5', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 351: {'origin': {'name': Token('RULE', '_tuple_inner'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': '__testlist_star_expr_plus_5', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 352: {'origin': {'name': Token('RULE', '_tuple_inner'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 353: {'origin': {'name': Token('RULE', 'test_or_star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 354: {'origin': {'name': Token('RULE', 'test_or_star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 355: {'origin': {'name': Token('RULE', 'subscriptlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'subscript', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 356: {'origin': {'name': Token('RULE', 'subscriptlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'subscript', '__type__': 'NonTerminal'}, {'name': '__subscriptlist_plus_24', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'subscript_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 357: {'origin': {'name': Token('RULE', 'subscriptlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'subscript', '__type__': 'NonTerminal'}, {'name': '__subscriptlist_plus_24', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'subscript_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 358: {'origin': {'name': Token('RULE', 'subscriptlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'subscript', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'subscript_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 359: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 360: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'sliceop', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 361: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 362: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'sliceop', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 363: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 364: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'sliceop', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (True, False, False, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 365: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (True, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 366: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'sliceop', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (True, False, True, False), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 367: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (True, False, True, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 368: {'origin': {'name': Token('RULE', 'sliceop'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 369: {'origin': {'name': Token('RULE', 'sliceop'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 370: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 371: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 372: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__exprlist_plus_25', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 373: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__exprlist_plus_25', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 374: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 375: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}, {'name': '__exprlist_plus_25', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 376: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}, {'name': '__exprlist_plus_25', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 377: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 378: {'origin': {'name': Token('RULE', 'testlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 379: {'origin': {'name': Token('RULE', 'testlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'testlist_tuple', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 380: {'origin': {'name': Token('RULE', 'testlist_tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': '__testlist_tuple_plus_26', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 381: {'origin': {'name': Token('RULE', 'testlist_tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': '__testlist_tuple_plus_26', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 382: {'origin': {'name': Token('RULE', 'testlist_tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 383: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key_value', '__type__': 'NonTerminal'}, {'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 384: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key_value', '__type__': 'NonTerminal'}, {'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 385: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key_value', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 386: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key_value', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 387: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 388: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 389: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 390: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 391: {'origin': {'name': Token('RULE', 'key_value'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 392: {'origin': {'name': Token('RULE', '_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': '__testlist_star_expr_plus_5', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 393: {'origin': {'name': Token('RULE', '_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': '__testlist_star_expr_plus_5', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 394: {'origin': {'name': Token('RULE', '_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 395: {'origin': {'name': Token('RULE', '_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 396: {'origin': {'name': Token('RULE', 'structdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'struct_union_types', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 397: {'origin': {'name': Token('RULE', 'uniondef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNION', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'struct_union_types', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 398: {'origin': {'name': Token('RULE', 'type_and_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'name', '__type__': 'NonTerminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 399: {'origin': {'name': Token('RULE', 'struct_union_types'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'type_and_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 400: {'origin': {'name': Token('RULE', 'struct_union_types'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_INDENT', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__struct_union_types_plus_28', '__type__': 'NonTerminal'}, {'name': '_DEDENT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 401: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': '__arguments_star_29', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'starargs', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 402: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': '__arguments_star_29', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 403: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': '__arguments_star_29', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 404: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': '__arguments_star_29', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 405: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'starargs', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 406: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 407: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 408: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 409: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'starargs', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 410: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 411: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comprehension{test}', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 412: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': '__starargs_star_30', '__type__': 'NonTerminal'}, {'name': '__arguments_star_29', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 413: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': '__starargs_star_30', '__type__': 'NonTerminal'}, {'name': '__arguments_star_29', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 414: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': '__starargs_star_30', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 415: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': '__starargs_star_30', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 416: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': '__arguments_star_29', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 417: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': '__arguments_star_29', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 418: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 419: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 420: {'origin': {'name': Token('RULE', 'stararg'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 421: {'origin': {'name': Token('RULE', 'kwargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': '__arguments_star_29', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 422: {'origin': {'name': Token('RULE', 'kwargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 423: {'origin': {'name': Token('RULE', 'argvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 424: {'origin': {'name': Token('RULE', 'argvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 425: {'origin': {'name': Token('RULE', 'comp_fors'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__comp_fors_plus_31', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 426: {'origin': {'name': Token('RULE', 'comp_for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exprlist', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'or_test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 427: {'origin': {'name': Token('RULE', 'comp_if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test_nocond', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 428: {'origin': {'name': Token('RULE', 'number'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEC_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 429: {'origin': {'name': Token('RULE', 'number'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HEX_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 430: {'origin': {'name': Token('RULE', 'number'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BIN_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 431: {'origin': {'name': Token('RULE', 'number'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'OCT_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 432: {'origin': {'name': Token('RULE', 'number'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FLOAT_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 433: {'origin': {'name': Token('RULE', 'number'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IMAG_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 434: {'origin': {'name': Token('RULE', 'string'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 435: {'origin': {'name': Token('RULE', 'string'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LONG_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 436: {'origin': {'name': Token('RULE', 'name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 437: {'origin': {'name': 'comprehension{test_or_star_expr}', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': 'comp_fors', '__type__': 'NonTerminal'}, {'name': 'comp_if', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': Token('RULE', 'comprehension'), 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 438: {'origin': {'name': 'comprehension{test_or_star_expr}', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': 'comp_fors', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': Token('RULE', 'comprehension'), 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 439: {'origin': {'name': 'comprehension{key_value}', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key_value', '__type__': 'NonTerminal'}, {'name': 'comp_fors', '__type__': 'NonTerminal'}, {'name': 'comp_if', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': Token('RULE', 'comprehension'), 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 440: {'origin': {'name': 'comprehension{key_value}', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key_value', '__type__': 'NonTerminal'}, {'name': 'comp_fors', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': Token('RULE', 'comprehension'), 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 441: {'origin': {'name': 'comprehension{test}', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'comp_fors', '__type__': 'NonTerminal'}, {'name': 'comp_if', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': Token('RULE', 'comprehension'), 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 442: {'origin': {'name': 'comprehension{test}', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'comp_fors', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': Token('RULE', 'comprehension'), 'empty_indices': (False, False, True), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 443: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 444: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 445: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 446: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'stmt', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 447: {'origin': {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'paramvalue', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 448: {'origin': {'name': '__parameters_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__parameters_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'paramvalue', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 449: {'origin': {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 450: {'origin': {'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__lambda_params_star_2', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 451: {'origin': {'name': '__simple_stmt_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'small_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 452: {'origin': {'name': '__simple_stmt_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__simple_stmt_star_3', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'small_stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 453: {'origin': {'name': '__assign_plus_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'testlist_star_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 454: {'origin': {'name': '__assign_plus_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__assign_plus_4', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'testlist_star_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 455: {'origin': {'name': '__testlist_star_expr_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test_or_star_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 456: {'origin': {'name': '__testlist_star_expr_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__testlist_star_expr_plus_5', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test_or_star_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 457: {'origin': {'name': '__dots_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 458: {'origin': {'name': '__dots_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__dots_plus_6', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 459: {'origin': {'name': '__import_as_names_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 460: {'origin': {'name': '__import_as_names_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__import_as_names_star_7', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 461: {'origin': {'name': '__dotted_as_names_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_as_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 462: {'origin': {'name': '__dotted_as_names_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__dotted_as_names_star_8', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_as_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 463: {'origin': {'name': '__dotted_name_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 464: {'origin': {'name': '__dotted_name_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__dotted_name_star_9', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 465: {'origin': {'name': '__global_stmt_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 466: {'origin': {'name': '__global_stmt_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__global_stmt_star_10', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 467: {'origin': {'name': '__elifs_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'elif_', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 468: {'origin': {'name': '__elifs_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__elifs_star_11', '__type__': 'NonTerminal'}, {'name': 'elif_', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 469: {'origin': {'name': '__with_items_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'with_item', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 470: {'origin': {'name': '__with_items_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__with_items_star_12', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'with_item', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 471: {'origin': {'name': '__suite_plus_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 472: {'origin': {'name': '__suite_plus_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__suite_plus_13', '__type__': 'NonTerminal'}, {'name': 'stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 473: {'origin': {'name': '__or_test_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'OR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'and_test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 474: {'origin': {'name': '__or_test_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__or_test_star_14', '__type__': 'NonTerminal'}, {'name': 'OR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'and_test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 475: {'origin': {'name': '__and_test_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'not_test_', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 476: {'origin': {'name': '__and_test_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__and_test_star_15', '__type__': 'NonTerminal'}, {'name': 'AND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'not_test_', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 477: {'origin': {'name': '__comparison_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comp_op', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 478: {'origin': {'name': '__comparison_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__comparison_star_16', '__type__': 'NonTerminal'}, {'name': 'comp_op', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 479: {'origin': {'name': '__or_expr_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VBAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'xor_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 480: {'origin': {'name': '__or_expr_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__or_expr_star_17', '__type__': 'NonTerminal'}, {'name': 'VBAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'xor_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 481: {'origin': {'name': '__xor_expr_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'and_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 482: {'origin': {'name': '__xor_expr_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__xor_expr_star_18', '__type__': 'NonTerminal'}, {'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'and_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 483: {'origin': {'name': '__and_expr_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMPERSAND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'shift_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 484: {'origin': {'name': '__and_expr_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__and_expr_star_19', '__type__': 'NonTerminal'}, {'name': 'AMPERSAND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'shift_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 485: {'origin': {'name': '__shift_expr_star_20', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_shift_op', '__type__': 'NonTerminal'}, {'name': 'arith_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 486: {'origin': {'name': '__shift_expr_star_20', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__shift_expr_star_20', '__type__': 'NonTerminal'}, {'name': '_shift_op', '__type__': 'NonTerminal'}, {'name': 'arith_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 487: {'origin': {'name': '__arith_expr_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_add_op', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 488: {'origin': {'name': '__arith_expr_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__arith_expr_star_21', '__type__': 'NonTerminal'}, {'name': '_add_op', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 489: {'origin': {'name': '__term_star_22', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_mul_op', '__type__': 'NonTerminal'}, {'name': 'factor', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 490: {'origin': {'name': '__term_star_22', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__term_star_22', '__type__': 'NonTerminal'}, {'name': '_mul_op', '__type__': 'NonTerminal'}, {'name': 'factor', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 491: {'origin': {'name': '__string_concat_plus_23', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 492: {'origin': {'name': '__string_concat_plus_23', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__string_concat_plus_23', '__type__': 'NonTerminal'}, {'name': 'string', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 493: {'origin': {'name': '__subscriptlist_plus_24', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'subscript', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 494: {'origin': {'name': '__subscriptlist_plus_24', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__subscriptlist_plus_24', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'subscript', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 495: {'origin': {'name': '__exprlist_plus_25', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 496: {'origin': {'name': '__exprlist_plus_25', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'star_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 497: {'origin': {'name': '__exprlist_plus_25', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__exprlist_plus_25', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 498: {'origin': {'name': '__exprlist_plus_25', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__exprlist_plus_25', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'star_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 499: {'origin': {'name': '__testlist_tuple_plus_26', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 500: {'origin': {'name': '__testlist_tuple_plus_26', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__testlist_tuple_plus_26', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 501: {'origin': {'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'key_value', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 502: {'origin': {'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 503: {'origin': {'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}, 'expansion': [{'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'key_value', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 504: {'origin': {'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}, 'expansion': [{'name': '___dict_exprlist_star_27', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 505: {'origin': {'name': '__struct_union_types_plus_28', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'type_and_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 506: {'origin': {'name': '__struct_union_types_plus_28', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__struct_union_types_plus_28', '__type__': 'NonTerminal'}, {'name': 'type_and_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 507: {'origin': {'name': '__arguments_star_29', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'argvalue', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 508: {'origin': {'name': '__arguments_star_29', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__arguments_star_29', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'argvalue', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 509: {'origin': {'name': '__starargs_star_30', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'stararg', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 510: {'origin': {'name': '__starargs_star_30', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__starargs_star_30', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'stararg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 511: {'origin': {'name': '__comp_fors_plus_31', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comp_for', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 512: {'origin': {'name': '__comp_fors_plus_31', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__comp_fors_plus_31', '__type__': 'NonTerminal'}, {'name': 'comp_for', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(**kwargs):
  return Lark._load_from_dict(DATA, MEMO, **kwargs)
