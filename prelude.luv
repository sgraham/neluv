struct Range:
  int start
  int stop
  int step

struct RangeIter:
  *Range obj
  int cur

on Range def __iter__(self):
  return RangeIter(self, self.start)

on RangeIter def __next__(self):
  if self.obj.step < 0:
    if self.cur <= self.obj.stop:
      return false, 0
  else:
    if self.cur >= self.obj.stop:
      return false, 0
  ret = self.cur
  self.cur += self.obj.step
  return true, ret

// It would be nice to implement `str` here mostly, but trying got a bit messy.
// - the parser turns `str` into a Type rather than a Struct
// - there's ordering problems in the generated code
// - pointer arithmetic isn't implemented yet
// - the compiler is messy wrt to treating $Str as a value/ptr and that makes
// member funcs not right for str (this is probably just a general bug).

def void printint(int i): external
def void printbool(bool b): external
def void printstr(str s): external
def void printspace(): external
def void printnl(): external

import C

// `C is container
// `T is contained type
// `I is iterator
quote QuotedList:

  struct `C:
    *`T ptr
    int len
    int cap

  struct `I:
    *`C seq
    int cur

  on `C def __getitem__(self, int at):
    assert at >= 0 and at < self.len
    return self.ptr[at]

  on `C def __iter__(self):
    return `I(self, 0)

  on `C def __del__(self):
    C.free(self.ptr)
    self.ptr = null
    self.len = 0
    self.cap = 0

  on `C def reserve(self, int cap):
    if self.cap < cap:
      newcap = cap
      if newcap < 16: newcap = 16
      while newcap < cap:
        newcap *= 2
      *`T newp = C.malloc(sizeof(`T) * newcap)
      C.memcpy(newp, self.ptr, sizeof(`T) * self.len)
      C.free(self.ptr)
      self.ptr = newp
      self.cap = newcap

  on `C def append(self, `T value):
    self.reserve(self.len + 1)
    self.ptr[self.len] = value
    self.len += 1

  on `I def __next__(self):
    if self.cur >= self.seq.len:
      return false, zeroed(`T)
    `T ret = self.seq.ptr[self.cur]
    self.cur += 1
    return true, ret


import_macros "prelude.mac.py"

// TODO: implement here with macros:
// iter()
// next()
// enumerate()
// len()
